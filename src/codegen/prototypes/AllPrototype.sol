// SPDX-License-Identifier: MIT
pragma solidity >=0.8.21;

/* Autogenerated file. Do not edit manually. */

import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { createPrototype } from "../../libraries/prototypes/createPrototype.sol";
import { PackedCounter } from "@latticexyz/store/src/PackedCounter.sol";
import { EBuilding, EResource, ESize, EUnit, ESendType, EObjectives, EAllianceInviteMode, EAllianceRole, EOrderType, EFleetKey, EFleetStance } from "../common.sol";
import "../index.sol";

import { IStore } from "@latticexyz/store/src/IStore.sol";

function createPrototypes(IStore store) {
  WorldPrototype(store);
  BuildingPrototype(store);
  ExpansionPrototype(store);
  IronSupplyPrototype(store);
  CopperSupplyPrototype(store);
  LithiumSupplyPrototype(store);
  TitaniumSupplyPrototype(store);
  PlatinumSupplyPrototype(store);
  IridiumSupplyPrototype(store);
  IronPlateSupplyPrototype(store);
  AlloySupplyPrototype(store);
  PVCellSupplyPrototype(store);
  RocketFuelSupplyPrototype(store);
  MarketplaceConfigPrototype(store);
  MainBasePrototype(store);
  MainBaseIronL1UpgradePrototype(store);
  MainBaseCopperL1UpgradePrototype(store);
  MainBaseIronPlateL1UpgradePrototype(store);
  MainBaseR_EncryptionL1UpgradePrototype(store);
  MainBaseR_HPL1UpgradePrototype(store);
  MainBaseIronL2UpgradePrototype(store);
  MainBaseCopperL2UpgradePrototype(store);
  MainBaseIronPlateL2UpgradePrototype(store);
  MainBaseLithiumL2UpgradePrototype(store);
  MainBasePVCellL2UpgradePrototype(store);
  MainBaseAlloyL2UpgradePrototype(store);
  MainBaseR_EncryptionL2UpgradePrototype(store);
  MainBaseR_HPL2UpgradePrototype(store);
  MainBaseIronL3UpgradePrototype(store);
  MainBaseCopperL3UpgradePrototype(store);
  MainBaseIronPlateL3UpgradePrototype(store);
  MainBaseLithiumL3UpgradePrototype(store);
  MainBasePVCellL3UpgradePrototype(store);
  MainBaseAlloyL3UpgradePrototype(store);
  MainBaseTitaniumL3UpgradePrototype(store);
  MainBasePlatinumL3UpgradePrototype(store);
  MainBaseIridiumL3UpgradePrototype(store);
  MainBaseKimberliteL3UpgradePrototype(store);
  MainBaseR_EncryptionL3UpgradePrototype(store);
  MainBaseR_HPL3UpgradePrototype(store);
  MainBaseIronL4UpgradePrototype(store);
  MainBaseCopperL4UpgradePrototype(store);
  MainBaseLithiumL4UpgradePrototype(store);
  MainBaseIronPlateL4UpgradePrototype(store);
  MainBasePVCellL4UpgradePrototype(store);
  MainBaseAlloyL4UpgradePrototype(store);
  MainBaseTitaniumL4UpgradePrototype(store);
  MainBasePlatinumL4UpgradePrototype(store);
  MainBaseIridiumL4UpgradePrototype(store);
  MainBaseKimberliteL4UpgradePrototype(store);
  MainBaseR_EncryptionL4UpgradePrototype(store);
  MainBaseR_HPL4UpgradePrototype(store);
  MainBaseIronL5UpgradePrototype(store);
  MainBaseCopperL5UpgradePrototype(store);
  MainBaseIronPlateL5UpgradePrototype(store);
  MainBaseLithiumL5UpgradePrototype(store);
  MainBasePVCellL5UpgradePrototype(store);
  MainBaseAlloyL5UpgradePrototype(store);
  MainBaseTitaniumL5UpgradePrototype(store);
  MainBasePlatinumL5UpgradePrototype(store);
  MainBaseIridiumL5UpgradePrototype(store);
  MainBaseKimberliteL5UpgradePrototype(store);
  MainBaseR_EncryptionL5UpgradePrototype(store);
  MainBaseR_HPL5UpgradePrototype(store);
  MainBaseIronL6UpgradePrototype(store);
  MainBaseCopperL6UpgradePrototype(store);
  MainBaseIronPlateL6UpgradePrototype(store);
  MainBaseLithiumL6UpgradePrototype(store);
  MainBasePVCellL6UpgradePrototype(store);
  MainBaseAlloyL6UpgradePrototype(store);
  MainBaseTitaniumL6UpgradePrototype(store);
  MainBasePlatinumL6UpgradePrototype(store);
  MainBaseIridiumL6UpgradePrototype(store);
  MainBaseKimberliteL6UpgradePrototype(store);
  MainBaseR_EncryptionL6UpgradePrototype(store);
  MainBaseR_HPL6UpgradePrototype(store);
  MainBaseIronL7UpgradePrototype(store);
  MainBaseCopperL7UpgradePrototype(store);
  MainBaseIronPlateL7UpgradePrototype(store);
  MainBaseLithiumL7UpgradePrototype(store);
  MainBasePVCellL7UpgradePrototype(store);
  MainBaseAlloyL7UpgradePrototype(store);
  MainBaseTitaniumL7UpgradePrototype(store);
  MainBasePlatinumL7UpgradePrototype(store);
  MainBaseIridiumL7UpgradePrototype(store);
  MainBaseKimberliteL7UpgradePrototype(store);
  MainBaseR_EncryptionL7UpgradePrototype(store);
  MainBaseR_HPL7UpgradePrototype(store);
  MainBaseIronL8UpgradePrototype(store);
  MainBaseCopperL8UpgradePrototype(store);
  MainBaseIronPlateL8UpgradePrototype(store);
  MainBaseLithiumL8UpgradePrototype(store);
  MainBasePVCellL8UpgradePrototype(store);
  MainBaseAlloyL8UpgradePrototype(store);
  MainBaseTitaniumL8UpgradePrototype(store);
  MainBasePlatinumL8UpgradePrototype(store);
  MainBaseIridiumL8UpgradePrototype(store);
  MainBaseKimberliteL8UpgradePrototype(store);
  MainBaseR_EncryptionL8UpgradePrototype(store);
  MainBaseR_HPL8UpgradePrototype(store);
  IronMinePrototype(store);
  CopperMinePrototype(store);
  LithiumMinePrototype(store);
  IronPlateFactoryPrototype(store);
  AlloyFactoryPrototype(store);
  PVCellFactoryPrototype(store);
  StorageUnitPrototype(store);
  StorageUnitIronL1UpgradePrototype(store);
  StorageUnitCopperL1UpgradePrototype(store);
  StorageUnitLithiumL1UpgradePrototype(store);
  StorageUnitIronPlateL1UpgradePrototype(store);
  StorageUnitPVCellL1UpgradePrototype(store);
  StorageUnitAlloyL1UpgradePrototype(store);
  StorageUnitIronL2UpgradePrototype(store);
  StorageUnitCopperL2UpgradePrototype(store);
  StorageUnitLithiumL2UpgradePrototype(store);
  StorageUnitIronPlateL2UpgradePrototype(store);
  StorageUnitPVCellL2UpgradePrototype(store);
  StorageUnitAlloyL2UpgradePrototype(store);
  StorageUnitTitaniumL2UpgradePrototype(store);
  StorageUnitPlatinumL2UpgradePrototype(store);
  StorageUnitIridiumL2UpgradePrototype(store);
  StorageUnitKimberliteL2UpgradePrototype(store);
  StorageUnitIronL3UpgradePrototype(store);
  StorageUnitCopperL3UpgradePrototype(store);
  StorageUnitLithiumL3UpgradePrototype(store);
  StorageUnitIronPlateL3UpgradePrototype(store);
  StorageUnitPVCellL3UpgradePrototype(store);
  StorageUnitAlloyL3UpgradePrototype(store);
  StorageUnitTitaniumL3UpgradePrototype(store);
  StorageUnitPlatinumL3UpgradePrototype(store);
  StorageUnitIridiumL3UpgradePrototype(store);
  StorageUnitKimberliteL3UpgradePrototype(store);
  StorageUnitIronL4UpgradePrototype(store);
  StorageUnitCopperL4UpgradePrototype(store);
  StorageUnitLithiumL4UpgradePrototype(store);
  StorageUnitIronPlateL4UpgradePrototype(store);
  StorageUnitPVCellL4UpgradePrototype(store);
  StorageUnitAlloyL4UpgradePrototype(store);
  StorageUnitTitaniumL4UpgradePrototype(store);
  StorageUnitPlatinumL4UpgradePrototype(store);
  StorageUnitIridiumL4UpgradePrototype(store);
  StorageUnitKimberliteL4UpgradePrototype(store);
  SolarPanelPrototype(store);
  GaragePrototype(store);
  HangarPrototype(store);
  DroneFactoryPrototype(store);
  WorkshopPrototype(store);
  ShipyardPrototype(store);
  StarmapperPrototype(store);
  SAMPrototype(store);
  ShieldGeneratorPrototype(store);
  VaultPrototype(store);
  MarketPrototype(store);
  IsUtilityPrototype(store);
  RecoverablesPrototype(store);
  IsAdvancedResourcePrototype(store);
  UnitPrototype(store);
  FleetStancePrototype(store);
  OrderTypePrototype(store);
  LightningCraftPrototype(store);
  AnvilDronePrototype(store);
  AegisDronePrototype(store);
  HammerDronePrototype(store);
  StingerDronePrototype(store);
  CapitalShipPrototype(store);
  DroidPrototype(store);
  MinutemanMarinePrototype(store);
  TridentMarinePrototype(store);
  IronPrototype(store);
  CopperPrototype(store);
  LithiumPrototype(store);
  TitaniumPrototype(store);
  IridiumPrototype(store);
  KimberlitePrototype(store);
  PlatinumPrototype(store);
  IronPlatePrototype(store);
  PVCellPrototype(store);
  AlloyPrototype(store);
  RocketFuelPrototype(store);
  SmallPrototype(store);
  MediumPrototype(store);
  LargePrototype(store);
  ObjectivesPrototype(store);
  UpgradeMainBasePrototype(store);
  DefeatPirateBase1Prototype(store);
  DefeatPirateBase2Prototype(store);
  DefeatPirateBase3Prototype(store);
  DefeatPirateBase4Prototype(store);
  DefeatPirateBase5Prototype(store);
  DefeatPirateBase6Prototype(store);
  DefeatPirateBase7Prototype(store);
  DefeatPirateBase8Prototype(store);
  DefeatPirateBase9Prototype(store);
  DefeatPirateBase10Prototype(store);
  DefeatPirateBase11Prototype(store);
  DefeatPirateBase12Prototype(store);
  DefeatPirateBase13Prototype(store);
  DefeatPirateBase14Prototype(store);
  DefeatPirateBase15Prototype(store);
  DefeatPirateBase16Prototype(store);
  DefeatPirateBase17Prototype(store);
  BuildIronMinePrototype(store);
  BuildCopperMinePrototype(store);
  BuildLithiumMinePrototype(store);
  BuildIronPlateFactoryPrototype(store);
  BuildAlloyFactoryPrototype(store);
  BuildGaragePrototype(store);
  BuildWorkshopPrototype(store);
  BuildPVCellFactoryPrototype(store);
  BuildSolarPanelPrototype(store);
  BuildDroneFactoryPrototype(store);
  BuildHangarPrototype(store);
  BuildStarmapperPrototype(store);
  BuildSAMLauncherPrototype(store);
  BuildVaultPrototype(store);
  BuildShieldGeneratorPrototype(store);
  TrainMinutemanMarine1Prototype(store);
  TrainMinutemanMarine2Prototype(store);
  TrainMinutemanMarine3Prototype(store);
  TrainTridentMarine1Prototype(store);
  TrainTridentMarine2Prototype(store);
  TrainTridentMarine3Prototype(store);
  TrainAnvilDrone1Prototype(store);
  TrainAnvilDrone2Prototype(store);
  TrainAnvilDrone3Prototype(store);
  TrainHammerDrone1Prototype(store);
  TrainHammerDrone2Prototype(store);
  TrainHammerDrone3Prototype(store);
  TrainAegisDrone1Prototype(store);
  TrainAegisDrone2Prototype(store);
  TrainAegisDrone3Prototype(store);
  TrainStingerDrone1Prototype(store);
  TrainStingerDrone2Prototype(store);
  TrainStingerDrone3Prototype(store);
  MineTitanium1Prototype(store);
  MineTitanium2Prototype(store);
  MineTitanium3Prototype(store);
  MinePlatinum1Prototype(store);
  MinePlatinum2Prototype(store);
  MinePlatinum3Prototype(store);
  MineIridium1Prototype(store);
  MineIridium2Prototype(store);
  MineIridium3Prototype(store);
  MineKimberlite1Prototype(store);
  MineKimberlite2Prototype(store);
  MineKimberlite3Prototype(store);
  RaidRawResources1Prototype(store);
  RaidRawResources2Prototype(store);
  RaidRawResources3Prototype(store);
  RaidFactoryResources1Prototype(store);
  RaidFactoryResources2Prototype(store);
  RaidFactoryResources3Prototype(store);
  DestroyEnemyUnits1Prototype(store);
  DestroyEnemyUnits2Prototype(store);
  DestroyEnemyUnits3Prototype(store);
  DestroyEnemyUnits4Prototype(store);
  DestroyEnemyUnits5Prototype(store);
  ExpandBase1Prototype(store);
  ExpandBase2Prototype(store);
  ExpandBase3Prototype(store);
  ExpandBase4Prototype(store);
  ExpandBase5Prototype(store);
  ExpandBase6Prototype(store);
}

bytes32 constant WorldPrototypeId = "World";

function WorldKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](0);

  return _keyTuple;
}

function WorldPrototype(IStore store) {
  bytes32[] memory keys = WorldKeys();
  ResourceId[] memory tableIds = new ResourceId[](7);
  bytes[] memory staticData = new bytes[](7);
  PackedCounter[] memory encodedLengths = new PackedCounter[](7);
  bytes[] memory dynamicData = new bytes[](7);

  tableIds[0] = P_AllianceConfigTableId;
  tableIds[1] = P_GracePeriodTableId;
  tableIds[2] = P_AsteroidTableId;
  tableIds[3] = P_GameConfigTableId;
  tableIds[4] = P_CapitalShipConfigTableId;
  tableIds[5] = P_UnitPrototypesTableId;
  tableIds[6] = P_TransportablesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_AllianceConfig.encode(20);
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_GracePeriod.encode(43200, 1800);
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Asteroid.encode(37, 25);
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_GameConfig.encode(
    address(0x3000000000000000000000000000000000000000),
    100,
    10,
    100,
    10,
    6,
    4,
    10
  );
  (staticData[4], encodedLengths[4], dynamicData[4]) = P_CapitalShipConfig.encode(1, 10000000000000000000);
  bytes32[] memory p_unitprototypes_value = new bytes32[](9);
  p_unitprototypes_value[0] = 0x416567697344726f6e6500000000000000000000000000000000000000000000;
  p_unitprototypes_value[1] = 0x416e76696c44726f6e6500000000000000000000000000000000000000000000;
  p_unitprototypes_value[2] = 0x5374696e67657244726f6e650000000000000000000000000000000000000000;
  p_unitprototypes_value[3] = 0x48616d6d657244726f6e65000000000000000000000000000000000000000000;
  p_unitprototypes_value[4] = 0x4d696e7574656d616e4d6172696e650000000000000000000000000000000000;
  p_unitprototypes_value[5] = 0x54726964656e744d6172696e6500000000000000000000000000000000000000;
  p_unitprototypes_value[6] = 0x4c696768746e696e674372616674000000000000000000000000000000000000;
  p_unitprototypes_value[7] = 0x4361706974616c53686970000000000000000000000000000000000000000000;
  p_unitprototypes_value[8] = 0x44726f6964000000000000000000000000000000000000000000000000000000;
  (staticData[5], encodedLengths[5], dynamicData[5]) = P_UnitPrototypes.encode(p_unitprototypes_value);
  uint8[] memory p_transportables_value = new uint8[](10);
  p_transportables_value[0] = 1;
  p_transportables_value[1] = 2;
  p_transportables_value[2] = 3;
  p_transportables_value[3] = 8;
  p_transportables_value[4] = 10;
  p_transportables_value[5] = 9;
  p_transportables_value[6] = 4;
  p_transportables_value[7] = 7;
  p_transportables_value[8] = 5;
  p_transportables_value[9] = 6;
  (staticData[6], encodedLengths[6], dynamicData[6]) = P_Transportables.encode(p_transportables_value);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant BuildingPrototypeId = "Building";

function BuildingKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = BuildingPrototypeId;
  return _keyTuple;
}

function BuildingLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = BuildingPrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function BuildingPrototype(IStore store) {
  bytes32[] memory keys = BuildingKeys();
  ResourceId[] memory tableIds = new ResourceId[](0);
  bytes[] memory staticData = new bytes[](0);
  PackedCounter[] memory encodedLengths = new PackedCounter[](0);
  bytes[] memory dynamicData = new bytes[](0);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createBuildingLevel0(store);
  createBuildingLevel1(store);
  createBuildingLevel2(store);
  createBuildingLevel3(store);
  createBuildingLevel4(store);
  createBuildingLevel5(store);
  createBuildingLevel6(store);
  createBuildingLevel7(store);
  createBuildingLevel8(store);
  createBuildingLevel9(store);
  createBuildingLevel10(store);
  createBuildingLevel11(store);
  createBuildingLevel12(store);
  createBuildingLevel13(store);
  createBuildingLevel14(store);
  createBuildingLevel15(store);
  createBuildingLevel16(store);
  createBuildingLevel17(store);
  createBuildingLevel18(store);
  createBuildingLevel19(store);
  createBuildingLevel20(store);
  createBuildingLevel21(store);
}

/* ----------------------------- LEVEL 0 ----------------------------- */
function createBuildingLevel0(IStore store) {
  bytes32[] memory levelKeys = BuildingLevelKeys(0);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4e554c4c00000000000000000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createBuildingLevel1(IStore store) {
  bytes32[] memory levelKeys = BuildingLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4d61696e42617365000000000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 2 ----------------------------- */
function createBuildingLevel2(IStore store) {
  bytes32[] memory levelKeys = BuildingLevelKeys(2);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4c69746869756d4d696e65000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 3 ----------------------------- */
function createBuildingLevel3(IStore store) {
  bytes32[] memory levelKeys = BuildingLevelKeys(3);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x49726f6e4d696e65000000000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 4 ----------------------------- */
function createBuildingLevel4(IStore store) {
  bytes32[] memory levelKeys = BuildingLevelKeys(4);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x436f707065724d696e6500000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 5 ----------------------------- */
function createBuildingLevel5(IStore store) {
  bytes32[] memory levelKeys = BuildingLevelKeys(5);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x49726f6e506c617465466163746f727900000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 6 ----------------------------- */
function createBuildingLevel6(IStore store) {
  bytes32[] memory levelKeys = BuildingLevelKeys(6);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x416c6c6f79466163746f72790000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 7 ----------------------------- */
function createBuildingLevel7(IStore store) {
  bytes32[] memory levelKeys = BuildingLevelKeys(7);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x505643656c6c466163746f727900000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 8 ----------------------------- */
function createBuildingLevel8(IStore store) {
  bytes32[] memory levelKeys = BuildingLevelKeys(8);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x526f636b65744675656c466163746f7279000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 9 ----------------------------- */
function createBuildingLevel9(IStore store) {
  bytes32[] memory levelKeys = BuildingLevelKeys(9);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x536f6c617250616e656c00000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 10 ----------------------------- */
function createBuildingLevel10(IStore store) {
  bytes32[] memory levelKeys = BuildingLevelKeys(10);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x48616e6761720000000000000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 11 ----------------------------- */
function createBuildingLevel11(IStore store) {
  bytes32[] memory levelKeys = BuildingLevelKeys(11);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4761726167650000000000000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 12 ----------------------------- */
function createBuildingLevel12(IStore store) {
  bytes32[] memory levelKeys = BuildingLevelKeys(12);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x53746f72616765556e6974000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 13 ----------------------------- */
function createBuildingLevel13(IStore store) {
  bytes32[] memory levelKeys = BuildingLevelKeys(13);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x576f726b73686f70000000000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 14 ----------------------------- */
function createBuildingLevel14(IStore store) {
  bytes32[] memory levelKeys = BuildingLevelKeys(14);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x44726f6e65466163746f72790000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 15 ----------------------------- */
function createBuildingLevel15(IStore store) {
  bytes32[] memory levelKeys = BuildingLevelKeys(15);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x537461726d617070657200000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 16 ----------------------------- */
function createBuildingLevel16(IStore store) {
  bytes32[] memory levelKeys = BuildingLevelKeys(16);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x53414d0000000000000000000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 17 ----------------------------- */
function createBuildingLevel17(IStore store) {
  bytes32[] memory levelKeys = BuildingLevelKeys(17);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x536869656c6447656e657261746f720000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 18 ----------------------------- */
function createBuildingLevel18(IStore store) {
  bytes32[] memory levelKeys = BuildingLevelKeys(18);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x5661756c74000000000000000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 19 ----------------------------- */
function createBuildingLevel19(IStore store) {
  bytes32[] memory levelKeys = BuildingLevelKeys(19);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4d61726b65740000000000000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 20 ----------------------------- */
function createBuildingLevel20(IStore store) {
  bytes32[] memory levelKeys = BuildingLevelKeys(20);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x5368697079617264000000000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 21 ----------------------------- */
function createBuildingLevel21(IStore store) {
  bytes32[] memory levelKeys = BuildingLevelKeys(21);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4c454e4754480000000000000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant ExpansionPrototypeId = "Expansion";

function ExpansionKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = ExpansionPrototypeId;
  return _keyTuple;
}

function ExpansionLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = ExpansionPrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function ExpansionPrototype(IStore store) {
  bytes32[] memory keys = ExpansionKeys();
  ResourceId[] memory tableIds = new ResourceId[](0);
  bytes[] memory staticData = new bytes[](0);
  PackedCounter[] memory encodedLengths = new PackedCounter[](0);
  bytes[] memory dynamicData = new bytes[](0);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createExpansionLevel1(store);
  createExpansionLevel2(store);
  createExpansionLevel3(store);
  createExpansionLevel4(store);
  createExpansionLevel5(store);
  createExpansionLevel6(store);
  createExpansionLevel7(store);
  createExpansionLevel8(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createExpansionLevel1(IStore store) {
  bytes32[] memory levelKeys = ExpansionLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = DimensionsTableId;
  tableIds[1] = P_RequiredBaseLevelTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = Dimensions.encode(11, 9);
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredBaseLevel.encode(1);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 2 ----------------------------- */
function createExpansionLevel2(IStore store) {
  bytes32[] memory levelKeys = ExpansionLevelKeys(2);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredUpgradeResourcesTableId;
  tableIds[1] = DimensionsTableId;
  tableIds[2] = P_RequiredBaseLevelTableId;

  uint8[] memory p_requiredupgraderesources_resources_level_2 = new uint8[](1);
  p_requiredupgraderesources_resources_level_2[0] = 1;
  uint256[] memory p_requiredupgraderesources_amounts_level_2 = new uint256[](1);
  p_requiredupgraderesources_amounts_level_2[0] = 2000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredUpgradeResources.encode(
    p_requiredupgraderesources_resources_level_2,
    p_requiredupgraderesources_amounts_level_2
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = Dimensions.encode(13, 11);
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredBaseLevel.encode(2);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 3 ----------------------------- */
function createExpansionLevel3(IStore store) {
  bytes32[] memory levelKeys = ExpansionLevelKeys(3);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredUpgradeResourcesTableId;
  tableIds[1] = DimensionsTableId;
  tableIds[2] = P_RequiredBaseLevelTableId;

  uint8[] memory p_requiredupgraderesources_resources_level_3 = new uint8[](1);
  p_requiredupgraderesources_resources_level_3[0] = 3;
  uint256[] memory p_requiredupgraderesources_amounts_level_3 = new uint256[](1);
  p_requiredupgraderesources_amounts_level_3[0] = 1500000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredUpgradeResources.encode(
    p_requiredupgraderesources_resources_level_3,
    p_requiredupgraderesources_amounts_level_3
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = Dimensions.encode(17, 13);
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredBaseLevel.encode(2);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 4 ----------------------------- */
function createExpansionLevel4(IStore store) {
  bytes32[] memory levelKeys = ExpansionLevelKeys(4);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredUpgradeResourcesTableId;
  tableIds[1] = DimensionsTableId;
  tableIds[2] = P_RequiredBaseLevelTableId;

  uint8[] memory p_requiredupgraderesources_resources_level_4 = new uint8[](1);
  p_requiredupgraderesources_resources_level_4[0] = 3;
  uint256[] memory p_requiredupgraderesources_amounts_level_4 = new uint256[](1);
  p_requiredupgraderesources_amounts_level_4[0] = 15000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredUpgradeResources.encode(
    p_requiredupgraderesources_resources_level_4,
    p_requiredupgraderesources_amounts_level_4
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = Dimensions.encode(21, 15);
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredBaseLevel.encode(3);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 5 ----------------------------- */
function createExpansionLevel5(IStore store) {
  bytes32[] memory levelKeys = ExpansionLevelKeys(5);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredUpgradeResourcesTableId;
  tableIds[1] = DimensionsTableId;
  tableIds[2] = P_RequiredBaseLevelTableId;

  uint8[] memory p_requiredupgraderesources_resources_level_5 = new uint8[](2);
  p_requiredupgraderesources_resources_level_5[0] = 3;
  p_requiredupgraderesources_resources_level_5[1] = 6;
  uint256[] memory p_requiredupgraderesources_amounts_level_5 = new uint256[](2);
  p_requiredupgraderesources_amounts_level_5[0] = 5000000000000000000000;
  p_requiredupgraderesources_amounts_level_5[1] = 1500000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredUpgradeResources.encode(
    p_requiredupgraderesources_resources_level_5,
    p_requiredupgraderesources_amounts_level_5
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = Dimensions.encode(25, 17);
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredBaseLevel.encode(4);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 6 ----------------------------- */
function createExpansionLevel6(IStore store) {
  bytes32[] memory levelKeys = ExpansionLevelKeys(6);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredUpgradeResourcesTableId;
  tableIds[1] = DimensionsTableId;
  tableIds[2] = P_RequiredBaseLevelTableId;

  uint8[] memory p_requiredupgraderesources_resources_level_6 = new uint8[](2);
  p_requiredupgraderesources_resources_level_6[0] = 3;
  p_requiredupgraderesources_resources_level_6[1] = 6;
  uint256[] memory p_requiredupgraderesources_amounts_level_6 = new uint256[](2);
  p_requiredupgraderesources_amounts_level_6[0] = 15000000000000000000000;
  p_requiredupgraderesources_amounts_level_6[1] = 5000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredUpgradeResources.encode(
    p_requiredupgraderesources_resources_level_6,
    p_requiredupgraderesources_amounts_level_6
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = Dimensions.encode(29, 19);
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredBaseLevel.encode(5);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 7 ----------------------------- */
function createExpansionLevel7(IStore store) {
  bytes32[] memory levelKeys = ExpansionLevelKeys(7);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredUpgradeResourcesTableId;
  tableIds[1] = DimensionsTableId;
  tableIds[2] = P_RequiredBaseLevelTableId;

  uint8[] memory p_requiredupgraderesources_resources_level_7 = new uint8[](2);
  p_requiredupgraderesources_resources_level_7[0] = 3;
  p_requiredupgraderesources_resources_level_7[1] = 6;
  uint256[] memory p_requiredupgraderesources_amounts_level_7 = new uint256[](2);
  p_requiredupgraderesources_amounts_level_7[0] = 24999999999999997902848;
  p_requiredupgraderesources_amounts_level_7[1] = 10000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredUpgradeResources.encode(
    p_requiredupgraderesources_resources_level_7,
    p_requiredupgraderesources_amounts_level_7
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = Dimensions.encode(33, 23);
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredBaseLevel.encode(6);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 8 ----------------------------- */
function createExpansionLevel8(IStore store) {
  bytes32[] memory levelKeys = ExpansionLevelKeys(8);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredUpgradeResourcesTableId;
  tableIds[1] = DimensionsTableId;
  tableIds[2] = P_RequiredBaseLevelTableId;

  uint8[] memory p_requiredupgraderesources_resources_level_8 = new uint8[](2);
  p_requiredupgraderesources_resources_level_8[0] = 3;
  p_requiredupgraderesources_resources_level_8[1] = 6;
  uint256[] memory p_requiredupgraderesources_amounts_level_8 = new uint256[](2);
  p_requiredupgraderesources_amounts_level_8[0] = 49999999999999995805696;
  p_requiredupgraderesources_amounts_level_8[1] = 15000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredUpgradeResources.encode(
    p_requiredupgraderesources_resources_level_8,
    p_requiredupgraderesources_amounts_level_8
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = Dimensions.encode(37, 25);
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredBaseLevel.encode(7);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant IronSupplyPrototypeId = "IronSupply";

function IronSupplyKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);
  _keyTuple[0] = bytes32(uint256(1));
  _keyTuple[1] = bytes32(uint256(6));
  return _keyTuple;
}

function IronSupplyPrototype(IStore store) {
  bytes32[] memory keys = IronSupplyKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = ReservesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = Reserves.encode(
    100000000000000005366162204393472,
    10000000000000000905969664
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant CopperSupplyPrototypeId = "CopperSupply";

function CopperSupplyKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);
  _keyTuple[0] = bytes32(uint256(2));
  _keyTuple[1] = bytes32(uint256(6));
  return _keyTuple;
}

function CopperSupplyPrototype(IStore store) {
  bytes32[] memory keys = CopperSupplyKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = ReservesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = Reserves.encode(
    100000000000000005366162204393472,
    10000000000000000905969664
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant LithiumSupplyPrototypeId = "LithiumSupply";

function LithiumSupplyKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);
  _keyTuple[0] = bytes32(uint256(3));
  _keyTuple[1] = bytes32(uint256(6));
  return _keyTuple;
}

function LithiumSupplyPrototype(IStore store) {
  bytes32[] memory keys = LithiumSupplyKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = ReservesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = Reserves.encode(
    100000000000000005366162204393472,
    10000000000000000905969664
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant TitaniumSupplyPrototypeId = "TitaniumSupply";

function TitaniumSupplyKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);
  _keyTuple[0] = bytes32(uint256(4));
  _keyTuple[1] = bytes32(uint256(6));
  return _keyTuple;
}

function TitaniumSupplyPrototype(IStore store) {
  bytes32[] memory keys = TitaniumSupplyKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = ReservesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = Reserves.encode(
    10000000000000000905969664,
    10000000000000000905969664
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant PlatinumSupplyPrototypeId = "PlatinumSupply";

function PlatinumSupplyKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);
  _keyTuple[0] = bytes32(uint256(6));
  _keyTuple[1] = bytes32(uint256(7));
  return _keyTuple;
}

function PlatinumSupplyPrototype(IStore store) {
  bytes32[] memory keys = PlatinumSupplyKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = ReservesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = Reserves.encode(
    10000000000000000905969664,
    10000000000000000905969664
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant IridiumSupplyPrototypeId = "IridiumSupply";

function IridiumSupplyKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);
  _keyTuple[0] = bytes32(uint256(5));
  _keyTuple[1] = bytes32(uint256(6));
  return _keyTuple;
}

function IridiumSupplyPrototype(IStore store) {
  bytes32[] memory keys = IridiumSupplyKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = ReservesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = Reserves.encode(
    10000000000000000905969664,
    10000000000000000905969664
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant IronPlateSupplyPrototypeId = "IronPlateSupply";

function IronPlateSupplyKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);
  _keyTuple[0] = bytes32(uint256(6));
  _keyTuple[1] = bytes32(uint256(8));
  return _keyTuple;
}

function IronPlateSupplyPrototype(IStore store) {
  bytes32[] memory keys = IronPlateSupplyKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = ReservesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = Reserves.encode(
    10000000000000000905969664,
    100000000000000009025336901632
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant AlloySupplyPrototypeId = "AlloySupply";

function AlloySupplyKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);
  _keyTuple[0] = bytes32(uint256(6));
  _keyTuple[1] = bytes32(uint256(9));
  return _keyTuple;
}

function AlloySupplyPrototype(IStore store) {
  bytes32[] memory keys = AlloySupplyKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = ReservesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = Reserves.encode(
    10000000000000000905969664,
    100000000000000009025336901632
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant PVCellSupplyPrototypeId = "PVCellSupply";

function PVCellSupplyKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);
  _keyTuple[0] = bytes32(uint256(6));
  _keyTuple[1] = bytes32(uint256(10));
  return _keyTuple;
}

function PVCellSupplyPrototype(IStore store) {
  bytes32[] memory keys = PVCellSupplyKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = ReservesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = Reserves.encode(
    10000000000000000905969664,
    100000000000000009025336901632
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant RocketFuelSupplyPrototypeId = "RocketFuelSupply";

function RocketFuelSupplyKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);
  _keyTuple[0] = bytes32(uint256(6));
  _keyTuple[1] = bytes32(uint256(11));
  return _keyTuple;
}

function RocketFuelSupplyPrototype(IStore store) {
  bytes32[] memory keys = RocketFuelSupplyKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = ReservesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = Reserves.encode(
    10000000000000000905969664,
    100000000000000009025336901632
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MarketplaceConfigPrototypeId = "MarketplaceConfig";

function MarketplaceConfigKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](0);

  return _keyTuple;
}

function MarketplaceConfigPrototype(IStore store) {
  bytes32[] memory keys = MarketplaceConfigKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_MarketplaceConfigTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_MarketplaceConfig.encode(3, false);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBasePrototypeId = "MainBase";

function MainBaseKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = MainBasePrototypeId;
  return _keyTuple;
}

function MainBaseLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = MainBasePrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function MainBasePrototype(IStore store) {
  bytes32[] memory keys = MainBaseKeys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = PositionTableId;
  tableIds[1] = P_BlueprintTableId;
  tableIds[2] = P_MaxLevelTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = Position.encode(19, 13, 0x0);
  int32[] memory p_blueprint_value = new int32[](18);
  p_blueprint_value[0] = 0;
  p_blueprint_value[1] = 0;
  p_blueprint_value[2] = 0;
  p_blueprint_value[3] = -1;
  p_blueprint_value[4] = 0;
  p_blueprint_value[5] = -2;
  p_blueprint_value[6] = -1;
  p_blueprint_value[7] = 0;
  p_blueprint_value[8] = -1;
  p_blueprint_value[9] = -1;
  p_blueprint_value[10] = -1;
  p_blueprint_value[11] = -2;
  p_blueprint_value[12] = -2;
  p_blueprint_value[13] = 0;
  p_blueprint_value[14] = -2;
  p_blueprint_value[15] = -1;
  p_blueprint_value[16] = -2;
  p_blueprint_value[17] = -2;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_Blueprint.encode(p_blueprint_value);
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_MaxLevel.encode(8);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createMainBaseLevel1(store);
  createMainBaseLevel2(store);
  createMainBaseLevel3(store);
  createMainBaseLevel4(store);
  createMainBaseLevel5(store);
  createMainBaseLevel6(store);
  createMainBaseLevel7(store);
  createMainBaseLevel8(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createMainBaseLevel1(IStore store) {
  bytes32[] memory levelKeys = MainBaseLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_ListMaxResourceUpgradesTableId;
  tableIds[1] = P_ProductionTableId;

  uint8[] memory p_listmaxresourceupgrades_value_level_1 = new uint8[](5);
  p_listmaxresourceupgrades_value_level_1[0] = 1;
  p_listmaxresourceupgrades_value_level_1[1] = 2;
  p_listmaxresourceupgrades_value_level_1[2] = 8;
  p_listmaxresourceupgrades_value_level_1[3] = 20;
  p_listmaxresourceupgrades_value_level_1[4] = 19;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ListMaxResourceUpgrades.encode(
    p_listmaxresourceupgrades_value_level_1
  );
  uint8[] memory p_production_resources_level_1 = new uint8[](3);
  p_production_resources_level_1[0] = 15;
  p_production_resources_level_1[1] = 20;
  p_production_resources_level_1[2] = 19;
  uint256[] memory p_production_amounts_level_1 = new uint256[](3);
  p_production_amounts_level_1[0] = 1;
  p_production_amounts_level_1[1] = 1000000000000000;
  p_production_amounts_level_1[2] = 1000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_Production.encode(
    p_production_resources_level_1,
    p_production_amounts_level_1
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 2 ----------------------------- */
function createMainBaseLevel2(IStore store) {
  bytes32[] memory levelKeys = MainBaseLevelKeys(2);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredResourcesTableId;
  tableIds[1] = P_ListMaxResourceUpgradesTableId;
  tableIds[2] = P_ProductionTableId;

  uint8[] memory p_requiredresources_resources_level_2 = new uint8[](1);
  p_requiredresources_resources_level_2[0] = 2;
  uint256[] memory p_requiredresources_amounts_level_2 = new uint256[](1);
  p_requiredresources_amounts_level_2[0] = 1500000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_2,
    p_requiredresources_amounts_level_2
  );
  uint8[] memory p_listmaxresourceupgrades_value_level_2 = new uint8[](8);
  p_listmaxresourceupgrades_value_level_2[0] = 1;
  p_listmaxresourceupgrades_value_level_2[1] = 2;
  p_listmaxresourceupgrades_value_level_2[2] = 8;
  p_listmaxresourceupgrades_value_level_2[3] = 3;
  p_listmaxresourceupgrades_value_level_2[4] = 10;
  p_listmaxresourceupgrades_value_level_2[5] = 9;
  p_listmaxresourceupgrades_value_level_2[6] = 20;
  p_listmaxresourceupgrades_value_level_2[7] = 19;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_ListMaxResourceUpgrades.encode(
    p_listmaxresourceupgrades_value_level_2
  );
  uint8[] memory p_production_resources_level_2 = new uint8[](3);
  p_production_resources_level_2[0] = 15;
  p_production_resources_level_2[1] = 20;
  p_production_resources_level_2[2] = 19;
  uint256[] memory p_production_amounts_level_2 = new uint256[](3);
  p_production_amounts_level_2[0] = 1;
  p_production_amounts_level_2[1] = 1000000000000000;
  p_production_amounts_level_2[2] = 1000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_2,
    p_production_amounts_level_2
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 3 ----------------------------- */
function createMainBaseLevel3(IStore store) {
  bytes32[] memory levelKeys = MainBaseLevelKeys(3);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredResourcesTableId;
  tableIds[1] = P_ListMaxResourceUpgradesTableId;
  tableIds[2] = P_ProductionTableId;

  uint8[] memory p_requiredresources_resources_level_3 = new uint8[](2);
  p_requiredresources_resources_level_3[0] = 2;
  p_requiredresources_resources_level_3[1] = 10;
  uint256[] memory p_requiredresources_amounts_level_3 = new uint256[](2);
  p_requiredresources_amounts_level_3[0] = 10000000000000000000000;
  p_requiredresources_amounts_level_3[1] = 1500000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_3,
    p_requiredresources_amounts_level_3
  );
  uint8[] memory p_listmaxresourceupgrades_value_level_3 = new uint8[](12);
  p_listmaxresourceupgrades_value_level_3[0] = 1;
  p_listmaxresourceupgrades_value_level_3[1] = 2;
  p_listmaxresourceupgrades_value_level_3[2] = 8;
  p_listmaxresourceupgrades_value_level_3[3] = 3;
  p_listmaxresourceupgrades_value_level_3[4] = 10;
  p_listmaxresourceupgrades_value_level_3[5] = 9;
  p_listmaxresourceupgrades_value_level_3[6] = 4;
  p_listmaxresourceupgrades_value_level_3[7] = 7;
  p_listmaxresourceupgrades_value_level_3[8] = 5;
  p_listmaxresourceupgrades_value_level_3[9] = 6;
  p_listmaxresourceupgrades_value_level_3[10] = 20;
  p_listmaxresourceupgrades_value_level_3[11] = 19;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_ListMaxResourceUpgrades.encode(
    p_listmaxresourceupgrades_value_level_3
  );
  uint8[] memory p_production_resources_level_3 = new uint8[](3);
  p_production_resources_level_3[0] = 15;
  p_production_resources_level_3[1] = 20;
  p_production_resources_level_3[2] = 19;
  uint256[] memory p_production_amounts_level_3 = new uint256[](3);
  p_production_amounts_level_3[0] = 1;
  p_production_amounts_level_3[1] = 1000000000000000;
  p_production_amounts_level_3[2] = 1000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_3,
    p_production_amounts_level_3
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 4 ----------------------------- */
function createMainBaseLevel4(IStore store) {
  bytes32[] memory levelKeys = MainBaseLevelKeys(4);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredResourcesTableId;
  tableIds[1] = P_ListMaxResourceUpgradesTableId;
  tableIds[2] = P_ProductionTableId;

  uint8[] memory p_requiredresources_resources_level_4 = new uint8[](2);
  p_requiredresources_resources_level_4[0] = 2;
  p_requiredresources_resources_level_4[1] = 10;
  uint256[] memory p_requiredresources_amounts_level_4 = new uint256[](2);
  p_requiredresources_amounts_level_4[0] = 24999999999999997902848;
  p_requiredresources_amounts_level_4[1] = 5000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_4,
    p_requiredresources_amounts_level_4
  );
  uint8[] memory p_listmaxresourceupgrades_value_level_4 = new uint8[](12);
  p_listmaxresourceupgrades_value_level_4[0] = 1;
  p_listmaxresourceupgrades_value_level_4[1] = 2;
  p_listmaxresourceupgrades_value_level_4[2] = 3;
  p_listmaxresourceupgrades_value_level_4[3] = 8;
  p_listmaxresourceupgrades_value_level_4[4] = 10;
  p_listmaxresourceupgrades_value_level_4[5] = 9;
  p_listmaxresourceupgrades_value_level_4[6] = 4;
  p_listmaxresourceupgrades_value_level_4[7] = 7;
  p_listmaxresourceupgrades_value_level_4[8] = 5;
  p_listmaxresourceupgrades_value_level_4[9] = 6;
  p_listmaxresourceupgrades_value_level_4[10] = 20;
  p_listmaxresourceupgrades_value_level_4[11] = 19;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_ListMaxResourceUpgrades.encode(
    p_listmaxresourceupgrades_value_level_4
  );
  uint8[] memory p_production_resources_level_4 = new uint8[](3);
  p_production_resources_level_4[0] = 15;
  p_production_resources_level_4[1] = 20;
  p_production_resources_level_4[2] = 19;
  uint256[] memory p_production_amounts_level_4 = new uint256[](3);
  p_production_amounts_level_4[0] = 1;
  p_production_amounts_level_4[1] = 1000000000000000;
  p_production_amounts_level_4[2] = 1000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_4,
    p_production_amounts_level_4
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 5 ----------------------------- */
function createMainBaseLevel5(IStore store) {
  bytes32[] memory levelKeys = MainBaseLevelKeys(5);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredResourcesTableId;
  tableIds[1] = P_ListMaxResourceUpgradesTableId;
  tableIds[2] = P_ProductionTableId;

  uint8[] memory p_requiredresources_resources_level_5 = new uint8[](2);
  p_requiredresources_resources_level_5[0] = 2;
  p_requiredresources_resources_level_5[1] = 10;
  uint256[] memory p_requiredresources_amounts_level_5 = new uint256[](2);
  p_requiredresources_amounts_level_5[0] = 75000000000000002097152;
  p_requiredresources_amounts_level_5[1] = 500000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_5,
    p_requiredresources_amounts_level_5
  );
  uint8[] memory p_listmaxresourceupgrades_value_level_5 = new uint8[](12);
  p_listmaxresourceupgrades_value_level_5[0] = 1;
  p_listmaxresourceupgrades_value_level_5[1] = 2;
  p_listmaxresourceupgrades_value_level_5[2] = 8;
  p_listmaxresourceupgrades_value_level_5[3] = 3;
  p_listmaxresourceupgrades_value_level_5[4] = 10;
  p_listmaxresourceupgrades_value_level_5[5] = 9;
  p_listmaxresourceupgrades_value_level_5[6] = 4;
  p_listmaxresourceupgrades_value_level_5[7] = 7;
  p_listmaxresourceupgrades_value_level_5[8] = 5;
  p_listmaxresourceupgrades_value_level_5[9] = 6;
  p_listmaxresourceupgrades_value_level_5[10] = 20;
  p_listmaxresourceupgrades_value_level_5[11] = 19;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_ListMaxResourceUpgrades.encode(
    p_listmaxresourceupgrades_value_level_5
  );
  uint8[] memory p_production_resources_level_5 = new uint8[](3);
  p_production_resources_level_5[0] = 15;
  p_production_resources_level_5[1] = 20;
  p_production_resources_level_5[2] = 19;
  uint256[] memory p_production_amounts_level_5 = new uint256[](3);
  p_production_amounts_level_5[0] = 1;
  p_production_amounts_level_5[1] = 1000000000000000;
  p_production_amounts_level_5[2] = 1000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_5,
    p_production_amounts_level_5
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 6 ----------------------------- */
function createMainBaseLevel6(IStore store) {
  bytes32[] memory levelKeys = MainBaseLevelKeys(6);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredResourcesTableId;
  tableIds[1] = P_ListMaxResourceUpgradesTableId;
  tableIds[2] = P_ProductionTableId;

  uint8[] memory p_requiredresources_resources_level_6 = new uint8[](3);
  p_requiredresources_resources_level_6[0] = 2;
  p_requiredresources_resources_level_6[1] = 4;
  p_requiredresources_resources_level_6[2] = 7;
  uint256[] memory p_requiredresources_amounts_level_6 = new uint256[](3);
  p_requiredresources_amounts_level_6[0] = 124999999999999997902848;
  p_requiredresources_amounts_level_6[1] = 1500000000000000000000;
  p_requiredresources_amounts_level_6[2] = 1500000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_6,
    p_requiredresources_amounts_level_6
  );
  uint8[] memory p_listmaxresourceupgrades_value_level_6 = new uint8[](12);
  p_listmaxresourceupgrades_value_level_6[0] = 1;
  p_listmaxresourceupgrades_value_level_6[1] = 2;
  p_listmaxresourceupgrades_value_level_6[2] = 8;
  p_listmaxresourceupgrades_value_level_6[3] = 3;
  p_listmaxresourceupgrades_value_level_6[4] = 10;
  p_listmaxresourceupgrades_value_level_6[5] = 9;
  p_listmaxresourceupgrades_value_level_6[6] = 4;
  p_listmaxresourceupgrades_value_level_6[7] = 7;
  p_listmaxresourceupgrades_value_level_6[8] = 5;
  p_listmaxresourceupgrades_value_level_6[9] = 6;
  p_listmaxresourceupgrades_value_level_6[10] = 20;
  p_listmaxresourceupgrades_value_level_6[11] = 19;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_ListMaxResourceUpgrades.encode(
    p_listmaxresourceupgrades_value_level_6
  );
  uint8[] memory p_production_resources_level_6 = new uint8[](3);
  p_production_resources_level_6[0] = 15;
  p_production_resources_level_6[1] = 20;
  p_production_resources_level_6[2] = 19;
  uint256[] memory p_production_amounts_level_6 = new uint256[](3);
  p_production_amounts_level_6[0] = 1;
  p_production_amounts_level_6[1] = 1000000000000000;
  p_production_amounts_level_6[2] = 1000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_6,
    p_production_amounts_level_6
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 7 ----------------------------- */
function createMainBaseLevel7(IStore store) {
  bytes32[] memory levelKeys = MainBaseLevelKeys(7);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredResourcesTableId;
  tableIds[1] = P_ListMaxResourceUpgradesTableId;
  tableIds[2] = P_ProductionTableId;

  uint8[] memory p_requiredresources_resources_level_7 = new uint8[](4);
  p_requiredresources_resources_level_7[0] = 2;
  p_requiredresources_resources_level_7[1] = 4;
  p_requiredresources_resources_level_7[2] = 7;
  p_requiredresources_resources_level_7[3] = 5;
  uint256[] memory p_requiredresources_amounts_level_7 = new uint256[](4);
  p_requiredresources_amounts_level_7[0] = 249999999999999995805696;
  p_requiredresources_amounts_level_7[1] = 5000000000000000000000;
  p_requiredresources_amounts_level_7[2] = 5000000000000000000000;
  p_requiredresources_amounts_level_7[3] = 5000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_7,
    p_requiredresources_amounts_level_7
  );
  uint8[] memory p_listmaxresourceupgrades_value_level_7 = new uint8[](12);
  p_listmaxresourceupgrades_value_level_7[0] = 1;
  p_listmaxresourceupgrades_value_level_7[1] = 2;
  p_listmaxresourceupgrades_value_level_7[2] = 8;
  p_listmaxresourceupgrades_value_level_7[3] = 3;
  p_listmaxresourceupgrades_value_level_7[4] = 10;
  p_listmaxresourceupgrades_value_level_7[5] = 9;
  p_listmaxresourceupgrades_value_level_7[6] = 4;
  p_listmaxresourceupgrades_value_level_7[7] = 7;
  p_listmaxresourceupgrades_value_level_7[8] = 5;
  p_listmaxresourceupgrades_value_level_7[9] = 6;
  p_listmaxresourceupgrades_value_level_7[10] = 20;
  p_listmaxresourceupgrades_value_level_7[11] = 19;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_ListMaxResourceUpgrades.encode(
    p_listmaxresourceupgrades_value_level_7
  );
  uint8[] memory p_production_resources_level_7 = new uint8[](3);
  p_production_resources_level_7[0] = 15;
  p_production_resources_level_7[1] = 20;
  p_production_resources_level_7[2] = 19;
  uint256[] memory p_production_amounts_level_7 = new uint256[](3);
  p_production_amounts_level_7[0] = 1;
  p_production_amounts_level_7[1] = 1000000000000000;
  p_production_amounts_level_7[2] = 1000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_7,
    p_production_amounts_level_7
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 8 ----------------------------- */
function createMainBaseLevel8(IStore store) {
  bytes32[] memory levelKeys = MainBaseLevelKeys(8);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredResourcesTableId;
  tableIds[1] = P_ListMaxResourceUpgradesTableId;
  tableIds[2] = P_ProductionTableId;

  uint8[] memory p_requiredresources_resources_level_8 = new uint8[](4);
  p_requiredresources_resources_level_8[0] = 2;
  p_requiredresources_resources_level_8[1] = 4;
  p_requiredresources_resources_level_8[2] = 7;
  p_requiredresources_resources_level_8[3] = 5;
  uint256[] memory p_requiredresources_amounts_level_8 = new uint256[](4);
  p_requiredresources_amounts_level_8[0] = 249999999999999995805696;
  p_requiredresources_amounts_level_8[1] = 15000000000000000000000;
  p_requiredresources_amounts_level_8[2] = 15000000000000000000000;
  p_requiredresources_amounts_level_8[3] = 15000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_8,
    p_requiredresources_amounts_level_8
  );
  uint8[] memory p_listmaxresourceupgrades_value_level_8 = new uint8[](12);
  p_listmaxresourceupgrades_value_level_8[0] = 1;
  p_listmaxresourceupgrades_value_level_8[1] = 2;
  p_listmaxresourceupgrades_value_level_8[2] = 8;
  p_listmaxresourceupgrades_value_level_8[3] = 3;
  p_listmaxresourceupgrades_value_level_8[4] = 10;
  p_listmaxresourceupgrades_value_level_8[5] = 9;
  p_listmaxresourceupgrades_value_level_8[6] = 4;
  p_listmaxresourceupgrades_value_level_8[7] = 7;
  p_listmaxresourceupgrades_value_level_8[8] = 5;
  p_listmaxresourceupgrades_value_level_8[9] = 6;
  p_listmaxresourceupgrades_value_level_8[10] = 20;
  p_listmaxresourceupgrades_value_level_8[11] = 19;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_ListMaxResourceUpgrades.encode(
    p_listmaxresourceupgrades_value_level_8
  );
  uint8[] memory p_production_resources_level_8 = new uint8[](3);
  p_production_resources_level_8[0] = 15;
  p_production_resources_level_8[1] = 20;
  p_production_resources_level_8[2] = 19;
  uint256[] memory p_production_amounts_level_8 = new uint256[](3);
  p_production_amounts_level_8[0] = 1;
  p_production_amounts_level_8[1] = 1000000000000000;
  p_production_amounts_level_8[2] = 1000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_8,
    p_production_amounts_level_8
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseIronL1UpgradePrototypeId = "MainBaseIronL1Upgrade";

function MainBaseIronL1UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(1));
  _keyTuple[2] = bytes32(uint256(1));
  return _keyTuple;
}

function MainBaseIronL1UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseIronL1UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(5000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseCopperL1UpgradePrototypeId = "MainBaseCopperL1Upgrade";

function MainBaseCopperL1UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(2));
  _keyTuple[2] = bytes32(uint256(1));
  return _keyTuple;
}

function MainBaseCopperL1UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseCopperL1UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(5000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseIronPlateL1UpgradePrototypeId = "MainBaseIronPlateL1Upgrade";

function MainBaseIronPlateL1UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(8));
  _keyTuple[2] = bytes32(uint256(1));
  return _keyTuple;
}

function MainBaseIronPlateL1UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseIronPlateL1UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(2500000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseR_EncryptionL1UpgradePrototypeId = "MainBaseR_EncryptionL1Upgrade";

function MainBaseR_EncryptionL1UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(20));
  _keyTuple[2] = bytes32(uint256(1));
  return _keyTuple;
}

function MainBaseR_EncryptionL1UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseR_EncryptionL1UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(50000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseR_HPL1UpgradePrototypeId = "MainBaseR_HPL1Upgrade";

function MainBaseR_HPL1UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(19));
  _keyTuple[2] = bytes32(uint256(1));
  return _keyTuple;
}

function MainBaseR_HPL1UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseR_HPL1UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(100000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseIronL2UpgradePrototypeId = "MainBaseIronL2Upgrade";

function MainBaseIronL2UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(1));
  _keyTuple[2] = bytes32(uint256(2));
  return _keyTuple;
}

function MainBaseIronL2UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseIronL2UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(10000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseCopperL2UpgradePrototypeId = "MainBaseCopperL2Upgrade";

function MainBaseCopperL2UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(2));
  _keyTuple[2] = bytes32(uint256(2));
  return _keyTuple;
}

function MainBaseCopperL2UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseCopperL2UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(10000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseIronPlateL2UpgradePrototypeId = "MainBaseIronPlateL2Upgrade";

function MainBaseIronPlateL2UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(8));
  _keyTuple[2] = bytes32(uint256(2));
  return _keyTuple;
}

function MainBaseIronPlateL2UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseIronPlateL2UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(5000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseLithiumL2UpgradePrototypeId = "MainBaseLithiumL2Upgrade";

function MainBaseLithiumL2UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(3));
  _keyTuple[2] = bytes32(uint256(2));
  return _keyTuple;
}

function MainBaseLithiumL2UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseLithiumL2UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(10000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBasePVCellL2UpgradePrototypeId = "MainBasePVCellL2Upgrade";

function MainBasePVCellL2UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(10));
  _keyTuple[2] = bytes32(uint256(2));
  return _keyTuple;
}

function MainBasePVCellL2UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBasePVCellL2UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(5000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseAlloyL2UpgradePrototypeId = "MainBaseAlloyL2Upgrade";

function MainBaseAlloyL2UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(9));
  _keyTuple[2] = bytes32(uint256(2));
  return _keyTuple;
}

function MainBaseAlloyL2UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseAlloyL2UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(5000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseR_EncryptionL2UpgradePrototypeId = "MainBaseR_EncryptionL2Upgrade";

function MainBaseR_EncryptionL2UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(20));
  _keyTuple[2] = bytes32(uint256(2));
  return _keyTuple;
}

function MainBaseR_EncryptionL2UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseR_EncryptionL2UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(100000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseR_HPL2UpgradePrototypeId = "MainBaseR_HPL2Upgrade";

function MainBaseR_HPL2UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(19));
  _keyTuple[2] = bytes32(uint256(2));
  return _keyTuple;
}

function MainBaseR_HPL2UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseR_HPL2UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(150000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseIronL3UpgradePrototypeId = "MainBaseIronL3Upgrade";

function MainBaseIronL3UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(1));
  _keyTuple[2] = bytes32(uint256(3));
  return _keyTuple;
}

function MainBaseIronL3UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseIronL3UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(24999999999999997902848);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseCopperL3UpgradePrototypeId = "MainBaseCopperL3Upgrade";

function MainBaseCopperL3UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(2));
  _keyTuple[2] = bytes32(uint256(3));
  return _keyTuple;
}

function MainBaseCopperL3UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseCopperL3UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(24999999999999997902848);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseIronPlateL3UpgradePrototypeId = "MainBaseIronPlateL3Upgrade";

function MainBaseIronPlateL3UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(8));
  _keyTuple[2] = bytes32(uint256(3));
  return _keyTuple;
}

function MainBaseIronPlateL3UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseIronPlateL3UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(15000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseLithiumL3UpgradePrototypeId = "MainBaseLithiumL3Upgrade";

function MainBaseLithiumL3UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(3));
  _keyTuple[2] = bytes32(uint256(3));
  return _keyTuple;
}

function MainBaseLithiumL3UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseLithiumL3UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(24999999999999997902848);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBasePVCellL3UpgradePrototypeId = "MainBasePVCellL3Upgrade";

function MainBasePVCellL3UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(10));
  _keyTuple[2] = bytes32(uint256(3));
  return _keyTuple;
}

function MainBasePVCellL3UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBasePVCellL3UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(15000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseAlloyL3UpgradePrototypeId = "MainBaseAlloyL3Upgrade";

function MainBaseAlloyL3UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(9));
  _keyTuple[2] = bytes32(uint256(3));
  return _keyTuple;
}

function MainBaseAlloyL3UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseAlloyL3UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(15000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseTitaniumL3UpgradePrototypeId = "MainBaseTitaniumL3Upgrade";

function MainBaseTitaniumL3UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(4));
  _keyTuple[2] = bytes32(uint256(3));
  return _keyTuple;
}

function MainBaseTitaniumL3UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseTitaniumL3UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(500000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBasePlatinumL3UpgradePrototypeId = "MainBasePlatinumL3Upgrade";

function MainBasePlatinumL3UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(7));
  _keyTuple[2] = bytes32(uint256(3));
  return _keyTuple;
}

function MainBasePlatinumL3UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBasePlatinumL3UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(500000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseIridiumL3UpgradePrototypeId = "MainBaseIridiumL3Upgrade";

function MainBaseIridiumL3UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(5));
  _keyTuple[2] = bytes32(uint256(3));
  return _keyTuple;
}

function MainBaseIridiumL3UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseIridiumL3UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(500000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseKimberliteL3UpgradePrototypeId = "MainBaseKimberliteL3Upgrade";

function MainBaseKimberliteL3UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(6));
  _keyTuple[2] = bytes32(uint256(3));
  return _keyTuple;
}

function MainBaseKimberliteL3UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseKimberliteL3UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(500000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseR_EncryptionL3UpgradePrototypeId = "MainBaseR_EncryptionL3Upgrade";

function MainBaseR_EncryptionL3UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(20));
  _keyTuple[2] = bytes32(uint256(3));
  return _keyTuple;
}

function MainBaseR_EncryptionL3UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseR_EncryptionL3UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(125000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseR_HPL3UpgradePrototypeId = "MainBaseR_HPL3Upgrade";

function MainBaseR_HPL3UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(19));
  _keyTuple[2] = bytes32(uint256(3));
  return _keyTuple;
}

function MainBaseR_HPL3UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseR_HPL3UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(200000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseIronL4UpgradePrototypeId = "MainBaseIronL4Upgrade";

function MainBaseIronL4UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(1));
  _keyTuple[2] = bytes32(uint256(4));
  return _keyTuple;
}

function MainBaseIronL4UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseIronL4UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(75000000000000002097152);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseCopperL4UpgradePrototypeId = "MainBaseCopperL4Upgrade";

function MainBaseCopperL4UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(2));
  _keyTuple[2] = bytes32(uint256(4));
  return _keyTuple;
}

function MainBaseCopperL4UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseCopperL4UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(75000000000000002097152);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseLithiumL4UpgradePrototypeId = "MainBaseLithiumL4Upgrade";

function MainBaseLithiumL4UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(3));
  _keyTuple[2] = bytes32(uint256(4));
  return _keyTuple;
}

function MainBaseLithiumL4UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseLithiumL4UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(75000000000000002097152);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseIronPlateL4UpgradePrototypeId = "MainBaseIronPlateL4Upgrade";

function MainBaseIronPlateL4UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(8));
  _keyTuple[2] = bytes32(uint256(4));
  return _keyTuple;
}

function MainBaseIronPlateL4UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseIronPlateL4UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(49999999999999995805696);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBasePVCellL4UpgradePrototypeId = "MainBasePVCellL4Upgrade";

function MainBasePVCellL4UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(10));
  _keyTuple[2] = bytes32(uint256(4));
  return _keyTuple;
}

function MainBasePVCellL4UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBasePVCellL4UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(49999999999999995805696);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseAlloyL4UpgradePrototypeId = "MainBaseAlloyL4Upgrade";

function MainBaseAlloyL4UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(9));
  _keyTuple[2] = bytes32(uint256(4));
  return _keyTuple;
}

function MainBaseAlloyL4UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseAlloyL4UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(49999999999999995805696);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseTitaniumL4UpgradePrototypeId = "MainBaseTitaniumL4Upgrade";

function MainBaseTitaniumL4UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(4));
  _keyTuple[2] = bytes32(uint256(4));
  return _keyTuple;
}

function MainBaseTitaniumL4UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseTitaniumL4UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(1000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBasePlatinumL4UpgradePrototypeId = "MainBasePlatinumL4Upgrade";

function MainBasePlatinumL4UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(7));
  _keyTuple[2] = bytes32(uint256(4));
  return _keyTuple;
}

function MainBasePlatinumL4UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBasePlatinumL4UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(1000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseIridiumL4UpgradePrototypeId = "MainBaseIridiumL4Upgrade";

function MainBaseIridiumL4UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(5));
  _keyTuple[2] = bytes32(uint256(4));
  return _keyTuple;
}

function MainBaseIridiumL4UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseIridiumL4UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(1000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseKimberliteL4UpgradePrototypeId = "MainBaseKimberliteL4Upgrade";

function MainBaseKimberliteL4UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(6));
  _keyTuple[2] = bytes32(uint256(4));
  return _keyTuple;
}

function MainBaseKimberliteL4UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseKimberliteL4UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(1000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseR_EncryptionL4UpgradePrototypeId = "MainBaseR_EncryptionL4Upgrade";

function MainBaseR_EncryptionL4UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(20));
  _keyTuple[2] = bytes32(uint256(4));
  return _keyTuple;
}

function MainBaseR_EncryptionL4UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseR_EncryptionL4UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(150000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseR_HPL4UpgradePrototypeId = "MainBaseR_HPL4Upgrade";

function MainBaseR_HPL4UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(19));
  _keyTuple[2] = bytes32(uint256(4));
  return _keyTuple;
}

function MainBaseR_HPL4UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseR_HPL4UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(250000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseIronL5UpgradePrototypeId = "MainBaseIronL5Upgrade";

function MainBaseIronL5UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(1));
  _keyTuple[2] = bytes32(uint256(5));
  return _keyTuple;
}

function MainBaseIronL5UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseIronL5UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(150000000000000004194304);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseCopperL5UpgradePrototypeId = "MainBaseCopperL5Upgrade";

function MainBaseCopperL5UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(2));
  _keyTuple[2] = bytes32(uint256(5));
  return _keyTuple;
}

function MainBaseCopperL5UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseCopperL5UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(150000000000000004194304);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseIronPlateL5UpgradePrototypeId = "MainBaseIronPlateL5Upgrade";

function MainBaseIronPlateL5UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(8));
  _keyTuple[2] = bytes32(uint256(5));
  return _keyTuple;
}

function MainBaseIronPlateL5UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseIronPlateL5UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(99999999999999991611392);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseLithiumL5UpgradePrototypeId = "MainBaseLithiumL5Upgrade";

function MainBaseLithiumL5UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(3));
  _keyTuple[2] = bytes32(uint256(5));
  return _keyTuple;
}

function MainBaseLithiumL5UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseLithiumL5UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(150000000000000004194304);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBasePVCellL5UpgradePrototypeId = "MainBasePVCellL5Upgrade";

function MainBasePVCellL5UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(10));
  _keyTuple[2] = bytes32(uint256(5));
  return _keyTuple;
}

function MainBasePVCellL5UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBasePVCellL5UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(99999999999999991611392);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseAlloyL5UpgradePrototypeId = "MainBaseAlloyL5Upgrade";

function MainBaseAlloyL5UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(9));
  _keyTuple[2] = bytes32(uint256(5));
  return _keyTuple;
}

function MainBaseAlloyL5UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseAlloyL5UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(99999999999999991611392);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseTitaniumL5UpgradePrototypeId = "MainBaseTitaniumL5Upgrade";

function MainBaseTitaniumL5UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(4));
  _keyTuple[2] = bytes32(uint256(5));
  return _keyTuple;
}

function MainBaseTitaniumL5UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseTitaniumL5UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(3000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBasePlatinumL5UpgradePrototypeId = "MainBasePlatinumL5Upgrade";

function MainBasePlatinumL5UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(7));
  _keyTuple[2] = bytes32(uint256(5));
  return _keyTuple;
}

function MainBasePlatinumL5UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBasePlatinumL5UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(3000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseIridiumL5UpgradePrototypeId = "MainBaseIridiumL5Upgrade";

function MainBaseIridiumL5UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(5));
  _keyTuple[2] = bytes32(uint256(5));
  return _keyTuple;
}

function MainBaseIridiumL5UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseIridiumL5UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(3000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseKimberliteL5UpgradePrototypeId = "MainBaseKimberliteL5Upgrade";

function MainBaseKimberliteL5UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(6));
  _keyTuple[2] = bytes32(uint256(5));
  return _keyTuple;
}

function MainBaseKimberliteL5UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseKimberliteL5UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(3000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseR_EncryptionL5UpgradePrototypeId = "MainBaseR_EncryptionL5Upgrade";

function MainBaseR_EncryptionL5UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(20));
  _keyTuple[2] = bytes32(uint256(5));
  return _keyTuple;
}

function MainBaseR_EncryptionL5UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseR_EncryptionL5UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(175000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseR_HPL5UpgradePrototypeId = "MainBaseR_HPL5Upgrade";

function MainBaseR_HPL5UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(19));
  _keyTuple[2] = bytes32(uint256(5));
  return _keyTuple;
}

function MainBaseR_HPL5UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseR_HPL5UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(300000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseIronL6UpgradePrototypeId = "MainBaseIronL6Upgrade";

function MainBaseIronL6UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(1));
  _keyTuple[2] = bytes32(uint256(6));
  return _keyTuple;
}

function MainBaseIronL6UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseIronL6UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(249999999999999995805696);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseCopperL6UpgradePrototypeId = "MainBaseCopperL6Upgrade";

function MainBaseCopperL6UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(2));
  _keyTuple[2] = bytes32(uint256(6));
  return _keyTuple;
}

function MainBaseCopperL6UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseCopperL6UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(249999999999999995805696);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseIronPlateL6UpgradePrototypeId = "MainBaseIronPlateL6Upgrade";

function MainBaseIronPlateL6UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(8));
  _keyTuple[2] = bytes32(uint256(6));
  return _keyTuple;
}

function MainBaseIronPlateL6UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseIronPlateL6UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(249999999999999995805696);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseLithiumL6UpgradePrototypeId = "MainBaseLithiumL6Upgrade";

function MainBaseLithiumL6UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(3));
  _keyTuple[2] = bytes32(uint256(6));
  return _keyTuple;
}

function MainBaseLithiumL6UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseLithiumL6UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(249999999999999995805696);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBasePVCellL6UpgradePrototypeId = "MainBasePVCellL6Upgrade";

function MainBasePVCellL6UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(10));
  _keyTuple[2] = bytes32(uint256(6));
  return _keyTuple;
}

function MainBasePVCellL6UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBasePVCellL6UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(249999999999999995805696);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseAlloyL6UpgradePrototypeId = "MainBaseAlloyL6Upgrade";

function MainBaseAlloyL6UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(9));
  _keyTuple[2] = bytes32(uint256(6));
  return _keyTuple;
}

function MainBaseAlloyL6UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseAlloyL6UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(249999999999999995805696);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseTitaniumL6UpgradePrototypeId = "MainBaseTitaniumL6Upgrade";

function MainBaseTitaniumL6UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(4));
  _keyTuple[2] = bytes32(uint256(6));
  return _keyTuple;
}

function MainBaseTitaniumL6UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseTitaniumL6UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(6000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBasePlatinumL6UpgradePrototypeId = "MainBasePlatinumL6Upgrade";

function MainBasePlatinumL6UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(7));
  _keyTuple[2] = bytes32(uint256(6));
  return _keyTuple;
}

function MainBasePlatinumL6UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBasePlatinumL6UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(6000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseIridiumL6UpgradePrototypeId = "MainBaseIridiumL6Upgrade";

function MainBaseIridiumL6UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(5));
  _keyTuple[2] = bytes32(uint256(6));
  return _keyTuple;
}

function MainBaseIridiumL6UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseIridiumL6UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(6000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseKimberliteL6UpgradePrototypeId = "MainBaseKimberliteL6Upgrade";

function MainBaseKimberliteL6UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(6));
  _keyTuple[2] = bytes32(uint256(6));
  return _keyTuple;
}

function MainBaseKimberliteL6UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseKimberliteL6UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(6000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseR_EncryptionL6UpgradePrototypeId = "MainBaseR_EncryptionL6Upgrade";

function MainBaseR_EncryptionL6UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(20));
  _keyTuple[2] = bytes32(uint256(6));
  return _keyTuple;
}

function MainBaseR_EncryptionL6UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseR_EncryptionL6UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(200000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseR_HPL6UpgradePrototypeId = "MainBaseR_HPL6Upgrade";

function MainBaseR_HPL6UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(19));
  _keyTuple[2] = bytes32(uint256(6));
  return _keyTuple;
}

function MainBaseR_HPL6UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseR_HPL6UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(400000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseIronL7UpgradePrototypeId = "MainBaseIronL7Upgrade";

function MainBaseIronL7UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(1));
  _keyTuple[2] = bytes32(uint256(7));
  return _keyTuple;
}

function MainBaseIronL7UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseIronL7UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(749999999999999987417088);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseCopperL7UpgradePrototypeId = "MainBaseCopperL7Upgrade";

function MainBaseCopperL7UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(2));
  _keyTuple[2] = bytes32(uint256(7));
  return _keyTuple;
}

function MainBaseCopperL7UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseCopperL7UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(749999999999999987417088);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseIronPlateL7UpgradePrototypeId = "MainBaseIronPlateL7Upgrade";

function MainBaseIronPlateL7UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(8));
  _keyTuple[2] = bytes32(uint256(7));
  return _keyTuple;
}

function MainBaseIronPlateL7UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseIronPlateL7UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(499999999999999991611392);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseLithiumL7UpgradePrototypeId = "MainBaseLithiumL7Upgrade";

function MainBaseLithiumL7UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(3));
  _keyTuple[2] = bytes32(uint256(7));
  return _keyTuple;
}

function MainBaseLithiumL7UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseLithiumL7UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(749999999999999987417088);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBasePVCellL7UpgradePrototypeId = "MainBasePVCellL7Upgrade";

function MainBasePVCellL7UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(10));
  _keyTuple[2] = bytes32(uint256(7));
  return _keyTuple;
}

function MainBasePVCellL7UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBasePVCellL7UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(499999999999999991611392);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseAlloyL7UpgradePrototypeId = "MainBaseAlloyL7Upgrade";

function MainBaseAlloyL7UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(9));
  _keyTuple[2] = bytes32(uint256(7));
  return _keyTuple;
}

function MainBaseAlloyL7UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseAlloyL7UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(499999999999999991611392);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseTitaniumL7UpgradePrototypeId = "MainBaseTitaniumL7Upgrade";

function MainBaseTitaniumL7UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(4));
  _keyTuple[2] = bytes32(uint256(7));
  return _keyTuple;
}

function MainBaseTitaniumL7UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseTitaniumL7UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(7500000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBasePlatinumL7UpgradePrototypeId = "MainBasePlatinumL7Upgrade";

function MainBasePlatinumL7UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(7));
  _keyTuple[2] = bytes32(uint256(7));
  return _keyTuple;
}

function MainBasePlatinumL7UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBasePlatinumL7UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(7500000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseIridiumL7UpgradePrototypeId = "MainBaseIridiumL7Upgrade";

function MainBaseIridiumL7UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(5));
  _keyTuple[2] = bytes32(uint256(7));
  return _keyTuple;
}

function MainBaseIridiumL7UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseIridiumL7UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(7500000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseKimberliteL7UpgradePrototypeId = "MainBaseKimberliteL7Upgrade";

function MainBaseKimberliteL7UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(6));
  _keyTuple[2] = bytes32(uint256(7));
  return _keyTuple;
}

function MainBaseKimberliteL7UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseKimberliteL7UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(7500000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseR_EncryptionL7UpgradePrototypeId = "MainBaseR_EncryptionL7Upgrade";

function MainBaseR_EncryptionL7UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(20));
  _keyTuple[2] = bytes32(uint256(7));
  return _keyTuple;
}

function MainBaseR_EncryptionL7UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseR_EncryptionL7UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(225000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseR_HPL7UpgradePrototypeId = "MainBaseR_HPL7Upgrade";

function MainBaseR_HPL7UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(19));
  _keyTuple[2] = bytes32(uint256(7));
  return _keyTuple;
}

function MainBaseR_HPL7UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseR_HPL7UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(500000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseIronL8UpgradePrototypeId = "MainBaseIronL8Upgrade";

function MainBaseIronL8UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(1));
  _keyTuple[2] = bytes32(uint256(8));
  return _keyTuple;
}

function MainBaseIronL8UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseIronL8UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(1499999999999999974834176);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseCopperL8UpgradePrototypeId = "MainBaseCopperL8Upgrade";

function MainBaseCopperL8UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(2));
  _keyTuple[2] = bytes32(uint256(8));
  return _keyTuple;
}

function MainBaseCopperL8UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseCopperL8UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(1499999999999999974834176);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseIronPlateL8UpgradePrototypeId = "MainBaseIronPlateL8Upgrade";

function MainBaseIronPlateL8UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(8));
  _keyTuple[2] = bytes32(uint256(8));
  return _keyTuple;
}

function MainBaseIronPlateL8UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseIronPlateL8UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(1250000000000000113246208);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseLithiumL8UpgradePrototypeId = "MainBaseLithiumL8Upgrade";

function MainBaseLithiumL8UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(3));
  _keyTuple[2] = bytes32(uint256(8));
  return _keyTuple;
}

function MainBaseLithiumL8UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseLithiumL8UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(1499999999999999974834176);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBasePVCellL8UpgradePrototypeId = "MainBasePVCellL8Upgrade";

function MainBasePVCellL8UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(10));
  _keyTuple[2] = bytes32(uint256(8));
  return _keyTuple;
}

function MainBasePVCellL8UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBasePVCellL8UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(1250000000000000113246208);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseAlloyL8UpgradePrototypeId = "MainBaseAlloyL8Upgrade";

function MainBaseAlloyL8UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(9));
  _keyTuple[2] = bytes32(uint256(8));
  return _keyTuple;
}

function MainBaseAlloyL8UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseAlloyL8UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(1250000000000000113246208);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseTitaniumL8UpgradePrototypeId = "MainBaseTitaniumL8Upgrade";

function MainBaseTitaniumL8UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(4));
  _keyTuple[2] = bytes32(uint256(8));
  return _keyTuple;
}

function MainBaseTitaniumL8UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseTitaniumL8UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(10000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBasePlatinumL8UpgradePrototypeId = "MainBasePlatinumL8Upgrade";

function MainBasePlatinumL8UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(7));
  _keyTuple[2] = bytes32(uint256(8));
  return _keyTuple;
}

function MainBasePlatinumL8UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBasePlatinumL8UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(10000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseIridiumL8UpgradePrototypeId = "MainBaseIridiumL8Upgrade";

function MainBaseIridiumL8UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(5));
  _keyTuple[2] = bytes32(uint256(8));
  return _keyTuple;
}

function MainBaseIridiumL8UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseIridiumL8UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(10000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseKimberliteL8UpgradePrototypeId = "MainBaseKimberliteL8Upgrade";

function MainBaseKimberliteL8UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(6));
  _keyTuple[2] = bytes32(uint256(8));
  return _keyTuple;
}

function MainBaseKimberliteL8UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseKimberliteL8UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(10000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseR_EncryptionL8UpgradePrototypeId = "MainBaseR_EncryptionL8Upgrade";

function MainBaseR_EncryptionL8UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(20));
  _keyTuple[2] = bytes32(uint256(8));
  return _keyTuple;
}

function MainBaseR_EncryptionL8UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseR_EncryptionL8UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(250000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MainBaseR_HPL8UpgradePrototypeId = "MainBaseR_HPL8Upgrade";

function MainBaseR_HPL8UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x4d61696e42617365000000000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(19));
  _keyTuple[2] = bytes32(uint256(8));
  return _keyTuple;
}

function MainBaseR_HPL8UpgradePrototype(IStore store) {
  bytes32[] memory keys = MainBaseR_HPL8UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(600000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant IronMinePrototypeId = "IronMine";

function IronMineKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = IronMinePrototypeId;
  return _keyTuple;
}

function IronMineLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = IronMinePrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function IronMinePrototype(IStore store) {
  bytes32[] memory keys = IronMineKeys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_BlueprintTableId;
  tableIds[1] = P_MaxLevelTableId;
  tableIds[2] = P_RequiredTileTableId;

  int32[] memory p_blueprint_value = new int32[](2);
  p_blueprint_value[0] = 0;
  p_blueprint_value[1] = 0;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_Blueprint.encode(p_blueprint_value);
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_MaxLevel.encode(7);
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredTile.encode(1);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createIronMineLevel1(store);
  createIronMineLevel2(store);
  createIronMineLevel3(store);
  createIronMineLevel4(store);
  createIronMineLevel5(store);
  createIronMineLevel6(store);
  createIronMineLevel7(store);
  createIronMineLevel8(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createIronMineLevel1(IStore store) {
  bytes32[] memory levelKeys = IronMineLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(1);
  uint8[] memory p_production_resources_level_1 = new uint8[](1);
  p_production_resources_level_1[0] = 1;
  uint256[] memory p_production_amounts_level_1 = new uint256[](1);
  p_production_amounts_level_1[0] = 250000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_Production.encode(
    p_production_resources_level_1,
    p_production_amounts_level_1
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 2 ----------------------------- */
function createIronMineLevel2(IStore store) {
  bytes32[] memory levelKeys = IronMineLevelKeys(2);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(1);
  uint8[] memory p_requiredresources_resources_level_2 = new uint8[](1);
  p_requiredresources_resources_level_2[0] = 1;
  uint256[] memory p_requiredresources_amounts_level_2 = new uint256[](1);
  p_requiredresources_amounts_level_2[0] = 1000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_2,
    p_requiredresources_amounts_level_2
  );
  uint8[] memory p_production_resources_level_2 = new uint8[](1);
  p_production_resources_level_2[0] = 1;
  uint256[] memory p_production_amounts_level_2 = new uint256[](1);
  p_production_amounts_level_2[0] = 350000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_2,
    p_production_amounts_level_2
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 3 ----------------------------- */
function createIronMineLevel3(IStore store) {
  bytes32[] memory levelKeys = IronMineLevelKeys(3);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(2);
  uint8[] memory p_requiredresources_resources_level_3 = new uint8[](1);
  p_requiredresources_resources_level_3[0] = 1;
  uint256[] memory p_requiredresources_amounts_level_3 = new uint256[](1);
  p_requiredresources_amounts_level_3[0] = 10000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_3,
    p_requiredresources_amounts_level_3
  );
  uint8[] memory p_production_resources_level_3 = new uint8[](1);
  p_production_resources_level_3[0] = 1;
  uint256[] memory p_production_amounts_level_3 = new uint256[](1);
  p_production_amounts_level_3[0] = 450000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_3,
    p_production_amounts_level_3
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 4 ----------------------------- */
function createIronMineLevel4(IStore store) {
  bytes32[] memory levelKeys = IronMineLevelKeys(4);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(3);
  uint8[] memory p_requiredresources_resources_level_4 = new uint8[](1);
  p_requiredresources_resources_level_4[0] = 1;
  uint256[] memory p_requiredresources_amounts_level_4 = new uint256[](1);
  p_requiredresources_amounts_level_4[0] = 30000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_4,
    p_requiredresources_amounts_level_4
  );
  uint8[] memory p_production_resources_level_4 = new uint8[](1);
  p_production_resources_level_4[0] = 1;
  uint256[] memory p_production_amounts_level_4 = new uint256[](1);
  p_production_amounts_level_4[0] = 550000000000000064;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_4,
    p_production_amounts_level_4
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 5 ----------------------------- */
function createIronMineLevel5(IStore store) {
  bytes32[] memory levelKeys = IronMineLevelKeys(5);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(4);
  uint8[] memory p_requiredresources_resources_level_5 = new uint8[](1);
  p_requiredresources_resources_level_5[0] = 1;
  uint256[] memory p_requiredresources_amounts_level_5 = new uint256[](1);
  p_requiredresources_amounts_level_5[0] = 99999999999999991611392;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_5,
    p_requiredresources_amounts_level_5
  );
  uint8[] memory p_production_resources_level_5 = new uint8[](1);
  p_production_resources_level_5[0] = 1;
  uint256[] memory p_production_amounts_level_5 = new uint256[](1);
  p_production_amounts_level_5[0] = 650000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_5,
    p_production_amounts_level_5
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 6 ----------------------------- */
function createIronMineLevel6(IStore store) {
  bytes32[] memory levelKeys = IronMineLevelKeys(6);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(5);
  uint8[] memory p_requiredresources_resources_level_6 = new uint8[](1);
  p_requiredresources_resources_level_6[0] = 1;
  uint256[] memory p_requiredresources_amounts_level_6 = new uint256[](1);
  p_requiredresources_amounts_level_6[0] = 199999999999999983222784;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_6,
    p_requiredresources_amounts_level_6
  );
  uint8[] memory p_production_resources_level_6 = new uint8[](1);
  p_production_resources_level_6[0] = 1;
  uint256[] memory p_production_amounts_level_6 = new uint256[](1);
  p_production_amounts_level_6[0] = 750000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_6,
    p_production_amounts_level_6
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 7 ----------------------------- */
function createIronMineLevel7(IStore store) {
  bytes32[] memory levelKeys = IronMineLevelKeys(7);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(6);
  uint8[] memory p_requiredresources_resources_level_7 = new uint8[](1);
  p_requiredresources_resources_level_7[0] = 1;
  uint256[] memory p_requiredresources_amounts_level_7 = new uint256[](1);
  p_requiredresources_amounts_level_7[0] = 499999999999999991611392;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_7,
    p_requiredresources_amounts_level_7
  );
  uint8[] memory p_production_resources_level_7 = new uint8[](1);
  p_production_resources_level_7[0] = 1;
  uint256[] memory p_production_amounts_level_7 = new uint256[](1);
  p_production_amounts_level_7[0] = 900000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_7,
    p_production_amounts_level_7
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 8 ----------------------------- */
function createIronMineLevel8(IStore store) {
  bytes32[] memory levelKeys = IronMineLevelKeys(8);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(7);
  uint8[] memory p_requiredresources_resources_level_8 = new uint8[](1);
  p_requiredresources_resources_level_8[0] = 1;
  uint256[] memory p_requiredresources_amounts_level_8 = new uint256[](1);
  p_requiredresources_amounts_level_8[0] = 999999999999999983222784;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_8,
    p_requiredresources_amounts_level_8
  );
  uint8[] memory p_production_resources_level_8 = new uint8[](1);
  p_production_resources_level_8[0] = 1;
  uint256[] memory p_production_amounts_level_8 = new uint256[](1);
  p_production_amounts_level_8[0] = 1200000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_8,
    p_production_amounts_level_8
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant CopperMinePrototypeId = "CopperMine";

function CopperMineKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = CopperMinePrototypeId;
  return _keyTuple;
}

function CopperMineLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = CopperMinePrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function CopperMinePrototype(IStore store) {
  bytes32[] memory keys = CopperMineKeys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_BlueprintTableId;
  tableIds[1] = P_MaxLevelTableId;
  tableIds[2] = P_RequiredTileTableId;

  int32[] memory p_blueprint_value = new int32[](2);
  p_blueprint_value[0] = 0;
  p_blueprint_value[1] = 0;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_Blueprint.encode(p_blueprint_value);
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_MaxLevel.encode(7);
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredTile.encode(1);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createCopperMineLevel1(store);
  createCopperMineLevel2(store);
  createCopperMineLevel3(store);
  createCopperMineLevel4(store);
  createCopperMineLevel5(store);
  createCopperMineLevel6(store);
  createCopperMineLevel7(store);
  createCopperMineLevel8(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createCopperMineLevel1(IStore store) {
  bytes32[] memory levelKeys = CopperMineLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(1);
  uint8[] memory p_production_resources_level_1 = new uint8[](1);
  p_production_resources_level_1[0] = 2;
  uint256[] memory p_production_amounts_level_1 = new uint256[](1);
  p_production_amounts_level_1[0] = 250000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_Production.encode(
    p_production_resources_level_1,
    p_production_amounts_level_1
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 2 ----------------------------- */
function createCopperMineLevel2(IStore store) {
  bytes32[] memory levelKeys = CopperMineLevelKeys(2);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(1);
  uint8[] memory p_requiredresources_resources_level_2 = new uint8[](1);
  p_requiredresources_resources_level_2[0] = 1;
  uint256[] memory p_requiredresources_amounts_level_2 = new uint256[](1);
  p_requiredresources_amounts_level_2[0] = 1000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_2,
    p_requiredresources_amounts_level_2
  );
  uint8[] memory p_production_resources_level_2 = new uint8[](1);
  p_production_resources_level_2[0] = 2;
  uint256[] memory p_production_amounts_level_2 = new uint256[](1);
  p_production_amounts_level_2[0] = 350000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_2,
    p_production_amounts_level_2
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 3 ----------------------------- */
function createCopperMineLevel3(IStore store) {
  bytes32[] memory levelKeys = CopperMineLevelKeys(3);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(2);
  uint8[] memory p_requiredresources_resources_level_3 = new uint8[](1);
  p_requiredresources_resources_level_3[0] = 1;
  uint256[] memory p_requiredresources_amounts_level_3 = new uint256[](1);
  p_requiredresources_amounts_level_3[0] = 10000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_3,
    p_requiredresources_amounts_level_3
  );
  uint8[] memory p_production_resources_level_3 = new uint8[](1);
  p_production_resources_level_3[0] = 2;
  uint256[] memory p_production_amounts_level_3 = new uint256[](1);
  p_production_amounts_level_3[0] = 450000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_3,
    p_production_amounts_level_3
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 4 ----------------------------- */
function createCopperMineLevel4(IStore store) {
  bytes32[] memory levelKeys = CopperMineLevelKeys(4);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(3);
  uint8[] memory p_requiredresources_resources_level_4 = new uint8[](1);
  p_requiredresources_resources_level_4[0] = 1;
  uint256[] memory p_requiredresources_amounts_level_4 = new uint256[](1);
  p_requiredresources_amounts_level_4[0] = 30000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_4,
    p_requiredresources_amounts_level_4
  );
  uint8[] memory p_production_resources_level_4 = new uint8[](1);
  p_production_resources_level_4[0] = 2;
  uint256[] memory p_production_amounts_level_4 = new uint256[](1);
  p_production_amounts_level_4[0] = 550000000000000064;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_4,
    p_production_amounts_level_4
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 5 ----------------------------- */
function createCopperMineLevel5(IStore store) {
  bytes32[] memory levelKeys = CopperMineLevelKeys(5);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(4);
  uint8[] memory p_requiredresources_resources_level_5 = new uint8[](1);
  p_requiredresources_resources_level_5[0] = 1;
  uint256[] memory p_requiredresources_amounts_level_5 = new uint256[](1);
  p_requiredresources_amounts_level_5[0] = 99999999999999991611392;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_5,
    p_requiredresources_amounts_level_5
  );
  uint8[] memory p_production_resources_level_5 = new uint8[](1);
  p_production_resources_level_5[0] = 2;
  uint256[] memory p_production_amounts_level_5 = new uint256[](1);
  p_production_amounts_level_5[0] = 650000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_5,
    p_production_amounts_level_5
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 6 ----------------------------- */
function createCopperMineLevel6(IStore store) {
  bytes32[] memory levelKeys = CopperMineLevelKeys(6);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(5);
  uint8[] memory p_requiredresources_resources_level_6 = new uint8[](1);
  p_requiredresources_resources_level_6[0] = 1;
  uint256[] memory p_requiredresources_amounts_level_6 = new uint256[](1);
  p_requiredresources_amounts_level_6[0] = 199999999999999983222784;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_6,
    p_requiredresources_amounts_level_6
  );
  uint8[] memory p_production_resources_level_6 = new uint8[](1);
  p_production_resources_level_6[0] = 2;
  uint256[] memory p_production_amounts_level_6 = new uint256[](1);
  p_production_amounts_level_6[0] = 750000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_6,
    p_production_amounts_level_6
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 7 ----------------------------- */
function createCopperMineLevel7(IStore store) {
  bytes32[] memory levelKeys = CopperMineLevelKeys(7);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(6);
  uint8[] memory p_requiredresources_resources_level_7 = new uint8[](1);
  p_requiredresources_resources_level_7[0] = 1;
  uint256[] memory p_requiredresources_amounts_level_7 = new uint256[](1);
  p_requiredresources_amounts_level_7[0] = 499999999999999991611392;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_7,
    p_requiredresources_amounts_level_7
  );
  uint8[] memory p_production_resources_level_7 = new uint8[](1);
  p_production_resources_level_7[0] = 2;
  uint256[] memory p_production_amounts_level_7 = new uint256[](1);
  p_production_amounts_level_7[0] = 900000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_7,
    p_production_amounts_level_7
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 8 ----------------------------- */
function createCopperMineLevel8(IStore store) {
  bytes32[] memory levelKeys = CopperMineLevelKeys(8);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(7);
  uint8[] memory p_requiredresources_resources_level_8 = new uint8[](1);
  p_requiredresources_resources_level_8[0] = 1;
  uint256[] memory p_requiredresources_amounts_level_8 = new uint256[](1);
  p_requiredresources_amounts_level_8[0] = 999999999999999983222784;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_8,
    p_requiredresources_amounts_level_8
  );
  uint8[] memory p_production_resources_level_8 = new uint8[](1);
  p_production_resources_level_8[0] = 2;
  uint256[] memory p_production_amounts_level_8 = new uint256[](1);
  p_production_amounts_level_8[0] = 1200000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_8,
    p_production_amounts_level_8
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant LithiumMinePrototypeId = "LithiumMine";

function LithiumMineKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = LithiumMinePrototypeId;
  return _keyTuple;
}

function LithiumMineLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = LithiumMinePrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function LithiumMinePrototype(IStore store) {
  bytes32[] memory keys = LithiumMineKeys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_BlueprintTableId;
  tableIds[1] = P_MaxLevelTableId;
  tableIds[2] = P_RequiredTileTableId;

  int32[] memory p_blueprint_value = new int32[](2);
  p_blueprint_value[0] = 0;
  p_blueprint_value[1] = 0;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_Blueprint.encode(p_blueprint_value);
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_MaxLevel.encode(7);
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredTile.encode(1);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createLithiumMineLevel1(store);
  createLithiumMineLevel2(store);
  createLithiumMineLevel3(store);
  createLithiumMineLevel4(store);
  createLithiumMineLevel5(store);
  createLithiumMineLevel6(store);
  createLithiumMineLevel7(store);
  createLithiumMineLevel8(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createLithiumMineLevel1(IStore store) {
  bytes32[] memory levelKeys = LithiumMineLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(2);
  uint8[] memory p_production_resources_level_1 = new uint8[](1);
  p_production_resources_level_1[0] = 3;
  uint256[] memory p_production_amounts_level_1 = new uint256[](1);
  p_production_amounts_level_1[0] = 250000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_Production.encode(
    p_production_resources_level_1,
    p_production_amounts_level_1
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 2 ----------------------------- */
function createLithiumMineLevel2(IStore store) {
  bytes32[] memory levelKeys = LithiumMineLevelKeys(2);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(2);
  uint8[] memory p_requiredresources_resources_level_2 = new uint8[](1);
  p_requiredresources_resources_level_2[0] = 1;
  uint256[] memory p_requiredresources_amounts_level_2 = new uint256[](1);
  p_requiredresources_amounts_level_2[0] = 1000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_2,
    p_requiredresources_amounts_level_2
  );
  uint8[] memory p_production_resources_level_2 = new uint8[](1);
  p_production_resources_level_2[0] = 3;
  uint256[] memory p_production_amounts_level_2 = new uint256[](1);
  p_production_amounts_level_2[0] = 350000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_2,
    p_production_amounts_level_2
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 3 ----------------------------- */
function createLithiumMineLevel3(IStore store) {
  bytes32[] memory levelKeys = LithiumMineLevelKeys(3);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(3);
  uint8[] memory p_requiredresources_resources_level_3 = new uint8[](1);
  p_requiredresources_resources_level_3[0] = 1;
  uint256[] memory p_requiredresources_amounts_level_3 = new uint256[](1);
  p_requiredresources_amounts_level_3[0] = 10000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_3,
    p_requiredresources_amounts_level_3
  );
  uint8[] memory p_production_resources_level_3 = new uint8[](1);
  p_production_resources_level_3[0] = 3;
  uint256[] memory p_production_amounts_level_3 = new uint256[](1);
  p_production_amounts_level_3[0] = 450000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_3,
    p_production_amounts_level_3
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 4 ----------------------------- */
function createLithiumMineLevel4(IStore store) {
  bytes32[] memory levelKeys = LithiumMineLevelKeys(4);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(4);
  uint8[] memory p_requiredresources_resources_level_4 = new uint8[](1);
  p_requiredresources_resources_level_4[0] = 1;
  uint256[] memory p_requiredresources_amounts_level_4 = new uint256[](1);
  p_requiredresources_amounts_level_4[0] = 30000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_4,
    p_requiredresources_amounts_level_4
  );
  uint8[] memory p_production_resources_level_4 = new uint8[](1);
  p_production_resources_level_4[0] = 3;
  uint256[] memory p_production_amounts_level_4 = new uint256[](1);
  p_production_amounts_level_4[0] = 550000000000000064;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_4,
    p_production_amounts_level_4
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 5 ----------------------------- */
function createLithiumMineLevel5(IStore store) {
  bytes32[] memory levelKeys = LithiumMineLevelKeys(5);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(5);
  uint8[] memory p_requiredresources_resources_level_5 = new uint8[](1);
  p_requiredresources_resources_level_5[0] = 1;
  uint256[] memory p_requiredresources_amounts_level_5 = new uint256[](1);
  p_requiredresources_amounts_level_5[0] = 99999999999999991611392;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_5,
    p_requiredresources_amounts_level_5
  );
  uint8[] memory p_production_resources_level_5 = new uint8[](1);
  p_production_resources_level_5[0] = 3;
  uint256[] memory p_production_amounts_level_5 = new uint256[](1);
  p_production_amounts_level_5[0] = 650000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_5,
    p_production_amounts_level_5
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 6 ----------------------------- */
function createLithiumMineLevel6(IStore store) {
  bytes32[] memory levelKeys = LithiumMineLevelKeys(6);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(6);
  uint8[] memory p_requiredresources_resources_level_6 = new uint8[](1);
  p_requiredresources_resources_level_6[0] = 1;
  uint256[] memory p_requiredresources_amounts_level_6 = new uint256[](1);
  p_requiredresources_amounts_level_6[0] = 199999999999999983222784;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_6,
    p_requiredresources_amounts_level_6
  );
  uint8[] memory p_production_resources_level_6 = new uint8[](1);
  p_production_resources_level_6[0] = 3;
  uint256[] memory p_production_amounts_level_6 = new uint256[](1);
  p_production_amounts_level_6[0] = 750000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_6,
    p_production_amounts_level_6
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 7 ----------------------------- */
function createLithiumMineLevel7(IStore store) {
  bytes32[] memory levelKeys = LithiumMineLevelKeys(7);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(7);
  uint8[] memory p_requiredresources_resources_level_7 = new uint8[](1);
  p_requiredresources_resources_level_7[0] = 1;
  uint256[] memory p_requiredresources_amounts_level_7 = new uint256[](1);
  p_requiredresources_amounts_level_7[0] = 499999999999999991611392;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_7,
    p_requiredresources_amounts_level_7
  );
  uint8[] memory p_production_resources_level_7 = new uint8[](1);
  p_production_resources_level_7[0] = 3;
  uint256[] memory p_production_amounts_level_7 = new uint256[](1);
  p_production_amounts_level_7[0] = 900000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_7,
    p_production_amounts_level_7
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 8 ----------------------------- */
function createLithiumMineLevel8(IStore store) {
  bytes32[] memory levelKeys = LithiumMineLevelKeys(8);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(8);
  uint8[] memory p_requiredresources_resources_level_8 = new uint8[](1);
  p_requiredresources_resources_level_8[0] = 1;
  uint256[] memory p_requiredresources_amounts_level_8 = new uint256[](1);
  p_requiredresources_amounts_level_8[0] = 999999999999999983222784;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_8,
    p_requiredresources_amounts_level_8
  );
  uint8[] memory p_production_resources_level_8 = new uint8[](1);
  p_production_resources_level_8[0] = 3;
  uint256[] memory p_production_amounts_level_8 = new uint256[](1);
  p_production_amounts_level_8[0] = 1200000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_8,
    p_production_amounts_level_8
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant IronPlateFactoryPrototypeId = "IronPlateFactory";

function IronPlateFactoryKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = IronPlateFactoryPrototypeId;
  return _keyTuple;
}

function IronPlateFactoryLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = IronPlateFactoryPrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function IronPlateFactoryPrototype(IStore store) {
  bytes32[] memory keys = IronPlateFactoryKeys();
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_BlueprintTableId;
  tableIds[1] = P_MaxLevelTableId;

  int32[] memory p_blueprint_value = new int32[](8);
  p_blueprint_value[0] = 0;
  p_blueprint_value[1] = 0;
  p_blueprint_value[2] = 0;
  p_blueprint_value[3] = -1;
  p_blueprint_value[4] = -1;
  p_blueprint_value[5] = 0;
  p_blueprint_value[6] = -1;
  p_blueprint_value[7] = -1;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_Blueprint.encode(p_blueprint_value);
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_MaxLevel.encode(7);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createIronPlateFactoryLevel1(store);
  createIronPlateFactoryLevel2(store);
  createIronPlateFactoryLevel3(store);
  createIronPlateFactoryLevel4(store);
  createIronPlateFactoryLevel5(store);
  createIronPlateFactoryLevel6(store);
  createIronPlateFactoryLevel7(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createIronPlateFactoryLevel1(IStore store) {
  bytes32[] memory levelKeys = IronPlateFactoryLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_RequiredDependencyTableId;
  tableIds[3] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(1);
  uint8[] memory p_requiredresources_resources_level_1 = new uint8[](1);
  p_requiredresources_resources_level_1[0] = 2;
  uint256[] memory p_requiredresources_amounts_level_1 = new uint256[](1);
  p_requiredresources_amounts_level_1[0] = 200000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_1,
    p_requiredresources_amounts_level_1
  );
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredDependency.encode(1, 200000000000000000);
  uint8[] memory p_production_resources_level_1 = new uint8[](1);
  p_production_resources_level_1[0] = 8;
  uint256[] memory p_production_amounts_level_1 = new uint256[](1);
  p_production_amounts_level_1[0] = 80000000000000000;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Production.encode(
    p_production_resources_level_1,
    p_production_amounts_level_1
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 2 ----------------------------- */
function createIronPlateFactoryLevel2(IStore store) {
  bytes32[] memory levelKeys = IronPlateFactoryLevelKeys(2);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_RequiredDependencyTableId;
  tableIds[3] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(2);
  uint8[] memory p_requiredresources_resources_level_2 = new uint8[](1);
  p_requiredresources_resources_level_2[0] = 2;
  uint256[] memory p_requiredresources_amounts_level_2 = new uint256[](1);
  p_requiredresources_amounts_level_2[0] = 2000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_2,
    p_requiredresources_amounts_level_2
  );
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredDependency.encode(1, 300000000000000000);
  uint8[] memory p_production_resources_level_2 = new uint8[](1);
  p_production_resources_level_2[0] = 8;
  uint256[] memory p_production_amounts_level_2 = new uint256[](1);
  p_production_amounts_level_2[0] = 120000000000000000;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Production.encode(
    p_production_resources_level_2,
    p_production_amounts_level_2
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 3 ----------------------------- */
function createIronPlateFactoryLevel3(IStore store) {
  bytes32[] memory levelKeys = IronPlateFactoryLevelKeys(3);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_RequiredDependencyTableId;
  tableIds[3] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(3);
  uint8[] memory p_requiredresources_resources_level_3 = new uint8[](1);
  p_requiredresources_resources_level_3[0] = 2;
  uint256[] memory p_requiredresources_amounts_level_3 = new uint256[](1);
  p_requiredresources_amounts_level_3[0] = 7500000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_3,
    p_requiredresources_amounts_level_3
  );
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredDependency.encode(1, 400000000000000000);
  uint8[] memory p_production_resources_level_3 = new uint8[](1);
  p_production_resources_level_3[0] = 8;
  uint256[] memory p_production_amounts_level_3 = new uint256[](1);
  p_production_amounts_level_3[0] = 170000000000000000;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Production.encode(
    p_production_resources_level_3,
    p_production_amounts_level_3
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 4 ----------------------------- */
function createIronPlateFactoryLevel4(IStore store) {
  bytes32[] memory levelKeys = IronPlateFactoryLevelKeys(4);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_RequiredDependencyTableId;
  tableIds[3] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(4);
  uint8[] memory p_requiredresources_resources_level_4 = new uint8[](1);
  p_requiredresources_resources_level_4[0] = 2;
  uint256[] memory p_requiredresources_amounts_level_4 = new uint256[](1);
  p_requiredresources_amounts_level_4[0] = 24999999999999997902848;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_4,
    p_requiredresources_amounts_level_4
  );
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredDependency.encode(1, 500000000000000000);
  uint8[] memory p_production_resources_level_4 = new uint8[](1);
  p_production_resources_level_4[0] = 8;
  uint256[] memory p_production_amounts_level_4 = new uint256[](1);
  p_production_amounts_level_4[0] = 230000000000000000;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Production.encode(
    p_production_resources_level_4,
    p_production_amounts_level_4
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 5 ----------------------------- */
function createIronPlateFactoryLevel5(IStore store) {
  bytes32[] memory levelKeys = IronPlateFactoryLevelKeys(5);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_RequiredDependencyTableId;
  tableIds[3] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(5);
  uint8[] memory p_requiredresources_resources_level_5 = new uint8[](1);
  p_requiredresources_resources_level_5[0] = 2;
  uint256[] memory p_requiredresources_amounts_level_5 = new uint256[](1);
  p_requiredresources_amounts_level_5[0] = 75000000000000002097152;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_5,
    p_requiredresources_amounts_level_5
  );
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredDependency.encode(1, 600000000000000000);
  uint8[] memory p_production_resources_level_5 = new uint8[](1);
  p_production_resources_level_5[0] = 8;
  uint256[] memory p_production_amounts_level_5 = new uint256[](1);
  p_production_amounts_level_5[0] = 300000000000000000;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Production.encode(
    p_production_resources_level_5,
    p_production_amounts_level_5
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 6 ----------------------------- */
function createIronPlateFactoryLevel6(IStore store) {
  bytes32[] memory levelKeys = IronPlateFactoryLevelKeys(6);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_RequiredDependencyTableId;
  tableIds[3] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(6);
  uint8[] memory p_requiredresources_resources_level_6 = new uint8[](1);
  p_requiredresources_resources_level_6[0] = 2;
  uint256[] memory p_requiredresources_amounts_level_6 = new uint256[](1);
  p_requiredresources_amounts_level_6[0] = 249999999999999995805696;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_6,
    p_requiredresources_amounts_level_6
  );
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredDependency.encode(1, 700000000000000000);
  uint8[] memory p_production_resources_level_6 = new uint8[](1);
  p_production_resources_level_6[0] = 8;
  uint256[] memory p_production_amounts_level_6 = new uint256[](1);
  p_production_amounts_level_6[0] = 400000000000000000;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Production.encode(
    p_production_resources_level_6,
    p_production_amounts_level_6
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 7 ----------------------------- */
function createIronPlateFactoryLevel7(IStore store) {
  bytes32[] memory levelKeys = IronPlateFactoryLevelKeys(7);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_RequiredDependencyTableId;
  tableIds[3] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(7);
  uint8[] memory p_requiredresources_resources_level_7 = new uint8[](1);
  p_requiredresources_resources_level_7[0] = 2;
  uint256[] memory p_requiredresources_amounts_level_7 = new uint256[](1);
  p_requiredresources_amounts_level_7[0] = 999999999999999983222784;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_7,
    p_requiredresources_amounts_level_7
  );
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredDependency.encode(1, 800000000000000000);
  uint8[] memory p_production_resources_level_7 = new uint8[](1);
  p_production_resources_level_7[0] = 8;
  uint256[] memory p_production_amounts_level_7 = new uint256[](1);
  p_production_amounts_level_7[0] = 550000000000000064;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Production.encode(
    p_production_resources_level_7,
    p_production_amounts_level_7
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant AlloyFactoryPrototypeId = "AlloyFactory";

function AlloyFactoryKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = AlloyFactoryPrototypeId;
  return _keyTuple;
}

function AlloyFactoryLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = AlloyFactoryPrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function AlloyFactoryPrototype(IStore store) {
  bytes32[] memory keys = AlloyFactoryKeys();
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_BlueprintTableId;
  tableIds[1] = P_MaxLevelTableId;

  int32[] memory p_blueprint_value = new int32[](8);
  p_blueprint_value[0] = 0;
  p_blueprint_value[1] = 0;
  p_blueprint_value[2] = 0;
  p_blueprint_value[3] = -1;
  p_blueprint_value[4] = -1;
  p_blueprint_value[5] = 0;
  p_blueprint_value[6] = -1;
  p_blueprint_value[7] = -1;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_Blueprint.encode(p_blueprint_value);
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_MaxLevel.encode(7);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createAlloyFactoryLevel1(store);
  createAlloyFactoryLevel2(store);
  createAlloyFactoryLevel3(store);
  createAlloyFactoryLevel4(store);
  createAlloyFactoryLevel5(store);
  createAlloyFactoryLevel6(store);
  createAlloyFactoryLevel7(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createAlloyFactoryLevel1(IStore store) {
  bytes32[] memory levelKeys = AlloyFactoryLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_RequiredDependencyTableId;
  tableIds[3] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(2);
  uint8[] memory p_requiredresources_resources_level_1 = new uint8[](1);
  p_requiredresources_resources_level_1[0] = 2;
  uint256[] memory p_requiredresources_amounts_level_1 = new uint256[](1);
  p_requiredresources_amounts_level_1[0] = 200000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_1,
    p_requiredresources_amounts_level_1
  );
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredDependency.encode(2, 200000000000000000);
  uint8[] memory p_production_resources_level_1 = new uint8[](1);
  p_production_resources_level_1[0] = 9;
  uint256[] memory p_production_amounts_level_1 = new uint256[](1);
  p_production_amounts_level_1[0] = 80000000000000000;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Production.encode(
    p_production_resources_level_1,
    p_production_amounts_level_1
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 2 ----------------------------- */
function createAlloyFactoryLevel2(IStore store) {
  bytes32[] memory levelKeys = AlloyFactoryLevelKeys(2);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_RequiredDependencyTableId;
  tableIds[3] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(2);
  uint8[] memory p_requiredresources_resources_level_2 = new uint8[](1);
  p_requiredresources_resources_level_2[0] = 2;
  uint256[] memory p_requiredresources_amounts_level_2 = new uint256[](1);
  p_requiredresources_amounts_level_2[0] = 2000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_2,
    p_requiredresources_amounts_level_2
  );
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredDependency.encode(2, 300000000000000000);
  uint8[] memory p_production_resources_level_2 = new uint8[](1);
  p_production_resources_level_2[0] = 9;
  uint256[] memory p_production_amounts_level_2 = new uint256[](1);
  p_production_amounts_level_2[0] = 120000000000000000;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Production.encode(
    p_production_resources_level_2,
    p_production_amounts_level_2
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 3 ----------------------------- */
function createAlloyFactoryLevel3(IStore store) {
  bytes32[] memory levelKeys = AlloyFactoryLevelKeys(3);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_RequiredDependencyTableId;
  tableIds[3] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(3);
  uint8[] memory p_requiredresources_resources_level_3 = new uint8[](1);
  p_requiredresources_resources_level_3[0] = 2;
  uint256[] memory p_requiredresources_amounts_level_3 = new uint256[](1);
  p_requiredresources_amounts_level_3[0] = 7500000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_3,
    p_requiredresources_amounts_level_3
  );
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredDependency.encode(2, 400000000000000000);
  uint8[] memory p_production_resources_level_3 = new uint8[](1);
  p_production_resources_level_3[0] = 9;
  uint256[] memory p_production_amounts_level_3 = new uint256[](1);
  p_production_amounts_level_3[0] = 170000000000000000;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Production.encode(
    p_production_resources_level_3,
    p_production_amounts_level_3
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 4 ----------------------------- */
function createAlloyFactoryLevel4(IStore store) {
  bytes32[] memory levelKeys = AlloyFactoryLevelKeys(4);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_RequiredDependencyTableId;
  tableIds[3] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(4);
  uint8[] memory p_requiredresources_resources_level_4 = new uint8[](1);
  p_requiredresources_resources_level_4[0] = 2;
  uint256[] memory p_requiredresources_amounts_level_4 = new uint256[](1);
  p_requiredresources_amounts_level_4[0] = 24999999999999997902848;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_4,
    p_requiredresources_amounts_level_4
  );
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredDependency.encode(2, 500000000000000000);
  uint8[] memory p_production_resources_level_4 = new uint8[](1);
  p_production_resources_level_4[0] = 9;
  uint256[] memory p_production_amounts_level_4 = new uint256[](1);
  p_production_amounts_level_4[0] = 230000000000000000;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Production.encode(
    p_production_resources_level_4,
    p_production_amounts_level_4
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 5 ----------------------------- */
function createAlloyFactoryLevel5(IStore store) {
  bytes32[] memory levelKeys = AlloyFactoryLevelKeys(5);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_RequiredDependencyTableId;
  tableIds[3] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(5);
  uint8[] memory p_requiredresources_resources_level_5 = new uint8[](1);
  p_requiredresources_resources_level_5[0] = 2;
  uint256[] memory p_requiredresources_amounts_level_5 = new uint256[](1);
  p_requiredresources_amounts_level_5[0] = 75000000000000002097152;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_5,
    p_requiredresources_amounts_level_5
  );
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredDependency.encode(2, 600000000000000000);
  uint8[] memory p_production_resources_level_5 = new uint8[](1);
  p_production_resources_level_5[0] = 9;
  uint256[] memory p_production_amounts_level_5 = new uint256[](1);
  p_production_amounts_level_5[0] = 300000000000000000;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Production.encode(
    p_production_resources_level_5,
    p_production_amounts_level_5
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 6 ----------------------------- */
function createAlloyFactoryLevel6(IStore store) {
  bytes32[] memory levelKeys = AlloyFactoryLevelKeys(6);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_RequiredDependencyTableId;
  tableIds[3] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(6);
  uint8[] memory p_requiredresources_resources_level_6 = new uint8[](1);
  p_requiredresources_resources_level_6[0] = 2;
  uint256[] memory p_requiredresources_amounts_level_6 = new uint256[](1);
  p_requiredresources_amounts_level_6[0] = 249999999999999995805696;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_6,
    p_requiredresources_amounts_level_6
  );
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredDependency.encode(2, 700000000000000000);
  uint8[] memory p_production_resources_level_6 = new uint8[](1);
  p_production_resources_level_6[0] = 9;
  uint256[] memory p_production_amounts_level_6 = new uint256[](1);
  p_production_amounts_level_6[0] = 400000000000000000;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Production.encode(
    p_production_resources_level_6,
    p_production_amounts_level_6
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 7 ----------------------------- */
function createAlloyFactoryLevel7(IStore store) {
  bytes32[] memory levelKeys = AlloyFactoryLevelKeys(7);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_RequiredDependencyTableId;
  tableIds[3] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(7);
  uint8[] memory p_requiredresources_resources_level_7 = new uint8[](1);
  p_requiredresources_resources_level_7[0] = 2;
  uint256[] memory p_requiredresources_amounts_level_7 = new uint256[](1);
  p_requiredresources_amounts_level_7[0] = 999999999999999983222784;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_7,
    p_requiredresources_amounts_level_7
  );
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredDependency.encode(2, 800000000000000000);
  uint8[] memory p_production_resources_level_7 = new uint8[](1);
  p_production_resources_level_7[0] = 9;
  uint256[] memory p_production_amounts_level_7 = new uint256[](1);
  p_production_amounts_level_7[0] = 550000000000000064;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Production.encode(
    p_production_resources_level_7,
    p_production_amounts_level_7
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant PVCellFactoryPrototypeId = "PVCellFactory";

function PVCellFactoryKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = PVCellFactoryPrototypeId;
  return _keyTuple;
}

function PVCellFactoryLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = PVCellFactoryPrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function PVCellFactoryPrototype(IStore store) {
  bytes32[] memory keys = PVCellFactoryKeys();
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_BlueprintTableId;
  tableIds[1] = P_MaxLevelTableId;

  int32[] memory p_blueprint_value = new int32[](8);
  p_blueprint_value[0] = 0;
  p_blueprint_value[1] = 0;
  p_blueprint_value[2] = 0;
  p_blueprint_value[3] = -1;
  p_blueprint_value[4] = -1;
  p_blueprint_value[5] = 0;
  p_blueprint_value[6] = -1;
  p_blueprint_value[7] = -1;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_Blueprint.encode(p_blueprint_value);
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_MaxLevel.encode(7);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createPVCellFactoryLevel1(store);
  createPVCellFactoryLevel2(store);
  createPVCellFactoryLevel3(store);
  createPVCellFactoryLevel4(store);
  createPVCellFactoryLevel5(store);
  createPVCellFactoryLevel6(store);
  createPVCellFactoryLevel7(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createPVCellFactoryLevel1(IStore store) {
  bytes32[] memory levelKeys = PVCellFactoryLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_RequiredDependencyTableId;
  tableIds[3] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(2);
  uint8[] memory p_requiredresources_resources_level_1 = new uint8[](1);
  p_requiredresources_resources_level_1[0] = 2;
  uint256[] memory p_requiredresources_amounts_level_1 = new uint256[](1);
  p_requiredresources_amounts_level_1[0] = 200000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_1,
    p_requiredresources_amounts_level_1
  );
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredDependency.encode(3, 200000000000000000);
  uint8[] memory p_production_resources_level_1 = new uint8[](1);
  p_production_resources_level_1[0] = 10;
  uint256[] memory p_production_amounts_level_1 = new uint256[](1);
  p_production_amounts_level_1[0] = 80000000000000000;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Production.encode(
    p_production_resources_level_1,
    p_production_amounts_level_1
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 2 ----------------------------- */
function createPVCellFactoryLevel2(IStore store) {
  bytes32[] memory levelKeys = PVCellFactoryLevelKeys(2);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_RequiredDependencyTableId;
  tableIds[3] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(2);
  uint8[] memory p_requiredresources_resources_level_2 = new uint8[](1);
  p_requiredresources_resources_level_2[0] = 2;
  uint256[] memory p_requiredresources_amounts_level_2 = new uint256[](1);
  p_requiredresources_amounts_level_2[0] = 2000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_2,
    p_requiredresources_amounts_level_2
  );
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredDependency.encode(3, 300000000000000000);
  uint8[] memory p_production_resources_level_2 = new uint8[](1);
  p_production_resources_level_2[0] = 10;
  uint256[] memory p_production_amounts_level_2 = new uint256[](1);
  p_production_amounts_level_2[0] = 120000000000000000;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Production.encode(
    p_production_resources_level_2,
    p_production_amounts_level_2
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 3 ----------------------------- */
function createPVCellFactoryLevel3(IStore store) {
  bytes32[] memory levelKeys = PVCellFactoryLevelKeys(3);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_RequiredDependencyTableId;
  tableIds[3] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(3);
  uint8[] memory p_requiredresources_resources_level_3 = new uint8[](1);
  p_requiredresources_resources_level_3[0] = 2;
  uint256[] memory p_requiredresources_amounts_level_3 = new uint256[](1);
  p_requiredresources_amounts_level_3[0] = 7500000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_3,
    p_requiredresources_amounts_level_3
  );
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredDependency.encode(3, 400000000000000000);
  uint8[] memory p_production_resources_level_3 = new uint8[](1);
  p_production_resources_level_3[0] = 10;
  uint256[] memory p_production_amounts_level_3 = new uint256[](1);
  p_production_amounts_level_3[0] = 170000000000000000;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Production.encode(
    p_production_resources_level_3,
    p_production_amounts_level_3
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 4 ----------------------------- */
function createPVCellFactoryLevel4(IStore store) {
  bytes32[] memory levelKeys = PVCellFactoryLevelKeys(4);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_RequiredDependencyTableId;
  tableIds[3] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(4);
  uint8[] memory p_requiredresources_resources_level_4 = new uint8[](1);
  p_requiredresources_resources_level_4[0] = 2;
  uint256[] memory p_requiredresources_amounts_level_4 = new uint256[](1);
  p_requiredresources_amounts_level_4[0] = 24999999999999997902848;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_4,
    p_requiredresources_amounts_level_4
  );
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredDependency.encode(3, 500000000000000000);
  uint8[] memory p_production_resources_level_4 = new uint8[](1);
  p_production_resources_level_4[0] = 10;
  uint256[] memory p_production_amounts_level_4 = new uint256[](1);
  p_production_amounts_level_4[0] = 230000000000000000;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Production.encode(
    p_production_resources_level_4,
    p_production_amounts_level_4
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 5 ----------------------------- */
function createPVCellFactoryLevel5(IStore store) {
  bytes32[] memory levelKeys = PVCellFactoryLevelKeys(5);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_RequiredDependencyTableId;
  tableIds[3] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(5);
  uint8[] memory p_requiredresources_resources_level_5 = new uint8[](1);
  p_requiredresources_resources_level_5[0] = 2;
  uint256[] memory p_requiredresources_amounts_level_5 = new uint256[](1);
  p_requiredresources_amounts_level_5[0] = 75000000000000002097152;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_5,
    p_requiredresources_amounts_level_5
  );
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredDependency.encode(3, 600000000000000000);
  uint8[] memory p_production_resources_level_5 = new uint8[](1);
  p_production_resources_level_5[0] = 10;
  uint256[] memory p_production_amounts_level_5 = new uint256[](1);
  p_production_amounts_level_5[0] = 300000000000000000;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Production.encode(
    p_production_resources_level_5,
    p_production_amounts_level_5
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 6 ----------------------------- */
function createPVCellFactoryLevel6(IStore store) {
  bytes32[] memory levelKeys = PVCellFactoryLevelKeys(6);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_RequiredDependencyTableId;
  tableIds[3] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(6);
  uint8[] memory p_requiredresources_resources_level_6 = new uint8[](1);
  p_requiredresources_resources_level_6[0] = 2;
  uint256[] memory p_requiredresources_amounts_level_6 = new uint256[](1);
  p_requiredresources_amounts_level_6[0] = 249999999999999995805696;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_6,
    p_requiredresources_amounts_level_6
  );
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredDependency.encode(3, 700000000000000000);
  uint8[] memory p_production_resources_level_6 = new uint8[](1);
  p_production_resources_level_6[0] = 10;
  uint256[] memory p_production_amounts_level_6 = new uint256[](1);
  p_production_amounts_level_6[0] = 400000000000000000;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Production.encode(
    p_production_resources_level_6,
    p_production_amounts_level_6
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 7 ----------------------------- */
function createPVCellFactoryLevel7(IStore store) {
  bytes32[] memory levelKeys = PVCellFactoryLevelKeys(7);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_RequiredDependencyTableId;
  tableIds[3] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(7);
  uint8[] memory p_requiredresources_resources_level_7 = new uint8[](1);
  p_requiredresources_resources_level_7[0] = 2;
  uint256[] memory p_requiredresources_amounts_level_7 = new uint256[](1);
  p_requiredresources_amounts_level_7[0] = 999999999999999983222784;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_7,
    p_requiredresources_amounts_level_7
  );
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredDependency.encode(3, 800000000000000000);
  uint8[] memory p_production_resources_level_7 = new uint8[](1);
  p_production_resources_level_7[0] = 10;
  uint256[] memory p_production_amounts_level_7 = new uint256[](1);
  p_production_amounts_level_7[0] = 550000000000000064;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Production.encode(
    p_production_resources_level_7,
    p_production_amounts_level_7
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant StorageUnitPrototypeId = "StorageUnit";

function StorageUnitKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = StorageUnitPrototypeId;
  return _keyTuple;
}

function StorageUnitLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = StorageUnitPrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function StorageUnitPrototype(IStore store) {
  bytes32[] memory keys = StorageUnitKeys();
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_BlueprintTableId;
  tableIds[1] = P_MaxLevelTableId;

  int32[] memory p_blueprint_value = new int32[](8);
  p_blueprint_value[0] = 0;
  p_blueprint_value[1] = 0;
  p_blueprint_value[2] = 0;
  p_blueprint_value[3] = -1;
  p_blueprint_value[4] = -1;
  p_blueprint_value[5] = 0;
  p_blueprint_value[6] = -1;
  p_blueprint_value[7] = -1;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_Blueprint.encode(p_blueprint_value);
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_MaxLevel.encode(4);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createStorageUnitLevel1(store);
  createStorageUnitLevel2(store);
  createStorageUnitLevel3(store);
  createStorageUnitLevel4(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createStorageUnitLevel1(IStore store) {
  bytes32[] memory levelKeys = StorageUnitLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ListMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(2);
  uint8[] memory p_requiredresources_resources_level_1 = new uint8[](1);
  p_requiredresources_resources_level_1[0] = 1;
  uint256[] memory p_requiredresources_amounts_level_1 = new uint256[](1);
  p_requiredresources_amounts_level_1[0] = 3000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_1,
    p_requiredresources_amounts_level_1
  );
  uint8[] memory p_listmaxresourceupgrades_value_level_1 = new uint8[](6);
  p_listmaxresourceupgrades_value_level_1[0] = 1;
  p_listmaxresourceupgrades_value_level_1[1] = 2;
  p_listmaxresourceupgrades_value_level_1[2] = 3;
  p_listmaxresourceupgrades_value_level_1[3] = 8;
  p_listmaxresourceupgrades_value_level_1[4] = 10;
  p_listmaxresourceupgrades_value_level_1[5] = 9;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_ListMaxResourceUpgrades.encode(
    p_listmaxresourceupgrades_value_level_1
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 2 ----------------------------- */
function createStorageUnitLevel2(IStore store) {
  bytes32[] memory levelKeys = StorageUnitLevelKeys(2);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ListMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(3);
  uint8[] memory p_requiredresources_resources_level_2 = new uint8[](1);
  p_requiredresources_resources_level_2[0] = 1;
  uint256[] memory p_requiredresources_amounts_level_2 = new uint256[](1);
  p_requiredresources_amounts_level_2[0] = 20000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_2,
    p_requiredresources_amounts_level_2
  );
  uint8[] memory p_listmaxresourceupgrades_value_level_2 = new uint8[](10);
  p_listmaxresourceupgrades_value_level_2[0] = 1;
  p_listmaxresourceupgrades_value_level_2[1] = 2;
  p_listmaxresourceupgrades_value_level_2[2] = 3;
  p_listmaxresourceupgrades_value_level_2[3] = 8;
  p_listmaxresourceupgrades_value_level_2[4] = 10;
  p_listmaxresourceupgrades_value_level_2[5] = 9;
  p_listmaxresourceupgrades_value_level_2[6] = 4;
  p_listmaxresourceupgrades_value_level_2[7] = 7;
  p_listmaxresourceupgrades_value_level_2[8] = 5;
  p_listmaxresourceupgrades_value_level_2[9] = 6;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_ListMaxResourceUpgrades.encode(
    p_listmaxresourceupgrades_value_level_2
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 3 ----------------------------- */
function createStorageUnitLevel3(IStore store) {
  bytes32[] memory levelKeys = StorageUnitLevelKeys(3);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ListMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(4);
  uint8[] memory p_requiredresources_resources_level_3 = new uint8[](2);
  p_requiredresources_resources_level_3[0] = 1;
  p_requiredresources_resources_level_3[1] = 12;
  uint256[] memory p_requiredresources_amounts_level_3 = new uint256[](2);
  p_requiredresources_amounts_level_3[0] = 99999999999999991611392;
  p_requiredresources_amounts_level_3[1] = 500000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_3,
    p_requiredresources_amounts_level_3
  );
  uint8[] memory p_listmaxresourceupgrades_value_level_3 = new uint8[](10);
  p_listmaxresourceupgrades_value_level_3[0] = 1;
  p_listmaxresourceupgrades_value_level_3[1] = 2;
  p_listmaxresourceupgrades_value_level_3[2] = 3;
  p_listmaxresourceupgrades_value_level_3[3] = 8;
  p_listmaxresourceupgrades_value_level_3[4] = 10;
  p_listmaxresourceupgrades_value_level_3[5] = 9;
  p_listmaxresourceupgrades_value_level_3[6] = 4;
  p_listmaxresourceupgrades_value_level_3[7] = 7;
  p_listmaxresourceupgrades_value_level_3[8] = 5;
  p_listmaxresourceupgrades_value_level_3[9] = 6;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_ListMaxResourceUpgrades.encode(
    p_listmaxresourceupgrades_value_level_3
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 4 ----------------------------- */
function createStorageUnitLevel4(IStore store) {
  bytes32[] memory levelKeys = StorageUnitLevelKeys(4);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ListMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(5);
  uint8[] memory p_requiredresources_resources_level_4 = new uint8[](2);
  p_requiredresources_resources_level_4[0] = 1;
  p_requiredresources_resources_level_4[1] = 12;
  uint256[] memory p_requiredresources_amounts_level_4 = new uint256[](2);
  p_requiredresources_amounts_level_4[0] = 499999999999999991611392;
  p_requiredresources_amounts_level_4[1] = 100000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_4,
    p_requiredresources_amounts_level_4
  );
  uint8[] memory p_listmaxresourceupgrades_value_level_4 = new uint8[](10);
  p_listmaxresourceupgrades_value_level_4[0] = 1;
  p_listmaxresourceupgrades_value_level_4[1] = 2;
  p_listmaxresourceupgrades_value_level_4[2] = 3;
  p_listmaxresourceupgrades_value_level_4[3] = 8;
  p_listmaxresourceupgrades_value_level_4[4] = 10;
  p_listmaxresourceupgrades_value_level_4[5] = 9;
  p_listmaxresourceupgrades_value_level_4[6] = 4;
  p_listmaxresourceupgrades_value_level_4[7] = 7;
  p_listmaxresourceupgrades_value_level_4[8] = 5;
  p_listmaxresourceupgrades_value_level_4[9] = 6;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_ListMaxResourceUpgrades.encode(
    p_listmaxresourceupgrades_value_level_4
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant StorageUnitIronL1UpgradePrototypeId = "StorageUnitIronL1Upgrade";

function StorageUnitIronL1UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x53746f72616765556e6974000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(1));
  _keyTuple[2] = bytes32(uint256(1));
  return _keyTuple;
}

function StorageUnitIronL1UpgradePrototype(IStore store) {
  bytes32[] memory keys = StorageUnitIronL1UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(2000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant StorageUnitCopperL1UpgradePrototypeId = "StorageUnitCopperL1Upgrade";

function StorageUnitCopperL1UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x53746f72616765556e6974000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(2));
  _keyTuple[2] = bytes32(uint256(1));
  return _keyTuple;
}

function StorageUnitCopperL1UpgradePrototype(IStore store) {
  bytes32[] memory keys = StorageUnitCopperL1UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(2000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant StorageUnitLithiumL1UpgradePrototypeId = "StorageUnitLithiumL1Upgrade";

function StorageUnitLithiumL1UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x53746f72616765556e6974000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(3));
  _keyTuple[2] = bytes32(uint256(1));
  return _keyTuple;
}

function StorageUnitLithiumL1UpgradePrototype(IStore store) {
  bytes32[] memory keys = StorageUnitLithiumL1UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(2000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant StorageUnitIronPlateL1UpgradePrototypeId = "StorageUnitIronPlateL1Upgrade";

function StorageUnitIronPlateL1UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x53746f72616765556e6974000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(8));
  _keyTuple[2] = bytes32(uint256(1));
  return _keyTuple;
}

function StorageUnitIronPlateL1UpgradePrototype(IStore store) {
  bytes32[] memory keys = StorageUnitIronPlateL1UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(1000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant StorageUnitPVCellL1UpgradePrototypeId = "StorageUnitPVCellL1Upgrade";

function StorageUnitPVCellL1UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x53746f72616765556e6974000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(10));
  _keyTuple[2] = bytes32(uint256(1));
  return _keyTuple;
}

function StorageUnitPVCellL1UpgradePrototype(IStore store) {
  bytes32[] memory keys = StorageUnitPVCellL1UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(1000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant StorageUnitAlloyL1UpgradePrototypeId = "StorageUnitAlloyL1Upgrade";

function StorageUnitAlloyL1UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x53746f72616765556e6974000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(9));
  _keyTuple[2] = bytes32(uint256(1));
  return _keyTuple;
}

function StorageUnitAlloyL1UpgradePrototype(IStore store) {
  bytes32[] memory keys = StorageUnitAlloyL1UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(1000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant StorageUnitIronL2UpgradePrototypeId = "StorageUnitIronL2Upgrade";

function StorageUnitIronL2UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x53746f72616765556e6974000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(1));
  _keyTuple[2] = bytes32(uint256(2));
  return _keyTuple;
}

function StorageUnitIronL2UpgradePrototype(IStore store) {
  bytes32[] memory keys = StorageUnitIronL2UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(5000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant StorageUnitCopperL2UpgradePrototypeId = "StorageUnitCopperL2Upgrade";

function StorageUnitCopperL2UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x53746f72616765556e6974000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(2));
  _keyTuple[2] = bytes32(uint256(2));
  return _keyTuple;
}

function StorageUnitCopperL2UpgradePrototype(IStore store) {
  bytes32[] memory keys = StorageUnitCopperL2UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(5000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant StorageUnitLithiumL2UpgradePrototypeId = "StorageUnitLithiumL2Upgrade";

function StorageUnitLithiumL2UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x53746f72616765556e6974000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(3));
  _keyTuple[2] = bytes32(uint256(2));
  return _keyTuple;
}

function StorageUnitLithiumL2UpgradePrototype(IStore store) {
  bytes32[] memory keys = StorageUnitLithiumL2UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(5000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant StorageUnitIronPlateL2UpgradePrototypeId = "StorageUnitIronPlateL2Upgrade";

function StorageUnitIronPlateL2UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x53746f72616765556e6974000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(8));
  _keyTuple[2] = bytes32(uint256(2));
  return _keyTuple;
}

function StorageUnitIronPlateL2UpgradePrototype(IStore store) {
  bytes32[] memory keys = StorageUnitIronPlateL2UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(2500000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant StorageUnitPVCellL2UpgradePrototypeId = "StorageUnitPVCellL2Upgrade";

function StorageUnitPVCellL2UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x53746f72616765556e6974000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(10));
  _keyTuple[2] = bytes32(uint256(2));
  return _keyTuple;
}

function StorageUnitPVCellL2UpgradePrototype(IStore store) {
  bytes32[] memory keys = StorageUnitPVCellL2UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(2500000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant StorageUnitAlloyL2UpgradePrototypeId = "StorageUnitAlloyL2Upgrade";

function StorageUnitAlloyL2UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x53746f72616765556e6974000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(9));
  _keyTuple[2] = bytes32(uint256(2));
  return _keyTuple;
}

function StorageUnitAlloyL2UpgradePrototype(IStore store) {
  bytes32[] memory keys = StorageUnitAlloyL2UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(2500000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant StorageUnitTitaniumL2UpgradePrototypeId = "StorageUnitTitaniumL2Upgrade";

function StorageUnitTitaniumL2UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x53746f72616765556e6974000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(4));
  _keyTuple[2] = bytes32(uint256(2));
  return _keyTuple;
}

function StorageUnitTitaniumL2UpgradePrototype(IStore store) {
  bytes32[] memory keys = StorageUnitTitaniumL2UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(250000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant StorageUnitPlatinumL2UpgradePrototypeId = "StorageUnitPlatinumL2Upgrade";

function StorageUnitPlatinumL2UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x53746f72616765556e6974000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(7));
  _keyTuple[2] = bytes32(uint256(2));
  return _keyTuple;
}

function StorageUnitPlatinumL2UpgradePrototype(IStore store) {
  bytes32[] memory keys = StorageUnitPlatinumL2UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(250000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant StorageUnitIridiumL2UpgradePrototypeId = "StorageUnitIridiumL2Upgrade";

function StorageUnitIridiumL2UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x53746f72616765556e6974000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(5));
  _keyTuple[2] = bytes32(uint256(2));
  return _keyTuple;
}

function StorageUnitIridiumL2UpgradePrototype(IStore store) {
  bytes32[] memory keys = StorageUnitIridiumL2UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(250000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant StorageUnitKimberliteL2UpgradePrototypeId = "StorageUnitKimberliteL2Upgrade";

function StorageUnitKimberliteL2UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x53746f72616765556e6974000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(6));
  _keyTuple[2] = bytes32(uint256(2));
  return _keyTuple;
}

function StorageUnitKimberliteL2UpgradePrototype(IStore store) {
  bytes32[] memory keys = StorageUnitKimberliteL2UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(250000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant StorageUnitIronL3UpgradePrototypeId = "StorageUnitIronL3Upgrade";

function StorageUnitIronL3UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x53746f72616765556e6974000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(1));
  _keyTuple[2] = bytes32(uint256(3));
  return _keyTuple;
}

function StorageUnitIronL3UpgradePrototype(IStore store) {
  bytes32[] memory keys = StorageUnitIronL3UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(15000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant StorageUnitCopperL3UpgradePrototypeId = "StorageUnitCopperL3Upgrade";

function StorageUnitCopperL3UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x53746f72616765556e6974000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(2));
  _keyTuple[2] = bytes32(uint256(3));
  return _keyTuple;
}

function StorageUnitCopperL3UpgradePrototype(IStore store) {
  bytes32[] memory keys = StorageUnitCopperL3UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(15000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant StorageUnitLithiumL3UpgradePrototypeId = "StorageUnitLithiumL3Upgrade";

function StorageUnitLithiumL3UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x53746f72616765556e6974000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(3));
  _keyTuple[2] = bytes32(uint256(3));
  return _keyTuple;
}

function StorageUnitLithiumL3UpgradePrototype(IStore store) {
  bytes32[] memory keys = StorageUnitLithiumL3UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(15000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant StorageUnitIronPlateL3UpgradePrototypeId = "StorageUnitIronPlateL3Upgrade";

function StorageUnitIronPlateL3UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x53746f72616765556e6974000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(8));
  _keyTuple[2] = bytes32(uint256(3));
  return _keyTuple;
}

function StorageUnitIronPlateL3UpgradePrototype(IStore store) {
  bytes32[] memory keys = StorageUnitIronPlateL3UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(5000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant StorageUnitPVCellL3UpgradePrototypeId = "StorageUnitPVCellL3Upgrade";

function StorageUnitPVCellL3UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x53746f72616765556e6974000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(10));
  _keyTuple[2] = bytes32(uint256(3));
  return _keyTuple;
}

function StorageUnitPVCellL3UpgradePrototype(IStore store) {
  bytes32[] memory keys = StorageUnitPVCellL3UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(5000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant StorageUnitAlloyL3UpgradePrototypeId = "StorageUnitAlloyL3Upgrade";

function StorageUnitAlloyL3UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x53746f72616765556e6974000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(9));
  _keyTuple[2] = bytes32(uint256(3));
  return _keyTuple;
}

function StorageUnitAlloyL3UpgradePrototype(IStore store) {
  bytes32[] memory keys = StorageUnitAlloyL3UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(5000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant StorageUnitTitaniumL3UpgradePrototypeId = "StorageUnitTitaniumL3Upgrade";

function StorageUnitTitaniumL3UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x53746f72616765556e6974000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(4));
  _keyTuple[2] = bytes32(uint256(3));
  return _keyTuple;
}

function StorageUnitTitaniumL3UpgradePrototype(IStore store) {
  bytes32[] memory keys = StorageUnitTitaniumL3UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(500000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant StorageUnitPlatinumL3UpgradePrototypeId = "StorageUnitPlatinumL3Upgrade";

function StorageUnitPlatinumL3UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x53746f72616765556e6974000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(7));
  _keyTuple[2] = bytes32(uint256(3));
  return _keyTuple;
}

function StorageUnitPlatinumL3UpgradePrototype(IStore store) {
  bytes32[] memory keys = StorageUnitPlatinumL3UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(500000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant StorageUnitIridiumL3UpgradePrototypeId = "StorageUnitIridiumL3Upgrade";

function StorageUnitIridiumL3UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x53746f72616765556e6974000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(5));
  _keyTuple[2] = bytes32(uint256(3));
  return _keyTuple;
}

function StorageUnitIridiumL3UpgradePrototype(IStore store) {
  bytes32[] memory keys = StorageUnitIridiumL3UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(500000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant StorageUnitKimberliteL3UpgradePrototypeId = "StorageUnitKimberliteL3Upgrade";

function StorageUnitKimberliteL3UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x53746f72616765556e6974000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(6));
  _keyTuple[2] = bytes32(uint256(3));
  return _keyTuple;
}

function StorageUnitKimberliteL3UpgradePrototype(IStore store) {
  bytes32[] memory keys = StorageUnitKimberliteL3UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(500000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant StorageUnitIronL4UpgradePrototypeId = "StorageUnitIronL4Upgrade";

function StorageUnitIronL4UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x53746f72616765556e6974000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(1));
  _keyTuple[2] = bytes32(uint256(4));
  return _keyTuple;
}

function StorageUnitIronL4UpgradePrototype(IStore store) {
  bytes32[] memory keys = StorageUnitIronL4UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(24999999999999997902848);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant StorageUnitCopperL4UpgradePrototypeId = "StorageUnitCopperL4Upgrade";

function StorageUnitCopperL4UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x53746f72616765556e6974000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(2));
  _keyTuple[2] = bytes32(uint256(4));
  return _keyTuple;
}

function StorageUnitCopperL4UpgradePrototype(IStore store) {
  bytes32[] memory keys = StorageUnitCopperL4UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(24999999999999997902848);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant StorageUnitLithiumL4UpgradePrototypeId = "StorageUnitLithiumL4Upgrade";

function StorageUnitLithiumL4UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x53746f72616765556e6974000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(3));
  _keyTuple[2] = bytes32(uint256(4));
  return _keyTuple;
}

function StorageUnitLithiumL4UpgradePrototype(IStore store) {
  bytes32[] memory keys = StorageUnitLithiumL4UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(24999999999999997902848);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant StorageUnitIronPlateL4UpgradePrototypeId = "StorageUnitIronPlateL4Upgrade";

function StorageUnitIronPlateL4UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x53746f72616765556e6974000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(8));
  _keyTuple[2] = bytes32(uint256(4));
  return _keyTuple;
}

function StorageUnitIronPlateL4UpgradePrototype(IStore store) {
  bytes32[] memory keys = StorageUnitIronPlateL4UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(10000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant StorageUnitPVCellL4UpgradePrototypeId = "StorageUnitPVCellL4Upgrade";

function StorageUnitPVCellL4UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x53746f72616765556e6974000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(10));
  _keyTuple[2] = bytes32(uint256(4));
  return _keyTuple;
}

function StorageUnitPVCellL4UpgradePrototype(IStore store) {
  bytes32[] memory keys = StorageUnitPVCellL4UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(10000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant StorageUnitAlloyL4UpgradePrototypeId = "StorageUnitAlloyL4Upgrade";

function StorageUnitAlloyL4UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x53746f72616765556e6974000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(9));
  _keyTuple[2] = bytes32(uint256(4));
  return _keyTuple;
}

function StorageUnitAlloyL4UpgradePrototype(IStore store) {
  bytes32[] memory keys = StorageUnitAlloyL4UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(10000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant StorageUnitTitaniumL4UpgradePrototypeId = "StorageUnitTitaniumL4Upgrade";

function StorageUnitTitaniumL4UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x53746f72616765556e6974000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(4));
  _keyTuple[2] = bytes32(uint256(4));
  return _keyTuple;
}

function StorageUnitTitaniumL4UpgradePrototype(IStore store) {
  bytes32[] memory keys = StorageUnitTitaniumL4UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(1000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant StorageUnitPlatinumL4UpgradePrototypeId = "StorageUnitPlatinumL4Upgrade";

function StorageUnitPlatinumL4UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x53746f72616765556e6974000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(7));
  _keyTuple[2] = bytes32(uint256(4));
  return _keyTuple;
}

function StorageUnitPlatinumL4UpgradePrototype(IStore store) {
  bytes32[] memory keys = StorageUnitPlatinumL4UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(1000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant StorageUnitIridiumL4UpgradePrototypeId = "StorageUnitIridiumL4Upgrade";

function StorageUnitIridiumL4UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x53746f72616765556e6974000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(5));
  _keyTuple[2] = bytes32(uint256(4));
  return _keyTuple;
}

function StorageUnitIridiumL4UpgradePrototype(IStore store) {
  bytes32[] memory keys = StorageUnitIridiumL4UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(1000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant StorageUnitKimberliteL4UpgradePrototypeId = "StorageUnitKimberliteL4Upgrade";

function StorageUnitKimberliteL4UpgradeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](3);
  _keyTuple[0] = 0x53746f72616765556e6974000000000000000000000000000000000000000000;
  _keyTuple[1] = bytes32(uint256(6));
  _keyTuple[2] = bytes32(uint256(4));
  return _keyTuple;
}

function StorageUnitKimberliteL4UpgradePrototype(IStore store) {
  bytes32[] memory keys = StorageUnitKimberliteL4UpgradeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ByLevelMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ByLevelMaxResourceUpgrades.encode(1000000000000000000000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant SolarPanelPrototypeId = "SolarPanel";

function SolarPanelKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = SolarPanelPrototypeId;
  return _keyTuple;
}

function SolarPanelLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = SolarPanelPrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function SolarPanelPrototype(IStore store) {
  bytes32[] memory keys = SolarPanelKeys();
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_BlueprintTableId;
  tableIds[1] = P_MaxLevelTableId;

  int32[] memory p_blueprint_value = new int32[](8);
  p_blueprint_value[0] = 0;
  p_blueprint_value[1] = 0;
  p_blueprint_value[2] = 0;
  p_blueprint_value[3] = -1;
  p_blueprint_value[4] = -1;
  p_blueprint_value[5] = 0;
  p_blueprint_value[6] = -1;
  p_blueprint_value[7] = -1;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_Blueprint.encode(p_blueprint_value);
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_MaxLevel.encode(3);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createSolarPanelLevel1(store);
  createSolarPanelLevel2(store);
  createSolarPanelLevel3(store);
  createSolarPanelLevel4(store);
  createSolarPanelLevel5(store);
  createSolarPanelLevel6(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createSolarPanelLevel1(IStore store) {
  bytes32[] memory levelKeys = SolarPanelLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(2);
  uint8[] memory p_requiredresources_resources_level_1 = new uint8[](1);
  p_requiredresources_resources_level_1[0] = 10;
  uint256[] memory p_requiredresources_amounts_level_1 = new uint256[](1);
  p_requiredresources_amounts_level_1[0] = 200000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_1,
    p_requiredresources_amounts_level_1
  );
  uint8[] memory p_production_resources_level_1 = new uint8[](1);
  p_production_resources_level_1[0] = 12;
  uint256[] memory p_production_amounts_level_1 = new uint256[](1);
  p_production_amounts_level_1[0] = 300000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_1,
    p_production_amounts_level_1
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 2 ----------------------------- */
function createSolarPanelLevel2(IStore store) {
  bytes32[] memory levelKeys = SolarPanelLevelKeys(2);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(3);
  uint8[] memory p_requiredresources_resources_level_2 = new uint8[](1);
  p_requiredresources_resources_level_2[0] = 10;
  uint256[] memory p_requiredresources_amounts_level_2 = new uint256[](1);
  p_requiredresources_amounts_level_2[0] = 4000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_2,
    p_requiredresources_amounts_level_2
  );
  uint8[] memory p_production_resources_level_2 = new uint8[](1);
  p_production_resources_level_2[0] = 12;
  uint256[] memory p_production_amounts_level_2 = new uint256[](1);
  p_production_amounts_level_2[0] = 600000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_2,
    p_production_amounts_level_2
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 3 ----------------------------- */
function createSolarPanelLevel3(IStore store) {
  bytes32[] memory levelKeys = SolarPanelLevelKeys(3);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(4);
  uint8[] memory p_requiredresources_resources_level_3 = new uint8[](1);
  p_requiredresources_resources_level_3[0] = 10;
  uint256[] memory p_requiredresources_amounts_level_3 = new uint256[](1);
  p_requiredresources_amounts_level_3[0] = 10000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_3,
    p_requiredresources_amounts_level_3
  );
  uint8[] memory p_production_resources_level_3 = new uint8[](1);
  p_production_resources_level_3[0] = 12;
  uint256[] memory p_production_amounts_level_3 = new uint256[](1);
  p_production_amounts_level_3[0] = 800000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_3,
    p_production_amounts_level_3
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 4 ----------------------------- */
function createSolarPanelLevel4(IStore store) {
  bytes32[] memory levelKeys = SolarPanelLevelKeys(4);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(5);
  uint8[] memory p_requiredresources_resources_level_4 = new uint8[](1);
  p_requiredresources_resources_level_4[0] = 10;
  uint256[] memory p_requiredresources_amounts_level_4 = new uint256[](1);
  p_requiredresources_amounts_level_4[0] = 24999999999999997902848;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_4,
    p_requiredresources_amounts_level_4
  );
  uint8[] memory p_production_resources_level_4 = new uint8[](1);
  p_production_resources_level_4[0] = 12;
  uint256[] memory p_production_amounts_level_4 = new uint256[](1);
  p_production_amounts_level_4[0] = 800000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_4,
    p_production_amounts_level_4
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 5 ----------------------------- */
function createSolarPanelLevel5(IStore store) {
  bytes32[] memory levelKeys = SolarPanelLevelKeys(5);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(6);
  uint8[] memory p_requiredresources_resources_level_5 = new uint8[](1);
  p_requiredresources_resources_level_5[0] = 10;
  uint256[] memory p_requiredresources_amounts_level_5 = new uint256[](1);
  p_requiredresources_amounts_level_5[0] = 75000000000000002097152;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_5,
    p_requiredresources_amounts_level_5
  );
  uint8[] memory p_production_resources_level_5 = new uint8[](1);
  p_production_resources_level_5[0] = 12;
  uint256[] memory p_production_amounts_level_5 = new uint256[](1);
  p_production_amounts_level_5[0] = 1000000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_5,
    p_production_amounts_level_5
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 6 ----------------------------- */
function createSolarPanelLevel6(IStore store) {
  bytes32[] memory levelKeys = SolarPanelLevelKeys(6);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(7);
  uint8[] memory p_requiredresources_resources_level_6 = new uint8[](1);
  p_requiredresources_resources_level_6[0] = 10;
  uint256[] memory p_requiredresources_amounts_level_6 = new uint256[](1);
  p_requiredresources_amounts_level_6[0] = 175000000000000010485760;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_6,
    p_requiredresources_amounts_level_6
  );
  uint8[] memory p_production_resources_level_6 = new uint8[](1);
  p_production_resources_level_6[0] = 12;
  uint256[] memory p_production_amounts_level_6 = new uint256[](1);
  p_production_amounts_level_6[0] = 1200000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_6,
    p_production_amounts_level_6
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant GaragePrototypeId = "Garage";

function GarageKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = GaragePrototypeId;
  return _keyTuple;
}

function GarageLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = GaragePrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function GaragePrototype(IStore store) {
  bytes32[] memory keys = GarageKeys();
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_BlueprintTableId;
  tableIds[1] = P_MaxLevelTableId;

  int32[] memory p_blueprint_value = new int32[](8);
  p_blueprint_value[0] = 0;
  p_blueprint_value[1] = 0;
  p_blueprint_value[2] = 0;
  p_blueprint_value[3] = -1;
  p_blueprint_value[4] = -1;
  p_blueprint_value[5] = 0;
  p_blueprint_value[6] = -1;
  p_blueprint_value[7] = -1;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_Blueprint.encode(p_blueprint_value);
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_MaxLevel.encode(5);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createGarageLevel1(store);
  createGarageLevel2(store);
  createGarageLevel3(store);
  createGarageLevel4(store);
  createGarageLevel5(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createGarageLevel1(IStore store) {
  bytes32[] memory levelKeys = GarageLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(1);
  uint8[] memory p_requiredresources_resources_level_1 = new uint8[](1);
  p_requiredresources_resources_level_1[0] = 1;
  uint256[] memory p_requiredresources_amounts_level_1 = new uint256[](1);
  p_requiredresources_amounts_level_1[0] = 200000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_1,
    p_requiredresources_amounts_level_1
  );
  uint8[] memory p_production_resources_level_1 = new uint8[](1);
  p_production_resources_level_1[0] = 13;
  uint256[] memory p_production_amounts_level_1 = new uint256[](1);
  p_production_amounts_level_1[0] = 40;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_1,
    p_production_amounts_level_1
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 2 ----------------------------- */
function createGarageLevel2(IStore store) {
  bytes32[] memory levelKeys = GarageLevelKeys(2);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(2);
  uint8[] memory p_requiredresources_resources_level_2 = new uint8[](1);
  p_requiredresources_resources_level_2[0] = 3;
  uint256[] memory p_requiredresources_amounts_level_2 = new uint256[](1);
  p_requiredresources_amounts_level_2[0] = 1500000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_2,
    p_requiredresources_amounts_level_2
  );
  uint8[] memory p_production_resources_level_2 = new uint8[](1);
  p_production_resources_level_2[0] = 13;
  uint256[] memory p_production_amounts_level_2 = new uint256[](1);
  p_production_amounts_level_2[0] = 60;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_2,
    p_production_amounts_level_2
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 3 ----------------------------- */
function createGarageLevel3(IStore store) {
  bytes32[] memory levelKeys = GarageLevelKeys(3);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(3);
  uint8[] memory p_requiredresources_resources_level_3 = new uint8[](1);
  p_requiredresources_resources_level_3[0] = 3;
  uint256[] memory p_requiredresources_amounts_level_3 = new uint256[](1);
  p_requiredresources_amounts_level_3[0] = 5000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_3,
    p_requiredresources_amounts_level_3
  );
  uint8[] memory p_production_resources_level_3 = new uint8[](1);
  p_production_resources_level_3[0] = 13;
  uint256[] memory p_production_amounts_level_3 = new uint256[](1);
  p_production_amounts_level_3[0] = 80;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_3,
    p_production_amounts_level_3
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 4 ----------------------------- */
function createGarageLevel4(IStore store) {
  bytes32[] memory levelKeys = GarageLevelKeys(4);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(4);
  uint8[] memory p_requiredresources_resources_level_4 = new uint8[](1);
  p_requiredresources_resources_level_4[0] = 3;
  uint256[] memory p_requiredresources_amounts_level_4 = new uint256[](1);
  p_requiredresources_amounts_level_4[0] = 15000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_4,
    p_requiredresources_amounts_level_4
  );
  uint8[] memory p_production_resources_level_4 = new uint8[](1);
  p_production_resources_level_4[0] = 13;
  uint256[] memory p_production_amounts_level_4 = new uint256[](1);
  p_production_amounts_level_4[0] = 100;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_4,
    p_production_amounts_level_4
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 5 ----------------------------- */
function createGarageLevel5(IStore store) {
  bytes32[] memory levelKeys = GarageLevelKeys(5);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(5);
  uint8[] memory p_requiredresources_resources_level_5 = new uint8[](1);
  p_requiredresources_resources_level_5[0] = 3;
  uint256[] memory p_requiredresources_amounts_level_5 = new uint256[](1);
  p_requiredresources_amounts_level_5[0] = 49999999999999995805696;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_5,
    p_requiredresources_amounts_level_5
  );
  uint8[] memory p_production_resources_level_5 = new uint8[](1);
  p_production_resources_level_5[0] = 13;
  uint256[] memory p_production_amounts_level_5 = new uint256[](1);
  p_production_amounts_level_5[0] = 120;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_5,
    p_production_amounts_level_5
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant HangarPrototypeId = "Hangar";

function HangarKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = HangarPrototypeId;
  return _keyTuple;
}

function HangarLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = HangarPrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function HangarPrototype(IStore store) {
  bytes32[] memory keys = HangarKeys();
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_BlueprintTableId;
  tableIds[1] = P_MaxLevelTableId;

  int32[] memory p_blueprint_value = new int32[](32);
  p_blueprint_value[0] = 0;
  p_blueprint_value[1] = 0;
  p_blueprint_value[2] = 0;
  p_blueprint_value[3] = -1;
  p_blueprint_value[4] = 0;
  p_blueprint_value[5] = -2;
  p_blueprint_value[6] = 0;
  p_blueprint_value[7] = -3;
  p_blueprint_value[8] = -1;
  p_blueprint_value[9] = 0;
  p_blueprint_value[10] = -1;
  p_blueprint_value[11] = -1;
  p_blueprint_value[12] = -1;
  p_blueprint_value[13] = -2;
  p_blueprint_value[14] = -1;
  p_blueprint_value[15] = -3;
  p_blueprint_value[16] = -2;
  p_blueprint_value[17] = 0;
  p_blueprint_value[18] = -2;
  p_blueprint_value[19] = -1;
  p_blueprint_value[20] = -2;
  p_blueprint_value[21] = -2;
  p_blueprint_value[22] = -2;
  p_blueprint_value[23] = -3;
  p_blueprint_value[24] = -3;
  p_blueprint_value[25] = 0;
  p_blueprint_value[26] = -3;
  p_blueprint_value[27] = -1;
  p_blueprint_value[28] = -3;
  p_blueprint_value[29] = -2;
  p_blueprint_value[30] = -3;
  p_blueprint_value[31] = -3;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_Blueprint.encode(p_blueprint_value);
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_MaxLevel.encode(5);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createHangarLevel1(store);
  createHangarLevel2(store);
  createHangarLevel3(store);
  createHangarLevel4(store);
  createHangarLevel5(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createHangarLevel1(IStore store) {
  bytes32[] memory levelKeys = HangarLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(3);
  uint8[] memory p_requiredresources_resources_level_1 = new uint8[](2);
  p_requiredresources_resources_level_1[0] = 3;
  p_requiredresources_resources_level_1[1] = 12;
  uint256[] memory p_requiredresources_amounts_level_1 = new uint256[](2);
  p_requiredresources_amounts_level_1[0] = 5000000000000000000000;
  p_requiredresources_amounts_level_1[1] = 100000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_1,
    p_requiredresources_amounts_level_1
  );
  uint8[] memory p_production_resources_level_1 = new uint8[](1);
  p_production_resources_level_1[0] = 13;
  uint256[] memory p_production_amounts_level_1 = new uint256[](1);
  p_production_amounts_level_1[0] = 240;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_1,
    p_production_amounts_level_1
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 2 ----------------------------- */
function createHangarLevel2(IStore store) {
  bytes32[] memory levelKeys = HangarLevelKeys(2);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(4);
  uint8[] memory p_requiredresources_resources_level_2 = new uint8[](2);
  p_requiredresources_resources_level_2[0] = 3;
  p_requiredresources_resources_level_2[1] = 12;
  uint256[] memory p_requiredresources_amounts_level_2 = new uint256[](2);
  p_requiredresources_amounts_level_2[0] = 15000000000000000000000;
  p_requiredresources_amounts_level_2[1] = 200000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_2,
    p_requiredresources_amounts_level_2
  );
  uint8[] memory p_production_resources_level_2 = new uint8[](1);
  p_production_resources_level_2[0] = 13;
  uint256[] memory p_production_amounts_level_2 = new uint256[](1);
  p_production_amounts_level_2[0] = 370;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_2,
    p_production_amounts_level_2
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 3 ----------------------------- */
function createHangarLevel3(IStore store) {
  bytes32[] memory levelKeys = HangarLevelKeys(3);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(6);
  uint8[] memory p_requiredresources_resources_level_3 = new uint8[](2);
  p_requiredresources_resources_level_3[0] = 3;
  p_requiredresources_resources_level_3[1] = 12;
  uint256[] memory p_requiredresources_amounts_level_3 = new uint256[](2);
  p_requiredresources_amounts_level_3[0] = 49999999999999995805696;
  p_requiredresources_amounts_level_3[1] = 300000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_3,
    p_requiredresources_amounts_level_3
  );
  uint8[] memory p_production_resources_level_3 = new uint8[](1);
  p_production_resources_level_3[0] = 13;
  uint256[] memory p_production_amounts_level_3 = new uint256[](1);
  p_production_amounts_level_3[0] = 500;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_3,
    p_production_amounts_level_3
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 4 ----------------------------- */
function createHangarLevel4(IStore store) {
  bytes32[] memory levelKeys = HangarLevelKeys(4);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(7);
  uint8[] memory p_requiredresources_resources_level_4 = new uint8[](2);
  p_requiredresources_resources_level_4[0] = 3;
  p_requiredresources_resources_level_4[1] = 12;
  uint256[] memory p_requiredresources_amounts_level_4 = new uint256[](2);
  p_requiredresources_amounts_level_4[0] = 150000000000000004194304;
  p_requiredresources_amounts_level_4[1] = 400000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_4,
    p_requiredresources_amounts_level_4
  );
  uint8[] memory p_production_resources_level_4 = new uint8[](1);
  p_production_resources_level_4[0] = 13;
  uint256[] memory p_production_amounts_level_4 = new uint256[](1);
  p_production_amounts_level_4[0] = 640;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_4,
    p_production_amounts_level_4
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 5 ----------------------------- */
function createHangarLevel5(IStore store) {
  bytes32[] memory levelKeys = HangarLevelKeys(5);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(8);
  uint8[] memory p_requiredresources_resources_level_5 = new uint8[](2);
  p_requiredresources_resources_level_5[0] = 3;
  p_requiredresources_resources_level_5[1] = 12;
  uint256[] memory p_requiredresources_amounts_level_5 = new uint256[](2);
  p_requiredresources_amounts_level_5[0] = 150000000000000004194304;
  p_requiredresources_amounts_level_5[1] = 500000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_5,
    p_requiredresources_amounts_level_5
  );
  uint8[] memory p_production_resources_level_5 = new uint8[](1);
  p_production_resources_level_5[0] = 13;
  uint256[] memory p_production_amounts_level_5 = new uint256[](1);
  p_production_amounts_level_5[0] = 800;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_5,
    p_production_amounts_level_5
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant DroneFactoryPrototypeId = "DroneFactory";

function DroneFactoryKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = DroneFactoryPrototypeId;
  return _keyTuple;
}

function DroneFactoryLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = DroneFactoryPrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function DroneFactoryPrototype(IStore store) {
  bytes32[] memory keys = DroneFactoryKeys();
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_BlueprintTableId;
  tableIds[1] = P_MaxLevelTableId;

  int32[] memory p_blueprint_value = new int32[](18);
  p_blueprint_value[0] = 0;
  p_blueprint_value[1] = 0;
  p_blueprint_value[2] = 0;
  p_blueprint_value[3] = -1;
  p_blueprint_value[4] = 0;
  p_blueprint_value[5] = -2;
  p_blueprint_value[6] = -1;
  p_blueprint_value[7] = 0;
  p_blueprint_value[8] = -1;
  p_blueprint_value[9] = -1;
  p_blueprint_value[10] = -1;
  p_blueprint_value[11] = -2;
  p_blueprint_value[12] = -2;
  p_blueprint_value[13] = 0;
  p_blueprint_value[14] = -2;
  p_blueprint_value[15] = -1;
  p_blueprint_value[16] = -2;
  p_blueprint_value[17] = -2;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_Blueprint.encode(p_blueprint_value);
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_MaxLevel.encode(6);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createDroneFactoryLevel1(store);
  createDroneFactoryLevel2(store);
  createDroneFactoryLevel3(store);
  createDroneFactoryLevel4(store);
  createDroneFactoryLevel5(store);
  createDroneFactoryLevel6(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createDroneFactoryLevel1(IStore store) {
  bytes32[] memory levelKeys = DroneFactoryLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_UnitProdMultiplierTableId;
  tableIds[3] = P_UnitProdTypesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(2);
  uint8[] memory p_requiredresources_resources_level_1 = new uint8[](2);
  p_requiredresources_resources_level_1[0] = 8;
  p_requiredresources_resources_level_1[1] = 12;
  uint256[] memory p_requiredresources_amounts_level_1 = new uint256[](2);
  p_requiredresources_amounts_level_1[0] = 2000000000000000000000;
  p_requiredresources_amounts_level_1[1] = 100000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_1,
    p_requiredresources_amounts_level_1
  );
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_UnitProdMultiplier.encode(100);
  bytes32[] memory p_unitprodtypes_value_level_1 = new bytes32[](2);
  p_unitprodtypes_value_level_1[0] = 0x416e76696c44726f6e6500000000000000000000000000000000000000000000;
  p_unitprodtypes_value_level_1[1] = 0x48616d6d657244726f6e65000000000000000000000000000000000000000000;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_UnitProdTypes.encode(p_unitprodtypes_value_level_1);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 2 ----------------------------- */
function createDroneFactoryLevel2(IStore store) {
  bytes32[] memory levelKeys = DroneFactoryLevelKeys(2);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_UnitProdMultiplierTableId;
  tableIds[3] = P_UnitProdTypesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(3);
  uint8[] memory p_requiredresources_resources_level_2 = new uint8[](2);
  p_requiredresources_resources_level_2[0] = 8;
  p_requiredresources_resources_level_2[1] = 12;
  uint256[] memory p_requiredresources_amounts_level_2 = new uint256[](2);
  p_requiredresources_amounts_level_2[0] = 10000000000000000000000;
  p_requiredresources_amounts_level_2[1] = 150000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_2,
    p_requiredresources_amounts_level_2
  );
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_UnitProdMultiplier.encode(100);
  bytes32[] memory p_unitprodtypes_value_level_2 = new bytes32[](3);
  p_unitprodtypes_value_level_2[0] = 0x416e76696c44726f6e6500000000000000000000000000000000000000000000;
  p_unitprodtypes_value_level_2[1] = 0x48616d6d657244726f6e65000000000000000000000000000000000000000000;
  p_unitprodtypes_value_level_2[2] = 0x416567697344726f6e6500000000000000000000000000000000000000000000;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_UnitProdTypes.encode(p_unitprodtypes_value_level_2);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 3 ----------------------------- */
function createDroneFactoryLevel3(IStore store) {
  bytes32[] memory levelKeys = DroneFactoryLevelKeys(3);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_UnitProdMultiplierTableId;
  tableIds[3] = P_UnitProdTypesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(4);
  uint8[] memory p_requiredresources_resources_level_3 = new uint8[](2);
  p_requiredresources_resources_level_3[0] = 8;
  p_requiredresources_resources_level_3[1] = 12;
  uint256[] memory p_requiredresources_amounts_level_3 = new uint256[](2);
  p_requiredresources_amounts_level_3[0] = 24999999999999997902848;
  p_requiredresources_amounts_level_3[1] = 200000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_3,
    p_requiredresources_amounts_level_3
  );
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_UnitProdMultiplier.encode(100);
  bytes32[] memory p_unitprodtypes_value_level_3 = new bytes32[](4);
  p_unitprodtypes_value_level_3[0] = 0x416e76696c44726f6e6500000000000000000000000000000000000000000000;
  p_unitprodtypes_value_level_3[1] = 0x48616d6d657244726f6e65000000000000000000000000000000000000000000;
  p_unitprodtypes_value_level_3[2] = 0x416567697344726f6e6500000000000000000000000000000000000000000000;
  p_unitprodtypes_value_level_3[3] = 0x5374696e67657244726f6e650000000000000000000000000000000000000000;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_UnitProdTypes.encode(p_unitprodtypes_value_level_3);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 4 ----------------------------- */
function createDroneFactoryLevel4(IStore store) {
  bytes32[] memory levelKeys = DroneFactoryLevelKeys(4);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_UnitProdMultiplierTableId;
  tableIds[3] = P_UnitProdTypesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(5);
  uint8[] memory p_requiredresources_resources_level_4 = new uint8[](2);
  p_requiredresources_resources_level_4[0] = 8;
  p_requiredresources_resources_level_4[1] = 12;
  uint256[] memory p_requiredresources_amounts_level_4 = new uint256[](2);
  p_requiredresources_amounts_level_4[0] = 99999999999999991611392;
  p_requiredresources_amounts_level_4[1] = 300000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_4,
    p_requiredresources_amounts_level_4
  );
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_UnitProdMultiplier.encode(150);
  bytes32[] memory p_unitprodtypes_value_level_4 = new bytes32[](4);
  p_unitprodtypes_value_level_4[0] = 0x416e76696c44726f6e6500000000000000000000000000000000000000000000;
  p_unitprodtypes_value_level_4[1] = 0x48616d6d657244726f6e65000000000000000000000000000000000000000000;
  p_unitprodtypes_value_level_4[2] = 0x416567697344726f6e6500000000000000000000000000000000000000000000;
  p_unitprodtypes_value_level_4[3] = 0x5374696e67657244726f6e650000000000000000000000000000000000000000;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_UnitProdTypes.encode(p_unitprodtypes_value_level_4);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 5 ----------------------------- */
function createDroneFactoryLevel5(IStore store) {
  bytes32[] memory levelKeys = DroneFactoryLevelKeys(5);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_UnitProdMultiplierTableId;
  tableIds[3] = P_UnitProdTypesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(6);
  uint8[] memory p_requiredresources_resources_level_5 = new uint8[](2);
  p_requiredresources_resources_level_5[0] = 8;
  p_requiredresources_resources_level_5[1] = 12;
  uint256[] memory p_requiredresources_amounts_level_5 = new uint256[](2);
  p_requiredresources_amounts_level_5[0] = 249999999999999995805696;
  p_requiredresources_amounts_level_5[1] = 400000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_5,
    p_requiredresources_amounts_level_5
  );
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_UnitProdMultiplier.encode(200);
  bytes32[] memory p_unitprodtypes_value_level_5 = new bytes32[](4);
  p_unitprodtypes_value_level_5[0] = 0x416e76696c44726f6e6500000000000000000000000000000000000000000000;
  p_unitprodtypes_value_level_5[1] = 0x48616d6d657244726f6e65000000000000000000000000000000000000000000;
  p_unitprodtypes_value_level_5[2] = 0x416567697344726f6e6500000000000000000000000000000000000000000000;
  p_unitprodtypes_value_level_5[3] = 0x5374696e67657244726f6e650000000000000000000000000000000000000000;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_UnitProdTypes.encode(p_unitprodtypes_value_level_5);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 6 ----------------------------- */
function createDroneFactoryLevel6(IStore store) {
  bytes32[] memory levelKeys = DroneFactoryLevelKeys(6);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_UnitProdMultiplierTableId;
  tableIds[3] = P_UnitProdTypesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(7);
  uint8[] memory p_requiredresources_resources_level_6 = new uint8[](2);
  p_requiredresources_resources_level_6[0] = 8;
  p_requiredresources_resources_level_6[1] = 12;
  uint256[] memory p_requiredresources_amounts_level_6 = new uint256[](2);
  p_requiredresources_amounts_level_6[0] = 999999999999999983222784;
  p_requiredresources_amounts_level_6[1] = 500000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_6,
    p_requiredresources_amounts_level_6
  );
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_UnitProdMultiplier.encode(300);
  bytes32[] memory p_unitprodtypes_value_level_6 = new bytes32[](4);
  p_unitprodtypes_value_level_6[0] = 0x416e76696c44726f6e6500000000000000000000000000000000000000000000;
  p_unitprodtypes_value_level_6[1] = 0x48616d6d657244726f6e65000000000000000000000000000000000000000000;
  p_unitprodtypes_value_level_6[2] = 0x416567697344726f6e6500000000000000000000000000000000000000000000;
  p_unitprodtypes_value_level_6[3] = 0x5374696e67657244726f6e650000000000000000000000000000000000000000;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_UnitProdTypes.encode(p_unitprodtypes_value_level_6);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant WorkshopPrototypeId = "Workshop";

function WorkshopKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = WorkshopPrototypeId;
  return _keyTuple;
}

function WorkshopLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = WorkshopPrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function WorkshopPrototype(IStore store) {
  bytes32[] memory keys = WorkshopKeys();
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_BlueprintTableId;
  tableIds[1] = P_MaxLevelTableId;

  int32[] memory p_blueprint_value = new int32[](8);
  p_blueprint_value[0] = 0;
  p_blueprint_value[1] = 0;
  p_blueprint_value[2] = 0;
  p_blueprint_value[3] = -1;
  p_blueprint_value[4] = -1;
  p_blueprint_value[5] = 0;
  p_blueprint_value[6] = -1;
  p_blueprint_value[7] = -1;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_Blueprint.encode(p_blueprint_value);
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_MaxLevel.encode(4);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createWorkshopLevel1(store);
  createWorkshopLevel2(store);
  createWorkshopLevel3(store);
  createWorkshopLevel4(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createWorkshopLevel1(IStore store) {
  bytes32[] memory levelKeys = WorkshopLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_UnitProdMultiplierTableId;
  tableIds[3] = P_UnitProdTypesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(1);
  uint8[] memory p_requiredresources_resources_level_1 = new uint8[](1);
  p_requiredresources_resources_level_1[0] = 8;
  uint256[] memory p_requiredresources_amounts_level_1 = new uint256[](1);
  p_requiredresources_amounts_level_1[0] = 250000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_1,
    p_requiredresources_amounts_level_1
  );
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_UnitProdMultiplier.encode(100);
  bytes32[] memory p_unitprodtypes_value_level_1 = new bytes32[](2);
  p_unitprodtypes_value_level_1[0] = 0x54726964656e744d6172696e6500000000000000000000000000000000000000;
  p_unitprodtypes_value_level_1[1] = 0x4d696e7574656d616e4d6172696e650000000000000000000000000000000000;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_UnitProdTypes.encode(p_unitprodtypes_value_level_1);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 2 ----------------------------- */
function createWorkshopLevel2(IStore store) {
  bytes32[] memory levelKeys = WorkshopLevelKeys(2);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_UnitProdMultiplierTableId;
  tableIds[3] = P_UnitProdTypesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(2);
  uint8[] memory p_requiredresources_resources_level_2 = new uint8[](1);
  p_requiredresources_resources_level_2[0] = 8;
  uint256[] memory p_requiredresources_amounts_level_2 = new uint256[](1);
  p_requiredresources_amounts_level_2[0] = 5000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_2,
    p_requiredresources_amounts_level_2
  );
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_UnitProdMultiplier.encode(150);
  bytes32[] memory p_unitprodtypes_value_level_2 = new bytes32[](2);
  p_unitprodtypes_value_level_2[0] = 0x54726964656e744d6172696e6500000000000000000000000000000000000000;
  p_unitprodtypes_value_level_2[1] = 0x4d696e7574656d616e4d6172696e650000000000000000000000000000000000;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_UnitProdTypes.encode(p_unitprodtypes_value_level_2);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 3 ----------------------------- */
function createWorkshopLevel3(IStore store) {
  bytes32[] memory levelKeys = WorkshopLevelKeys(3);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_UnitProdMultiplierTableId;
  tableIds[3] = P_UnitProdTypesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(3);
  uint8[] memory p_requiredresources_resources_level_3 = new uint8[](2);
  p_requiredresources_resources_level_3[0] = 8;
  p_requiredresources_resources_level_3[1] = 12;
  uint256[] memory p_requiredresources_amounts_level_3 = new uint256[](2);
  p_requiredresources_amounts_level_3[0] = 24999999999999997902848;
  p_requiredresources_amounts_level_3[1] = 100000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_3,
    p_requiredresources_amounts_level_3
  );
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_UnitProdMultiplier.encode(200);
  bytes32[] memory p_unitprodtypes_value_level_3 = new bytes32[](2);
  p_unitprodtypes_value_level_3[0] = 0x54726964656e744d6172696e6500000000000000000000000000000000000000;
  p_unitprodtypes_value_level_3[1] = 0x4d696e7574656d616e4d6172696e650000000000000000000000000000000000;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_UnitProdTypes.encode(p_unitprodtypes_value_level_3);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 4 ----------------------------- */
function createWorkshopLevel4(IStore store) {
  bytes32[] memory levelKeys = WorkshopLevelKeys(4);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_UnitProdMultiplierTableId;
  tableIds[3] = P_UnitProdTypesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(4);
  uint8[] memory p_requiredresources_resources_level_4 = new uint8[](2);
  p_requiredresources_resources_level_4[0] = 8;
  p_requiredresources_resources_level_4[1] = 12;
  uint256[] memory p_requiredresources_amounts_level_4 = new uint256[](2);
  p_requiredresources_amounts_level_4[0] = 99999999999999991611392;
  p_requiredresources_amounts_level_4[1] = 150000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_4,
    p_requiredresources_amounts_level_4
  );
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_UnitProdMultiplier.encode(500);
  bytes32[] memory p_unitprodtypes_value_level_4 = new bytes32[](2);
  p_unitprodtypes_value_level_4[0] = 0x54726964656e744d6172696e6500000000000000000000000000000000000000;
  p_unitprodtypes_value_level_4[1] = 0x4d696e7574656d616e4d6172696e650000000000000000000000000000000000;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_UnitProdTypes.encode(p_unitprodtypes_value_level_4);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant ShipyardPrototypeId = "Shipyard";

function ShipyardKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = ShipyardPrototypeId;
  return _keyTuple;
}

function ShipyardLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = ShipyardPrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function ShipyardPrototype(IStore store) {
  bytes32[] memory keys = ShipyardKeys();
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_BlueprintTableId;
  tableIds[1] = P_MaxLevelTableId;

  int32[] memory p_blueprint_value = new int32[](8);
  p_blueprint_value[0] = 0;
  p_blueprint_value[1] = 0;
  p_blueprint_value[2] = 0;
  p_blueprint_value[3] = -1;
  p_blueprint_value[4] = -1;
  p_blueprint_value[5] = 0;
  p_blueprint_value[6] = -1;
  p_blueprint_value[7] = -1;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_Blueprint.encode(p_blueprint_value);
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_MaxLevel.encode(4);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createShipyardLevel1(store);
  createShipyardLevel2(store);
  createShipyardLevel3(store);
  createShipyardLevel4(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createShipyardLevel1(IStore store) {
  bytes32[] memory levelKeys = ShipyardLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](5);
  bytes[] memory staticData = new bytes[](5);
  PackedCounter[] memory encodedLengths = new PackedCounter[](5);
  bytes[] memory dynamicData = new bytes[](5);

  tableIds[0] = P_RequiredResourcesTableId;
  tableIds[1] = P_RequiredBaseLevelTableId;
  tableIds[2] = P_UnitProdMultiplierTableId;
  tableIds[3] = P_ProductionTableId;
  tableIds[4] = P_UnitProdTypesTableId;

  uint8[] memory p_requiredresources_resources_level_1 = new uint8[](1);
  p_requiredresources_resources_level_1[0] = 1;
  uint256[] memory p_requiredresources_amounts_level_1 = new uint256[](1);
  p_requiredresources_amounts_level_1[0] = 1000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_1,
    p_requiredresources_amounts_level_1
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredBaseLevel.encode(3);
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_UnitProdMultiplier.encode(100);
  uint8[] memory p_production_resources_level_1 = new uint8[](1);
  p_production_resources_level_1[0] = 14;
  uint256[] memory p_production_amounts_level_1 = new uint256[](1);
  p_production_amounts_level_1[0] = 1000000000000;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Production.encode(
    p_production_resources_level_1,
    p_production_amounts_level_1
  );
  bytes32[] memory p_unitprodtypes_value_level_1 = new bytes32[](1);
  p_unitprodtypes_value_level_1[0] = 0x4361706974616c53686970000000000000000000000000000000000000000000;
  (staticData[4], encodedLengths[4], dynamicData[4]) = P_UnitProdTypes.encode(p_unitprodtypes_value_level_1);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 2 ----------------------------- */
function createShipyardLevel2(IStore store) {
  bytes32[] memory levelKeys = ShipyardLevelKeys(2);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_UnitProdMultiplierTableId;
  tableIds[3] = P_UnitProdTypesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(2);
  uint8[] memory p_requiredresources_resources_level_2 = new uint8[](3);
  p_requiredresources_resources_level_2[0] = 8;
  p_requiredresources_resources_level_2[1] = 9;
  p_requiredresources_resources_level_2[2] = 10;
  uint256[] memory p_requiredresources_amounts_level_2 = new uint256[](3);
  p_requiredresources_amounts_level_2[0] = 7500000000000000000000;
  p_requiredresources_amounts_level_2[1] = 7500000000000000000000;
  p_requiredresources_amounts_level_2[2] = 7500000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_2,
    p_requiredresources_amounts_level_2
  );
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_UnitProdMultiplier.encode(150);
  bytes32[] memory p_unitprodtypes_value_level_2 = new bytes32[](1);
  p_unitprodtypes_value_level_2[0] = 0x4361706974616c53686970000000000000000000000000000000000000000000;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_UnitProdTypes.encode(p_unitprodtypes_value_level_2);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 3 ----------------------------- */
function createShipyardLevel3(IStore store) {
  bytes32[] memory levelKeys = ShipyardLevelKeys(3);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_UnitProdMultiplierTableId;
  tableIds[3] = P_UnitProdTypesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(3);
  uint8[] memory p_requiredresources_resources_level_3 = new uint8[](3);
  p_requiredresources_resources_level_3[0] = 8;
  p_requiredresources_resources_level_3[1] = 9;
  p_requiredresources_resources_level_3[2] = 10;
  uint256[] memory p_requiredresources_amounts_level_3 = new uint256[](3);
  p_requiredresources_amounts_level_3[0] = 17500000000000001048576;
  p_requiredresources_amounts_level_3[1] = 17500000000000001048576;
  p_requiredresources_amounts_level_3[2] = 17500000000000001048576;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_3,
    p_requiredresources_amounts_level_3
  );
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_UnitProdMultiplier.encode(250);
  bytes32[] memory p_unitprodtypes_value_level_3 = new bytes32[](1);
  p_unitprodtypes_value_level_3[0] = 0x4361706974616c53686970000000000000000000000000000000000000000000;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_UnitProdTypes.encode(p_unitprodtypes_value_level_3);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 4 ----------------------------- */
function createShipyardLevel4(IStore store) {
  bytes32[] memory levelKeys = ShipyardLevelKeys(4);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_UnitProdMultiplierTableId;
  tableIds[3] = P_UnitProdTypesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(4);
  uint8[] memory p_requiredresources_resources_level_4 = new uint8[](3);
  p_requiredresources_resources_level_4[0] = 8;
  p_requiredresources_resources_level_4[1] = 9;
  p_requiredresources_resources_level_4[2] = 10;
  uint256[] memory p_requiredresources_amounts_level_4 = new uint256[](3);
  p_requiredresources_amounts_level_4[0] = 27500000000000001048576;
  p_requiredresources_amounts_level_4[1] = 27500000000000001048576;
  p_requiredresources_amounts_level_4[2] = 27500000000000001048576;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_4,
    p_requiredresources_amounts_level_4
  );
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_UnitProdMultiplier.encode(300);
  bytes32[] memory p_unitprodtypes_value_level_4 = new bytes32[](1);
  p_unitprodtypes_value_level_4[0] = 0x4361706974616c53686970000000000000000000000000000000000000000000;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_UnitProdTypes.encode(p_unitprodtypes_value_level_4);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant StarmapperPrototypeId = "Starmapper";

function StarmapperKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = StarmapperPrototypeId;
  return _keyTuple;
}

function StarmapperLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = StarmapperPrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function StarmapperPrototype(IStore store) {
  bytes32[] memory keys = StarmapperKeys();
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_BlueprintTableId;
  tableIds[1] = P_MaxLevelTableId;

  int32[] memory p_blueprint_value = new int32[](12);
  p_blueprint_value[0] = 0;
  p_blueprint_value[1] = 0;
  p_blueprint_value[2] = 0;
  p_blueprint_value[3] = -1;
  p_blueprint_value[4] = -1;
  p_blueprint_value[5] = 0;
  p_blueprint_value[6] = -1;
  p_blueprint_value[7] = -1;
  p_blueprint_value[8] = -2;
  p_blueprint_value[9] = 0;
  p_blueprint_value[10] = -2;
  p_blueprint_value[11] = -1;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_Blueprint.encode(p_blueprint_value);
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_MaxLevel.encode(3);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createStarmapperLevel1(store);
  createStarmapperLevel2(store);
  createStarmapperLevel3(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createStarmapperLevel1(IStore store) {
  bytes32[] memory levelKeys = StarmapperLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(3);
  uint8[] memory p_requiredresources_resources_level_1 = new uint8[](1);
  p_requiredresources_resources_level_1[0] = 8;
  uint256[] memory p_requiredresources_amounts_level_1 = new uint256[](1);
  p_requiredresources_amounts_level_1[0] = 500000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_1,
    p_requiredresources_amounts_level_1
  );
  uint8[] memory p_production_resources_level_1 = new uint8[](1);
  p_production_resources_level_1[0] = 15;
  uint256[] memory p_production_amounts_level_1 = new uint256[](1);
  p_production_amounts_level_1[0] = 1;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_1,
    p_production_amounts_level_1
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 2 ----------------------------- */
function createStarmapperLevel2(IStore store) {
  bytes32[] memory levelKeys = StarmapperLevelKeys(2);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(7);
  uint8[] memory p_requiredresources_resources_level_2 = new uint8[](1);
  p_requiredresources_resources_level_2[0] = 8;
  uint256[] memory p_requiredresources_amounts_level_2 = new uint256[](1);
  p_requiredresources_amounts_level_2[0] = 10000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_2,
    p_requiredresources_amounts_level_2
  );
  uint8[] memory p_production_resources_level_2 = new uint8[](1);
  p_production_resources_level_2[0] = 15;
  uint256[] memory p_production_amounts_level_2 = new uint256[](1);
  p_production_amounts_level_2[0] = 2;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_2,
    p_production_amounts_level_2
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 3 ----------------------------- */
function createStarmapperLevel3(IStore store) {
  bytes32[] memory levelKeys = StarmapperLevelKeys(3);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(8);
  uint8[] memory p_requiredresources_resources_level_3 = new uint8[](1);
  p_requiredresources_resources_level_3[0] = 8;
  uint256[] memory p_requiredresources_amounts_level_3 = new uint256[](1);
  p_requiredresources_amounts_level_3[0] = 24999999999999997902848;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_3,
    p_requiredresources_amounts_level_3
  );
  uint8[] memory p_production_resources_level_3 = new uint8[](1);
  p_production_resources_level_3[0] = 15;
  uint256[] memory p_production_amounts_level_3 = new uint256[](1);
  p_production_amounts_level_3[0] = 3;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_3,
    p_production_amounts_level_3
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant SAMPrototypeId = "SAM";

function SAMKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = SAMPrototypeId;
  return _keyTuple;
}

function SAMLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = SAMPrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function SAMPrototype(IStore store) {
  bytes32[] memory keys = SAMKeys();
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_BlueprintTableId;
  tableIds[1] = P_MaxLevelTableId;

  int32[] memory p_blueprint_value = new int32[](18);
  p_blueprint_value[0] = 0;
  p_blueprint_value[1] = 0;
  p_blueprint_value[2] = 0;
  p_blueprint_value[3] = -1;
  p_blueprint_value[4] = 0;
  p_blueprint_value[5] = -2;
  p_blueprint_value[6] = -1;
  p_blueprint_value[7] = 0;
  p_blueprint_value[8] = -1;
  p_blueprint_value[9] = -1;
  p_blueprint_value[10] = -1;
  p_blueprint_value[11] = -2;
  p_blueprint_value[12] = -2;
  p_blueprint_value[13] = 0;
  p_blueprint_value[14] = -2;
  p_blueprint_value[15] = -1;
  p_blueprint_value[16] = -2;
  p_blueprint_value[17] = -2;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_Blueprint.encode(p_blueprint_value);
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_MaxLevel.encode(3);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createSAMLevel1(store);
  createSAMLevel2(store);
  createSAMLevel3(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createSAMLevel1(IStore store) {
  bytes32[] memory levelKeys = SAMLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;
  tableIds[3] = P_ListMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(2);
  uint8[] memory p_requiredresources_resources_level_1 = new uint8[](2);
  p_requiredresources_resources_level_1[0] = 9;
  p_requiredresources_resources_level_1[1] = 12;
  uint256[] memory p_requiredresources_amounts_level_1 = new uint256[](2);
  p_requiredresources_amounts_level_1[0] = 2000000000000000000000;
  p_requiredresources_amounts_level_1[1] = 100000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_1,
    p_requiredresources_amounts_level_1
  );
  uint8[] memory p_production_resources_level_1 = new uint8[](2);
  p_production_resources_level_1[0] = 16;
  p_production_resources_level_1[1] = 19;
  uint256[] memory p_production_amounts_level_1 = new uint256[](2);
  p_production_amounts_level_1[0] = 100000000000000000000;
  p_production_amounts_level_1[1] = 100000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_1,
    p_production_amounts_level_1
  );
  uint8[] memory p_listmaxresourceupgrades_value_level_1 = new uint8[](1);
  p_listmaxresourceupgrades_value_level_1[0] = 19;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_ListMaxResourceUpgrades.encode(
    p_listmaxresourceupgrades_value_level_1
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 2 ----------------------------- */
function createSAMLevel2(IStore store) {
  bytes32[] memory levelKeys = SAMLevelKeys(2);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;
  tableIds[3] = P_ListMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(4);
  uint8[] memory p_requiredresources_resources_level_2 = new uint8[](2);
  p_requiredresources_resources_level_2[0] = 9;
  p_requiredresources_resources_level_2[1] = 12;
  uint256[] memory p_requiredresources_amounts_level_2 = new uint256[](2);
  p_requiredresources_amounts_level_2[0] = 15000000000000000000000;
  p_requiredresources_amounts_level_2[1] = 200000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_2,
    p_requiredresources_amounts_level_2
  );
  uint8[] memory p_production_resources_level_2 = new uint8[](2);
  p_production_resources_level_2[0] = 16;
  p_production_resources_level_2[1] = 19;
  uint256[] memory p_production_amounts_level_2 = new uint256[](2);
  p_production_amounts_level_2[0] = 250000000000000000000;
  p_production_amounts_level_2[1] = 250000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_2,
    p_production_amounts_level_2
  );
  uint8[] memory p_listmaxresourceupgrades_value_level_2 = new uint8[](1);
  p_listmaxresourceupgrades_value_level_2[0] = 19;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_ListMaxResourceUpgrades.encode(
    p_listmaxresourceupgrades_value_level_2
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 3 ----------------------------- */
function createSAMLevel3(IStore store) {
  bytes32[] memory levelKeys = SAMLevelKeys(3);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;
  tableIds[3] = P_ListMaxResourceUpgradesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(6);
  uint8[] memory p_requiredresources_resources_level_3 = new uint8[](2);
  p_requiredresources_resources_level_3[0] = 9;
  p_requiredresources_resources_level_3[1] = 12;
  uint256[] memory p_requiredresources_amounts_level_3 = new uint256[](2);
  p_requiredresources_amounts_level_3[0] = 49999999999999995805696;
  p_requiredresources_amounts_level_3[1] = 300000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_3,
    p_requiredresources_amounts_level_3
  );
  uint8[] memory p_production_resources_level_3 = new uint8[](2);
  p_production_resources_level_3[0] = 16;
  p_production_resources_level_3[1] = 19;
  uint256[] memory p_production_amounts_level_3 = new uint256[](2);
  p_production_amounts_level_3[0] = 750000000000000000000;
  p_production_amounts_level_3[1] = 750000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_3,
    p_production_amounts_level_3
  );
  uint8[] memory p_listmaxresourceupgrades_value_level_3 = new uint8[](1);
  p_listmaxresourceupgrades_value_level_3[0] = 19;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_ListMaxResourceUpgrades.encode(
    p_listmaxresourceupgrades_value_level_3
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant ShieldGeneratorPrototypeId = "ShieldGenerator";

function ShieldGeneratorKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = ShieldGeneratorPrototypeId;
  return _keyTuple;
}

function ShieldGeneratorLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = ShieldGeneratorPrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function ShieldGeneratorPrototype(IStore store) {
  bytes32[] memory keys = ShieldGeneratorKeys();
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_BlueprintTableId;
  tableIds[1] = P_MaxLevelTableId;

  int32[] memory p_blueprint_value = new int32[](32);
  p_blueprint_value[0] = 0;
  p_blueprint_value[1] = 0;
  p_blueprint_value[2] = 0;
  p_blueprint_value[3] = -1;
  p_blueprint_value[4] = 0;
  p_blueprint_value[5] = -2;
  p_blueprint_value[6] = 0;
  p_blueprint_value[7] = -3;
  p_blueprint_value[8] = -1;
  p_blueprint_value[9] = 0;
  p_blueprint_value[10] = -1;
  p_blueprint_value[11] = -1;
  p_blueprint_value[12] = -1;
  p_blueprint_value[13] = -2;
  p_blueprint_value[14] = -1;
  p_blueprint_value[15] = -3;
  p_blueprint_value[16] = -2;
  p_blueprint_value[17] = 0;
  p_blueprint_value[18] = -2;
  p_blueprint_value[19] = -1;
  p_blueprint_value[20] = -2;
  p_blueprint_value[21] = -2;
  p_blueprint_value[22] = -2;
  p_blueprint_value[23] = -3;
  p_blueprint_value[24] = -3;
  p_blueprint_value[25] = 0;
  p_blueprint_value[26] = -3;
  p_blueprint_value[27] = -1;
  p_blueprint_value[28] = -3;
  p_blueprint_value[29] = -2;
  p_blueprint_value[30] = -3;
  p_blueprint_value[31] = -3;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_Blueprint.encode(p_blueprint_value);
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_MaxLevel.encode(3);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createShieldGeneratorLevel1(store);
  createShieldGeneratorLevel2(store);
  createShieldGeneratorLevel3(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createShieldGeneratorLevel1(IStore store) {
  bytes32[] memory levelKeys = ShieldGeneratorLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(3);
  uint8[] memory p_requiredresources_resources_level_1 = new uint8[](3);
  p_requiredresources_resources_level_1[0] = 10;
  p_requiredresources_resources_level_1[1] = 9;
  p_requiredresources_resources_level_1[2] = 12;
  uint256[] memory p_requiredresources_amounts_level_1 = new uint256[](3);
  p_requiredresources_amounts_level_1[0] = 5000000000000000000000;
  p_requiredresources_amounts_level_1[1] = 5000000000000000000000;
  p_requiredresources_amounts_level_1[2] = 100000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_1,
    p_requiredresources_amounts_level_1
  );
  uint8[] memory p_production_resources_level_1 = new uint8[](1);
  p_production_resources_level_1[0] = 21;
  uint256[] memory p_production_amounts_level_1 = new uint256[](1);
  p_production_amounts_level_1[0] = 5000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_1,
    p_production_amounts_level_1
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 2 ----------------------------- */
function createShieldGeneratorLevel2(IStore store) {
  bytes32[] memory levelKeys = ShieldGeneratorLevelKeys(2);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(5);
  uint8[] memory p_requiredresources_resources_level_2 = new uint8[](3);
  p_requiredresources_resources_level_2[0] = 10;
  p_requiredresources_resources_level_2[1] = 9;
  p_requiredresources_resources_level_2[2] = 12;
  uint256[] memory p_requiredresources_amounts_level_2 = new uint256[](3);
  p_requiredresources_amounts_level_2[0] = 15000000000000000000000;
  p_requiredresources_amounts_level_2[1] = 15000000000000000000000;
  p_requiredresources_amounts_level_2[2] = 100000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_2,
    p_requiredresources_amounts_level_2
  );
  uint8[] memory p_production_resources_level_2 = new uint8[](1);
  p_production_resources_level_2[0] = 21;
  uint256[] memory p_production_amounts_level_2 = new uint256[](1);
  p_production_amounts_level_2[0] = 10000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_2,
    p_production_amounts_level_2
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 3 ----------------------------- */
function createShieldGeneratorLevel3(IStore store) {
  bytes32[] memory levelKeys = ShieldGeneratorLevelKeys(3);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(7);
  uint8[] memory p_requiredresources_resources_level_3 = new uint8[](3);
  p_requiredresources_resources_level_3[0] = 10;
  p_requiredresources_resources_level_3[1] = 9;
  p_requiredresources_resources_level_3[2] = 12;
  uint256[] memory p_requiredresources_amounts_level_3 = new uint256[](3);
  p_requiredresources_amounts_level_3[0] = 49999999999999995805696;
  p_requiredresources_amounts_level_3[1] = 49999999999999995805696;
  p_requiredresources_amounts_level_3[2] = 100000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_3,
    p_requiredresources_amounts_level_3
  );
  uint8[] memory p_production_resources_level_3 = new uint8[](1);
  p_production_resources_level_3[0] = 21;
  uint256[] memory p_production_amounts_level_3 = new uint256[](1);
  p_production_amounts_level_3[0] = 15000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_3,
    p_production_amounts_level_3
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant VaultPrototypeId = "Vault";

function VaultKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = VaultPrototypeId;
  return _keyTuple;
}

function VaultLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = VaultPrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function VaultPrototype(IStore store) {
  bytes32[] memory keys = VaultKeys();
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_BlueprintTableId;
  tableIds[1] = P_MaxLevelTableId;

  int32[] memory p_blueprint_value = new int32[](18);
  p_blueprint_value[0] = 0;
  p_blueprint_value[1] = 0;
  p_blueprint_value[2] = 0;
  p_blueprint_value[3] = -1;
  p_blueprint_value[4] = 0;
  p_blueprint_value[5] = -2;
  p_blueprint_value[6] = -1;
  p_blueprint_value[7] = 0;
  p_blueprint_value[8] = -1;
  p_blueprint_value[9] = -1;
  p_blueprint_value[10] = -1;
  p_blueprint_value[11] = -2;
  p_blueprint_value[12] = -2;
  p_blueprint_value[13] = 0;
  p_blueprint_value[14] = -2;
  p_blueprint_value[15] = -1;
  p_blueprint_value[16] = -2;
  p_blueprint_value[17] = -2;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_Blueprint.encode(p_blueprint_value);
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_MaxLevel.encode(4);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createVaultLevel1(store);
  createVaultLevel2(store);
  createVaultLevel3(store);
  createVaultLevel4(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createVaultLevel1(IStore store) {
  bytes32[] memory levelKeys = VaultLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(2);
  uint8[] memory p_requiredresources_resources_level_1 = new uint8[](1);
  p_requiredresources_resources_level_1[0] = 9;
  uint256[] memory p_requiredresources_amounts_level_1 = new uint256[](1);
  p_requiredresources_amounts_level_1[0] = 1000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_1,
    p_requiredresources_amounts_level_1
  );
  uint8[] memory p_production_resources_level_1 = new uint8[](1);
  p_production_resources_level_1[0] = 17;
  uint256[] memory p_production_amounts_level_1 = new uint256[](1);
  p_production_amounts_level_1[0] = 750000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_1,
    p_production_amounts_level_1
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 2 ----------------------------- */
function createVaultLevel2(IStore store) {
  bytes32[] memory levelKeys = VaultLevelKeys(2);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(3);
  uint8[] memory p_requiredresources_resources_level_2 = new uint8[](2);
  p_requiredresources_resources_level_2[0] = 9;
  p_requiredresources_resources_level_2[1] = 12;
  uint256[] memory p_requiredresources_amounts_level_2 = new uint256[](2);
  p_requiredresources_amounts_level_2[0] = 7500000000000000000000;
  p_requiredresources_amounts_level_2[1] = 100000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_2,
    p_requiredresources_amounts_level_2
  );
  uint8[] memory p_production_resources_level_2 = new uint8[](2);
  p_production_resources_level_2[0] = 17;
  p_production_resources_level_2[1] = 18;
  uint256[] memory p_production_amounts_level_2 = new uint256[](2);
  p_production_amounts_level_2[0] = 2000000000000000000000;
  p_production_amounts_level_2[1] = 500000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_2,
    p_production_amounts_level_2
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 3 ----------------------------- */
function createVaultLevel3(IStore store) {
  bytes32[] memory levelKeys = VaultLevelKeys(3);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(5);
  uint8[] memory p_requiredresources_resources_level_3 = new uint8[](2);
  p_requiredresources_resources_level_3[0] = 9;
  p_requiredresources_resources_level_3[1] = 12;
  uint256[] memory p_requiredresources_amounts_level_3 = new uint256[](2);
  p_requiredresources_amounts_level_3[0] = 20000000000000000000000;
  p_requiredresources_amounts_level_3[1] = 15000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_3,
    p_requiredresources_amounts_level_3
  );
  uint8[] memory p_production_resources_level_3 = new uint8[](2);
  p_production_resources_level_3[0] = 17;
  p_production_resources_level_3[1] = 18;
  uint256[] memory p_production_amounts_level_3 = new uint256[](2);
  p_production_amounts_level_3[0] = 5000000000000000000000;
  p_production_amounts_level_3[1] = 1000000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_3,
    p_production_amounts_level_3
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 4 ----------------------------- */
function createVaultLevel4(IStore store) {
  bytes32[] memory levelKeys = VaultLevelKeys(4);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_ProductionTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(7);
  uint8[] memory p_requiredresources_resources_level_4 = new uint8[](2);
  p_requiredresources_resources_level_4[0] = 9;
  p_requiredresources_resources_level_4[1] = 12;
  uint256[] memory p_requiredresources_amounts_level_4 = new uint256[](2);
  p_requiredresources_amounts_level_4[0] = 99999999999999991611392;
  p_requiredresources_amounts_level_4[1] = 200000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_4,
    p_requiredresources_amounts_level_4
  );
  uint8[] memory p_production_resources_level_4 = new uint8[](2);
  p_production_resources_level_4[0] = 17;
  p_production_resources_level_4[1] = 18;
  uint256[] memory p_production_amounts_level_4 = new uint256[](2);
  p_production_amounts_level_4[0] = 10000000000000000000000;
  p_production_amounts_level_4[1] = 2500000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Production.encode(
    p_production_resources_level_4,
    p_production_amounts_level_4
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MarketPrototypeId = "Market";

function MarketKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = MarketPrototypeId;
  return _keyTuple;
}

function MarketLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = MarketPrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function MarketPrototype(IStore store) {
  bytes32[] memory keys = MarketKeys();
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_BlueprintTableId;
  tableIds[1] = P_MaxLevelTableId;

  int32[] memory p_blueprint_value = new int32[](18);
  p_blueprint_value[0] = 0;
  p_blueprint_value[1] = 0;
  p_blueprint_value[2] = 0;
  p_blueprint_value[3] = -1;
  p_blueprint_value[4] = 0;
  p_blueprint_value[5] = -2;
  p_blueprint_value[6] = -1;
  p_blueprint_value[7] = 0;
  p_blueprint_value[8] = -1;
  p_blueprint_value[9] = -1;
  p_blueprint_value[10] = -1;
  p_blueprint_value[11] = -2;
  p_blueprint_value[12] = -2;
  p_blueprint_value[13] = 0;
  p_blueprint_value[14] = -2;
  p_blueprint_value[15] = -1;
  p_blueprint_value[16] = -2;
  p_blueprint_value[17] = -2;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_Blueprint.encode(p_blueprint_value);
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_MaxLevel.encode(1);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createMarketLevel1(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createMarketLevel1(IStore store) {
  bytes32[] memory levelKeys = MarketLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_RequiredBaseLevelTableId;
  tableIds[1] = P_RequiredResourcesTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(3);
  uint8[] memory p_requiredresources_resources_level_1 = new uint8[](1);
  p_requiredresources_resources_level_1[0] = 1;
  uint256[] memory p_requiredresources_amounts_level_1 = new uint256[](1);
  p_requiredresources_amounts_level_1[0] = 1000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_1,
    p_requiredresources_amounts_level_1
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant IsUtilityPrototypeId = "IsUtility";

function IsUtilityKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](0);

  return _keyTuple;
}

function IsUtilityLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);

  _keyTuple[0] = bytes32(uint256(level));
  return _keyTuple;
}

function IsUtilityPrototype(IStore store) {
  bytes32[] memory keys = IsUtilityKeys();
  ResourceId[] memory tableIds = new ResourceId[](0);
  bytes[] memory staticData = new bytes[](0);
  PackedCounter[] memory encodedLengths = new PackedCounter[](0);
  bytes[] memory dynamicData = new bytes[](0);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createIsUtilityLevel12(store);
  createIsUtilityLevel13(store);
  createIsUtilityLevel14(store);
  createIsUtilityLevel15(store);
  createIsUtilityLevel16(store);
  createIsUtilityLevel17(store);
  createIsUtilityLevel18(store);
  createIsUtilityLevel21(store);
}

/* ----------------------------- LEVEL 12 ----------------------------- */
function createIsUtilityLevel12(IStore store) {
  bytes32[] memory levelKeys = IsUtilityLevelKeys(12);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_IsUtilityTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_IsUtility.encode(true);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 13 ----------------------------- */
function createIsUtilityLevel13(IStore store) {
  bytes32[] memory levelKeys = IsUtilityLevelKeys(13);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_IsUtilityTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_IsUtility.encode(true);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 14 ----------------------------- */
function createIsUtilityLevel14(IStore store) {
  bytes32[] memory levelKeys = IsUtilityLevelKeys(14);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_IsUtilityTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_IsUtility.encode(true);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 15 ----------------------------- */
function createIsUtilityLevel15(IStore store) {
  bytes32[] memory levelKeys = IsUtilityLevelKeys(15);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_IsUtilityTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_IsUtility.encode(true);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 16 ----------------------------- */
function createIsUtilityLevel16(IStore store) {
  bytes32[] memory levelKeys = IsUtilityLevelKeys(16);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_IsUtilityTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_IsUtility.encode(true);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 17 ----------------------------- */
function createIsUtilityLevel17(IStore store) {
  bytes32[] memory levelKeys = IsUtilityLevelKeys(17);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_IsUtilityTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_IsUtility.encode(true);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 18 ----------------------------- */
function createIsUtilityLevel18(IStore store) {
  bytes32[] memory levelKeys = IsUtilityLevelKeys(18);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_IsUtilityTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_IsUtility.encode(true);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 21 ----------------------------- */
function createIsUtilityLevel21(IStore store) {
  bytes32[] memory levelKeys = IsUtilityLevelKeys(21);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_IsUtilityTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_IsUtility.encode(true);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant RecoverablesPrototypeId = "Recoverables";

function RecoverablesKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](0);

  return _keyTuple;
}

function RecoverablesLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);

  _keyTuple[0] = bytes32(uint256(level));
  return _keyTuple;
}

function RecoverablesPrototype(IStore store) {
  bytes32[] memory keys = RecoverablesKeys();
  ResourceId[] memory tableIds = new ResourceId[](0);
  bytes[] memory staticData = new bytes[](0);
  PackedCounter[] memory encodedLengths = new PackedCounter[](0);
  bytes[] memory dynamicData = new bytes[](0);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createRecoverablesLevel19(store);
  createRecoverablesLevel20(store);
}

/* ----------------------------- LEVEL 19 ----------------------------- */
function createRecoverablesLevel19(IStore store) {
  bytes32[] memory levelKeys = RecoverablesLevelKeys(19);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_IsRecoverableTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_IsRecoverable.encode(true);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 20 ----------------------------- */
function createRecoverablesLevel20(IStore store) {
  bytes32[] memory levelKeys = RecoverablesLevelKeys(20);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_IsRecoverableTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_IsRecoverable.encode(true);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant IsAdvancedResourcePrototypeId = "IsAdvancedResource";

function IsAdvancedResourceKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](0);

  return _keyTuple;
}

function IsAdvancedResourceLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);

  _keyTuple[0] = bytes32(uint256(level));
  return _keyTuple;
}

function IsAdvancedResourcePrototype(IStore store) {
  bytes32[] memory keys = IsAdvancedResourceKeys();
  ResourceId[] memory tableIds = new ResourceId[](0);
  bytes[] memory staticData = new bytes[](0);
  PackedCounter[] memory encodedLengths = new PackedCounter[](0);
  bytes[] memory dynamicData = new bytes[](0);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createIsAdvancedResourceLevel4(store);
  createIsAdvancedResourceLevel5(store);
  createIsAdvancedResourceLevel6(store);
  createIsAdvancedResourceLevel7(store);
}

/* ----------------------------- LEVEL 4 ----------------------------- */
function createIsAdvancedResourceLevel4(IStore store) {
  bytes32[] memory levelKeys = IsAdvancedResourceLevelKeys(4);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_IsAdvancedResourceTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_IsAdvancedResource.encode(true);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 5 ----------------------------- */
function createIsAdvancedResourceLevel5(IStore store) {
  bytes32[] memory levelKeys = IsAdvancedResourceLevelKeys(5);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_IsAdvancedResourceTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_IsAdvancedResource.encode(true);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 6 ----------------------------- */
function createIsAdvancedResourceLevel6(IStore store) {
  bytes32[] memory levelKeys = IsAdvancedResourceLevelKeys(6);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_IsAdvancedResourceTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_IsAdvancedResource.encode(true);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 7 ----------------------------- */
function createIsAdvancedResourceLevel7(IStore store) {
  bytes32[] memory levelKeys = IsAdvancedResourceLevelKeys(7);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_IsAdvancedResourceTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_IsAdvancedResource.encode(true);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant UnitPrototypeId = "Unit";

function UnitKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = UnitPrototypeId;
  return _keyTuple;
}

function UnitLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = UnitPrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function UnitPrototype(IStore store) {
  bytes32[] memory keys = UnitKeys();
  ResourceId[] memory tableIds = new ResourceId[](0);
  bytes[] memory staticData = new bytes[](0);
  PackedCounter[] memory encodedLengths = new PackedCounter[](0);
  bytes[] memory dynamicData = new bytes[](0);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createUnitLevel0(store);
  createUnitLevel1(store);
  createUnitLevel2(store);
  createUnitLevel3(store);
  createUnitLevel4(store);
  createUnitLevel5(store);
  createUnitLevel6(store);
  createUnitLevel7(store);
  createUnitLevel8(store);
  createUnitLevel9(store);
  createUnitLevel10(store);
}

/* ----------------------------- LEVEL 0 ----------------------------- */
function createUnitLevel0(IStore store) {
  bytes32[] memory levelKeys = UnitLevelKeys(0);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4e554c4c00000000000000000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createUnitLevel1(IStore store) {
  bytes32[] memory levelKeys = UnitLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x416567697344726f6e6500000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 2 ----------------------------- */
function createUnitLevel2(IStore store) {
  bytes32[] memory levelKeys = UnitLevelKeys(2);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x416e76696c44726f6e6500000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 3 ----------------------------- */
function createUnitLevel3(IStore store) {
  bytes32[] memory levelKeys = UnitLevelKeys(3);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x5374696e67657244726f6e650000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 4 ----------------------------- */
function createUnitLevel4(IStore store) {
  bytes32[] memory levelKeys = UnitLevelKeys(4);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x48616d6d657244726f6e65000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 5 ----------------------------- */
function createUnitLevel5(IStore store) {
  bytes32[] memory levelKeys = UnitLevelKeys(5);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4d696e7574656d616e4d6172696e650000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 6 ----------------------------- */
function createUnitLevel6(IStore store) {
  bytes32[] memory levelKeys = UnitLevelKeys(6);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x54726964656e744d6172696e6500000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 7 ----------------------------- */
function createUnitLevel7(IStore store) {
  bytes32[] memory levelKeys = UnitLevelKeys(7);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4c696768746e696e674372616674000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 8 ----------------------------- */
function createUnitLevel8(IStore store) {
  bytes32[] memory levelKeys = UnitLevelKeys(8);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4361706974616c53686970000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 9 ----------------------------- */
function createUnitLevel9(IStore store) {
  bytes32[] memory levelKeys = UnitLevelKeys(9);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x44726f6964000000000000000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 10 ----------------------------- */
function createUnitLevel10(IStore store) {
  bytes32[] memory levelKeys = UnitLevelKeys(10);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4c454e4754480000000000000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant FleetStancePrototypeId = "FleetStance";

function FleetStanceKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = FleetStancePrototypeId;
  return _keyTuple;
}

function FleetStanceLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = FleetStancePrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function FleetStancePrototype(IStore store) {
  bytes32[] memory keys = FleetStanceKeys();
  ResourceId[] memory tableIds = new ResourceId[](0);
  bytes[] memory staticData = new bytes[](0);
  PackedCounter[] memory encodedLengths = new PackedCounter[](0);
  bytes[] memory dynamicData = new bytes[](0);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createFleetStanceLevel0(store);
  createFleetStanceLevel1(store);
  createFleetStanceLevel2(store);
  createFleetStanceLevel3(store);
  createFleetStanceLevel4(store);
}

/* ----------------------------- LEVEL 0 ----------------------------- */
function createFleetStanceLevel0(IStore store) {
  bytes32[] memory levelKeys = FleetStanceLevelKeys(0);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4e554c4c00000000000000000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createFleetStanceLevel1(IStore store) {
  bytes32[] memory levelKeys = FleetStanceLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x466f6c6c6f770000000000000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 2 ----------------------------- */
function createFleetStanceLevel2(IStore store) {
  bytes32[] memory levelKeys = FleetStanceLevelKeys(2);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x446566656e640000000000000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 3 ----------------------------- */
function createFleetStanceLevel3(IStore store) {
  bytes32[] memory levelKeys = FleetStanceLevelKeys(3);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x426c6f636b000000000000000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 4 ----------------------------- */
function createFleetStanceLevel4(IStore store) {
  bytes32[] memory levelKeys = FleetStanceLevelKeys(4);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4c454e4754480000000000000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant OrderTypePrototypeId = "OrderType";

function OrderTypeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = OrderTypePrototypeId;
  return _keyTuple;
}

function OrderTypeLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = OrderTypePrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function OrderTypePrototype(IStore store) {
  bytes32[] memory keys = OrderTypeKeys();
  ResourceId[] memory tableIds = new ResourceId[](0);
  bytes[] memory staticData = new bytes[](0);
  PackedCounter[] memory encodedLengths = new PackedCounter[](0);
  bytes[] memory dynamicData = new bytes[](0);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createOrderTypeLevel0(store);
  createOrderTypeLevel1(store);
  createOrderTypeLevel2(store);
  createOrderTypeLevel3(store);
}

/* ----------------------------- LEVEL 0 ----------------------------- */
function createOrderTypeLevel0(IStore store) {
  bytes32[] memory levelKeys = OrderTypeLevelKeys(0);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4e554c4c00000000000000000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createOrderTypeLevel1(IStore store) {
  bytes32[] memory levelKeys = OrderTypeLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x5265736f75726365000000000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 2 ----------------------------- */
function createOrderTypeLevel2(IStore store) {
  bytes32[] memory levelKeys = OrderTypeLevelKeys(2);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x556e697400000000000000000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 3 ----------------------------- */
function createOrderTypeLevel3(IStore store) {
  bytes32[] memory levelKeys = OrderTypeLevelKeys(3);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4c454e4754480000000000000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant LightningCraftPrototypeId = "LightningCraft";

function LightningCraftKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = LightningCraftPrototypeId;
  return _keyTuple;
}

function LightningCraftLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = LightningCraftPrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function LightningCraftPrototype(IStore store) {
  bytes32[] memory keys = LightningCraftKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_MaxLevelTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_MaxLevel.encode(1);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createLightningCraftLevel0(store);
}

/* ----------------------------- LEVEL 0 ----------------------------- */
function createLightningCraftLevel0(IStore store) {
  bytes32[] memory levelKeys = LightningCraftLevelKeys(0);
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_RequiredResourcesTableId;
  tableIds[1] = P_UnitTableId;

  uint8[] memory p_requiredresources_resources_level_0 = new uint8[](1);
  p_requiredresources_resources_level_0[0] = 13;
  uint256[] memory p_requiredresources_amounts_level_0 = new uint256[](1);
  p_requiredresources_amounts_level_0[0] = 1;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_0,
    p_requiredresources_amounts_level_0
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_Unit.encode(
    10000000000000000000,
    10000000000000000000,
    500,
    10000000000000000000,
    500,
    100000000000000000000,
    0
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant AnvilDronePrototypeId = "AnvilDrone";

function AnvilDroneKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = AnvilDronePrototypeId;
  return _keyTuple;
}

function AnvilDroneLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = AnvilDronePrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function AnvilDronePrototype(IStore store) {
  bytes32[] memory keys = AnvilDroneKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_MaxLevelTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_MaxLevel.encode(5);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createAnvilDroneLevel0(store);
  createAnvilDroneLevel1(store);
  createAnvilDroneLevel2(store);
  createAnvilDroneLevel3(store);
  createAnvilDroneLevel4(store);
  createAnvilDroneLevel5(store);
}

/* ----------------------------- LEVEL 0 ----------------------------- */
function createAnvilDroneLevel0(IStore store) {
  bytes32[] memory levelKeys = AnvilDroneLevelKeys(0);
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_RequiredResourcesTableId;
  tableIds[1] = P_UnitTableId;

  uint8[] memory p_requiredresources_resources_level_0 = new uint8[](2);
  p_requiredresources_resources_level_0[0] = 9;
  p_requiredresources_resources_level_0[1] = 13;
  uint256[] memory p_requiredresources_amounts_level_0 = new uint256[](2);
  p_requiredresources_amounts_level_0[0] = 20000000000000000000;
  p_requiredresources_amounts_level_0[1] = 2;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_0,
    p_requiredresources_amounts_level_0
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_Unit.encode(
    120000000000000000000,
    300000000000000000000,
    50,
    30000000000000000000,
    50,
    100000000000000000000,
    0
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createAnvilDroneLevel1(IStore store) {
  bytes32[] memory levelKeys = AnvilDroneLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredUpgradeResourcesTableId;
  tableIds[1] = P_RequiredBaseLevelTableId;
  tableIds[2] = P_RequiredResourcesTableId;
  tableIds[3] = P_UnitTableId;

  uint8[] memory p_requiredupgraderesources_resources_level_1 = new uint8[](1);
  p_requiredupgraderesources_resources_level_1[0] = 7;
  uint256[] memory p_requiredupgraderesources_amounts_level_1 = new uint256[](1);
  p_requiredupgraderesources_amounts_level_1[0] = 500000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredUpgradeResources.encode(
    p_requiredupgraderesources_resources_level_1,
    p_requiredupgraderesources_amounts_level_1
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredBaseLevel.encode(4);
  uint8[] memory p_requiredresources_resources_level_1 = new uint8[](2);
  p_requiredresources_resources_level_1[0] = 9;
  p_requiredresources_resources_level_1[1] = 13;
  uint256[] memory p_requiredresources_amounts_level_1 = new uint256[](2);
  p_requiredresources_amounts_level_1[0] = 20000000000000000000;
  p_requiredresources_amounts_level_1[1] = 2;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_1,
    p_requiredresources_amounts_level_1
  );
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Unit.encode(
    130000000000000000000,
    340000000000000000000,
    100,
    50000000000000000000,
    100,
    100000000000000000000,
    0
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 2 ----------------------------- */
function createAnvilDroneLevel2(IStore store) {
  bytes32[] memory levelKeys = AnvilDroneLevelKeys(2);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredUpgradeResourcesTableId;
  tableIds[1] = P_RequiredBaseLevelTableId;
  tableIds[2] = P_RequiredResourcesTableId;
  tableIds[3] = P_UnitTableId;

  uint8[] memory p_requiredupgraderesources_resources_level_2 = new uint8[](1);
  p_requiredupgraderesources_resources_level_2[0] = 7;
  uint256[] memory p_requiredupgraderesources_amounts_level_2 = new uint256[](1);
  p_requiredupgraderesources_amounts_level_2[0] = 1500000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredUpgradeResources.encode(
    p_requiredupgraderesources_resources_level_2,
    p_requiredupgraderesources_amounts_level_2
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredBaseLevel.encode(5);
  uint8[] memory p_requiredresources_resources_level_2 = new uint8[](2);
  p_requiredresources_resources_level_2[0] = 9;
  p_requiredresources_resources_level_2[1] = 13;
  uint256[] memory p_requiredresources_amounts_level_2 = new uint256[](2);
  p_requiredresources_amounts_level_2[0] = 20000000000000000000;
  p_requiredresources_amounts_level_2[1] = 2;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_2,
    p_requiredresources_amounts_level_2
  );
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Unit.encode(
    140000000000000000000,
    360000000000000000000,
    150,
    70000000000000000000,
    150,
    100000000000000000000,
    0
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 3 ----------------------------- */
function createAnvilDroneLevel3(IStore store) {
  bytes32[] memory levelKeys = AnvilDroneLevelKeys(3);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredUpgradeResourcesTableId;
  tableIds[1] = P_RequiredBaseLevelTableId;
  tableIds[2] = P_RequiredResourcesTableId;
  tableIds[3] = P_UnitTableId;

  uint8[] memory p_requiredupgraderesources_resources_level_3 = new uint8[](1);
  p_requiredupgraderesources_resources_level_3[0] = 7;
  uint256[] memory p_requiredupgraderesources_amounts_level_3 = new uint256[](1);
  p_requiredupgraderesources_amounts_level_3[0] = 5000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredUpgradeResources.encode(
    p_requiredupgraderesources_resources_level_3,
    p_requiredupgraderesources_amounts_level_3
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredBaseLevel.encode(6);
  uint8[] memory p_requiredresources_resources_level_3 = new uint8[](2);
  p_requiredresources_resources_level_3[0] = 9;
  p_requiredresources_resources_level_3[1] = 13;
  uint256[] memory p_requiredresources_amounts_level_3 = new uint256[](2);
  p_requiredresources_amounts_level_3[0] = 20000000000000000000;
  p_requiredresources_amounts_level_3[1] = 2;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_3,
    p_requiredresources_amounts_level_3
  );
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Unit.encode(
    150000000000000000000,
    380000000000000000000,
    200,
    100000000000000000000,
    200,
    100000000000000000000,
    0
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 4 ----------------------------- */
function createAnvilDroneLevel4(IStore store) {
  bytes32[] memory levelKeys = AnvilDroneLevelKeys(4);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredUpgradeResourcesTableId;
  tableIds[1] = P_RequiredBaseLevelTableId;
  tableIds[2] = P_RequiredResourcesTableId;
  tableIds[3] = P_UnitTableId;

  uint8[] memory p_requiredupgraderesources_resources_level_4 = new uint8[](1);
  p_requiredupgraderesources_resources_level_4[0] = 7;
  uint256[] memory p_requiredupgraderesources_amounts_level_4 = new uint256[](1);
  p_requiredupgraderesources_amounts_level_4[0] = 10000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredUpgradeResources.encode(
    p_requiredupgraderesources_resources_level_4,
    p_requiredupgraderesources_amounts_level_4
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredBaseLevel.encode(6);
  uint8[] memory p_requiredresources_resources_level_4 = new uint8[](2);
  p_requiredresources_resources_level_4[0] = 9;
  p_requiredresources_resources_level_4[1] = 13;
  uint256[] memory p_requiredresources_amounts_level_4 = new uint256[](2);
  p_requiredresources_amounts_level_4[0] = 20000000000000000000;
  p_requiredresources_amounts_level_4[1] = 2;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_4,
    p_requiredresources_amounts_level_4
  );
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Unit.encode(
    160000000000000000000,
    400000000000000000000,
    250,
    120000000000000000000,
    250,
    100000000000000000000,
    0
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 5 ----------------------------- */
function createAnvilDroneLevel5(IStore store) {
  bytes32[] memory levelKeys = AnvilDroneLevelKeys(5);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredUpgradeResourcesTableId;
  tableIds[1] = P_RequiredBaseLevelTableId;
  tableIds[2] = P_RequiredResourcesTableId;
  tableIds[3] = P_UnitTableId;

  uint8[] memory p_requiredupgraderesources_resources_level_5 = new uint8[](1);
  p_requiredupgraderesources_resources_level_5[0] = 7;
  uint256[] memory p_requiredupgraderesources_amounts_level_5 = new uint256[](1);
  p_requiredupgraderesources_amounts_level_5[0] = 24999999999999997902848;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredUpgradeResources.encode(
    p_requiredupgraderesources_resources_level_5,
    p_requiredupgraderesources_amounts_level_5
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredBaseLevel.encode(8);
  uint8[] memory p_requiredresources_resources_level_5 = new uint8[](2);
  p_requiredresources_resources_level_5[0] = 9;
  p_requiredresources_resources_level_5[1] = 13;
  uint256[] memory p_requiredresources_amounts_level_5 = new uint256[](2);
  p_requiredresources_amounts_level_5[0] = 20000000000000000000;
  p_requiredresources_amounts_level_5[1] = 2;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_5,
    p_requiredresources_amounts_level_5
  );
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Unit.encode(
    170000000000000000000,
    420000000000000000000,
    350,
    150000000000000000000,
    350,
    100000000000000000000,
    0
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant AegisDronePrototypeId = "AegisDrone";

function AegisDroneKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = AegisDronePrototypeId;
  return _keyTuple;
}

function AegisDroneLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = AegisDronePrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function AegisDronePrototype(IStore store) {
  bytes32[] memory keys = AegisDroneKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_MaxLevelTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_MaxLevel.encode(5);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createAegisDroneLevel0(store);
  createAegisDroneLevel1(store);
  createAegisDroneLevel2(store);
  createAegisDroneLevel3(store);
  createAegisDroneLevel4(store);
  createAegisDroneLevel5(store);
}

/* ----------------------------- LEVEL 0 ----------------------------- */
function createAegisDroneLevel0(IStore store) {
  bytes32[] memory levelKeys = AegisDroneLevelKeys(0);
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_RequiredResourcesTableId;
  tableIds[1] = P_UnitTableId;

  uint8[] memory p_requiredresources_resources_level_0 = new uint8[](3);
  p_requiredresources_resources_level_0[0] = 13;
  p_requiredresources_resources_level_0[1] = 9;
  p_requiredresources_resources_level_0[2] = 10;
  uint256[] memory p_requiredresources_amounts_level_0 = new uint256[](3);
  p_requiredresources_amounts_level_0[0] = 3;
  p_requiredresources_amounts_level_0[1] = 80000000000000000000;
  p_requiredresources_amounts_level_0[2] = 100000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_0,
    p_requiredresources_amounts_level_0
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_Unit.encode(
    150000000000000000000,
    500000000000000000000,
    70,
    100000000000000000000,
    70,
    100000000000000000000,
    0
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createAegisDroneLevel1(IStore store) {
  bytes32[] memory levelKeys = AegisDroneLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredUpgradeResourcesTableId;
  tableIds[1] = P_RequiredBaseLevelTableId;
  tableIds[2] = P_RequiredResourcesTableId;
  tableIds[3] = P_UnitTableId;

  uint8[] memory p_requiredupgraderesources_resources_level_1 = new uint8[](1);
  p_requiredupgraderesources_resources_level_1[0] = 5;
  uint256[] memory p_requiredupgraderesources_amounts_level_1 = new uint256[](1);
  p_requiredupgraderesources_amounts_level_1[0] = 300000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredUpgradeResources.encode(
    p_requiredupgraderesources_resources_level_1,
    p_requiredupgraderesources_amounts_level_1
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredBaseLevel.encode(4);
  uint8[] memory p_requiredresources_resources_level_1 = new uint8[](3);
  p_requiredresources_resources_level_1[0] = 13;
  p_requiredresources_resources_level_1[1] = 9;
  p_requiredresources_resources_level_1[2] = 10;
  uint256[] memory p_requiredresources_amounts_level_1 = new uint256[](3);
  p_requiredresources_amounts_level_1[0] = 3;
  p_requiredresources_amounts_level_1[1] = 80000000000000000000;
  p_requiredresources_amounts_level_1[2] = 100000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_1,
    p_requiredresources_amounts_level_1
  );
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Unit.encode(
    160000000000000000000,
    550000000000000000000,
    150,
    120000000000000000000,
    150,
    100000000000000000000,
    0
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 2 ----------------------------- */
function createAegisDroneLevel2(IStore store) {
  bytes32[] memory levelKeys = AegisDroneLevelKeys(2);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredUpgradeResourcesTableId;
  tableIds[1] = P_RequiredBaseLevelTableId;
  tableIds[2] = P_RequiredResourcesTableId;
  tableIds[3] = P_UnitTableId;

  uint8[] memory p_requiredupgraderesources_resources_level_2 = new uint8[](1);
  p_requiredupgraderesources_resources_level_2[0] = 5;
  uint256[] memory p_requiredupgraderesources_amounts_level_2 = new uint256[](1);
  p_requiredupgraderesources_amounts_level_2[0] = 500000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredUpgradeResources.encode(
    p_requiredupgraderesources_resources_level_2,
    p_requiredupgraderesources_amounts_level_2
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredBaseLevel.encode(5);
  uint8[] memory p_requiredresources_resources_level_2 = new uint8[](3);
  p_requiredresources_resources_level_2[0] = 13;
  p_requiredresources_resources_level_2[1] = 9;
  p_requiredresources_resources_level_2[2] = 10;
  uint256[] memory p_requiredresources_amounts_level_2 = new uint256[](3);
  p_requiredresources_amounts_level_2[0] = 3;
  p_requiredresources_amounts_level_2[1] = 80000000000000000000;
  p_requiredresources_amounts_level_2[2] = 100000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_2,
    p_requiredresources_amounts_level_2
  );
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Unit.encode(
    170000000000000000000,
    600000000000000000000,
    200,
    140000000000000000000,
    200,
    100000000000000000000,
    0
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 3 ----------------------------- */
function createAegisDroneLevel3(IStore store) {
  bytes32[] memory levelKeys = AegisDroneLevelKeys(3);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredUpgradeResourcesTableId;
  tableIds[1] = P_RequiredBaseLevelTableId;
  tableIds[2] = P_RequiredResourcesTableId;
  tableIds[3] = P_UnitTableId;

  uint8[] memory p_requiredupgraderesources_resources_level_3 = new uint8[](1);
  p_requiredupgraderesources_resources_level_3[0] = 4;
  uint256[] memory p_requiredupgraderesources_amounts_level_3 = new uint256[](1);
  p_requiredupgraderesources_amounts_level_3[0] = 1000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredUpgradeResources.encode(
    p_requiredupgraderesources_resources_level_3,
    p_requiredupgraderesources_amounts_level_3
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredBaseLevel.encode(6);
  uint8[] memory p_requiredresources_resources_level_3 = new uint8[](3);
  p_requiredresources_resources_level_3[0] = 13;
  p_requiredresources_resources_level_3[1] = 9;
  p_requiredresources_resources_level_3[2] = 10;
  uint256[] memory p_requiredresources_amounts_level_3 = new uint256[](3);
  p_requiredresources_amounts_level_3[0] = 3;
  p_requiredresources_amounts_level_3[1] = 80000000000000000000;
  p_requiredresources_amounts_level_3[2] = 100000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_3,
    p_requiredresources_amounts_level_3
  );
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Unit.encode(
    180000000000000000000,
    750000000000000000000,
    250,
    160000000000000000000,
    250,
    100000000000000000000,
    0
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 4 ----------------------------- */
function createAegisDroneLevel4(IStore store) {
  bytes32[] memory levelKeys = AegisDroneLevelKeys(4);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredUpgradeResourcesTableId;
  tableIds[1] = P_RequiredBaseLevelTableId;
  tableIds[2] = P_RequiredResourcesTableId;
  tableIds[3] = P_UnitTableId;

  uint8[] memory p_requiredupgraderesources_resources_level_4 = new uint8[](1);
  p_requiredupgraderesources_resources_level_4[0] = 4;
  uint256[] memory p_requiredupgraderesources_amounts_level_4 = new uint256[](1);
  p_requiredupgraderesources_amounts_level_4[0] = 1600000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredUpgradeResources.encode(
    p_requiredupgraderesources_resources_level_4,
    p_requiredupgraderesources_amounts_level_4
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredBaseLevel.encode(7);
  uint8[] memory p_requiredresources_resources_level_4 = new uint8[](3);
  p_requiredresources_resources_level_4[0] = 13;
  p_requiredresources_resources_level_4[1] = 9;
  p_requiredresources_resources_level_4[2] = 10;
  uint256[] memory p_requiredresources_amounts_level_4 = new uint256[](3);
  p_requiredresources_amounts_level_4[0] = 3;
  p_requiredresources_amounts_level_4[1] = 80000000000000000000;
  p_requiredresources_amounts_level_4[2] = 100000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_4,
    p_requiredresources_amounts_level_4
  );
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Unit.encode(
    190000000000000000000,
    800000000000000000000,
    300,
    180000000000000000000,
    300,
    100000000000000000000,
    0
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 5 ----------------------------- */
function createAegisDroneLevel5(IStore store) {
  bytes32[] memory levelKeys = AegisDroneLevelKeys(5);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredUpgradeResourcesTableId;
  tableIds[1] = P_RequiredBaseLevelTableId;
  tableIds[2] = P_RequiredResourcesTableId;
  tableIds[3] = P_UnitTableId;

  uint8[] memory p_requiredupgraderesources_resources_level_5 = new uint8[](1);
  p_requiredupgraderesources_resources_level_5[0] = 4;
  uint256[] memory p_requiredupgraderesources_amounts_level_5 = new uint256[](1);
  p_requiredupgraderesources_amounts_level_5[0] = 2200000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredUpgradeResources.encode(
    p_requiredupgraderesources_resources_level_5,
    p_requiredupgraderesources_amounts_level_5
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredBaseLevel.encode(8);
  uint8[] memory p_requiredresources_resources_level_5 = new uint8[](3);
  p_requiredresources_resources_level_5[0] = 13;
  p_requiredresources_resources_level_5[1] = 9;
  p_requiredresources_resources_level_5[2] = 10;
  uint256[] memory p_requiredresources_amounts_level_5 = new uint256[](3);
  p_requiredresources_amounts_level_5[0] = 3;
  p_requiredresources_amounts_level_5[1] = 80000000000000000000;
  p_requiredresources_amounts_level_5[2] = 100000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_5,
    p_requiredresources_amounts_level_5
  );
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Unit.encode(
    200000000000000000000,
    850000000000000000000,
    400,
    200000000000000000000,
    400,
    100000000000000000000,
    0
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant HammerDronePrototypeId = "HammerDrone";

function HammerDroneKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = HammerDronePrototypeId;
  return _keyTuple;
}

function HammerDroneLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = HammerDronePrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function HammerDronePrototype(IStore store) {
  bytes32[] memory keys = HammerDroneKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_MaxLevelTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_MaxLevel.encode(5);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createHammerDroneLevel0(store);
  createHammerDroneLevel1(store);
  createHammerDroneLevel2(store);
  createHammerDroneLevel3(store);
  createHammerDroneLevel4(store);
  createHammerDroneLevel5(store);
}

/* ----------------------------- LEVEL 0 ----------------------------- */
function createHammerDroneLevel0(IStore store) {
  bytes32[] memory levelKeys = HammerDroneLevelKeys(0);
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_RequiredResourcesTableId;
  tableIds[1] = P_UnitTableId;

  uint8[] memory p_requiredresources_resources_level_0 = new uint8[](3);
  p_requiredresources_resources_level_0[0] = 13;
  p_requiredresources_resources_level_0[1] = 8;
  p_requiredresources_resources_level_0[2] = 10;
  uint256[] memory p_requiredresources_amounts_level_0 = new uint256[](3);
  p_requiredresources_amounts_level_0[0] = 2;
  p_requiredresources_amounts_level_0[1] = 200000000000000000000;
  p_requiredresources_amounts_level_0[2] = 50000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_0,
    p_requiredresources_amounts_level_0
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_Unit.encode(
    300000000000000000000,
    50000000000000000000,
    30,
    100000000000000000000,
    30,
    100000000000000000000,
    0
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createHammerDroneLevel1(IStore store) {
  bytes32[] memory levelKeys = HammerDroneLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredUpgradeResourcesTableId;
  tableIds[1] = P_RequiredBaseLevelTableId;
  tableIds[2] = P_RequiredResourcesTableId;
  tableIds[3] = P_UnitTableId;

  uint8[] memory p_requiredupgraderesources_resources_level_1 = new uint8[](1);
  p_requiredupgraderesources_resources_level_1[0] = 7;
  uint256[] memory p_requiredupgraderesources_amounts_level_1 = new uint256[](1);
  p_requiredupgraderesources_amounts_level_1[0] = 300000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredUpgradeResources.encode(
    p_requiredupgraderesources_resources_level_1,
    p_requiredupgraderesources_amounts_level_1
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredBaseLevel.encode(4);
  uint8[] memory p_requiredresources_resources_level_1 = new uint8[](3);
  p_requiredresources_resources_level_1[0] = 13;
  p_requiredresources_resources_level_1[1] = 8;
  p_requiredresources_resources_level_1[2] = 10;
  uint256[] memory p_requiredresources_amounts_level_1 = new uint256[](3);
  p_requiredresources_amounts_level_1[0] = 2;
  p_requiredresources_amounts_level_1[1] = 200000000000000000000;
  p_requiredresources_amounts_level_1[2] = 50000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_1,
    p_requiredresources_amounts_level_1
  );
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Unit.encode(
    320000000000000000000,
    60000000000000000000,
    50,
    120000000000000000000,
    50,
    100000000000000000000,
    0
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 2 ----------------------------- */
function createHammerDroneLevel2(IStore store) {
  bytes32[] memory levelKeys = HammerDroneLevelKeys(2);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredUpgradeResourcesTableId;
  tableIds[1] = P_RequiredBaseLevelTableId;
  tableIds[2] = P_RequiredResourcesTableId;
  tableIds[3] = P_UnitTableId;

  uint8[] memory p_requiredupgraderesources_resources_level_2 = new uint8[](1);
  p_requiredupgraderesources_resources_level_2[0] = 7;
  uint256[] memory p_requiredupgraderesources_amounts_level_2 = new uint256[](1);
  p_requiredupgraderesources_amounts_level_2[0] = 500000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredUpgradeResources.encode(
    p_requiredupgraderesources_resources_level_2,
    p_requiredupgraderesources_amounts_level_2
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredBaseLevel.encode(5);
  uint8[] memory p_requiredresources_resources_level_2 = new uint8[](3);
  p_requiredresources_resources_level_2[0] = 13;
  p_requiredresources_resources_level_2[1] = 8;
  p_requiredresources_resources_level_2[2] = 10;
  uint256[] memory p_requiredresources_amounts_level_2 = new uint256[](3);
  p_requiredresources_amounts_level_2[0] = 2;
  p_requiredresources_amounts_level_2[1] = 200000000000000000000;
  p_requiredresources_amounts_level_2[2] = 50000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_2,
    p_requiredresources_amounts_level_2
  );
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Unit.encode(
    350000000000000000000,
    70000000000000000000,
    90,
    140000000000000000000,
    90,
    100000000000000000000,
    0
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 3 ----------------------------- */
function createHammerDroneLevel3(IStore store) {
  bytes32[] memory levelKeys = HammerDroneLevelKeys(3);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredUpgradeResourcesTableId;
  tableIds[1] = P_RequiredBaseLevelTableId;
  tableIds[2] = P_RequiredResourcesTableId;
  tableIds[3] = P_UnitTableId;

  uint8[] memory p_requiredupgraderesources_resources_level_3 = new uint8[](1);
  p_requiredupgraderesources_resources_level_3[0] = 7;
  uint256[] memory p_requiredupgraderesources_amounts_level_3 = new uint256[](1);
  p_requiredupgraderesources_amounts_level_3[0] = 1000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredUpgradeResources.encode(
    p_requiredupgraderesources_resources_level_3,
    p_requiredupgraderesources_amounts_level_3
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredBaseLevel.encode(5);
  uint8[] memory p_requiredresources_resources_level_3 = new uint8[](3);
  p_requiredresources_resources_level_3[0] = 13;
  p_requiredresources_resources_level_3[1] = 8;
  p_requiredresources_resources_level_3[2] = 10;
  uint256[] memory p_requiredresources_amounts_level_3 = new uint256[](3);
  p_requiredresources_amounts_level_3[0] = 2;
  p_requiredresources_amounts_level_3[1] = 200000000000000000000;
  p_requiredresources_amounts_level_3[2] = 50000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_3,
    p_requiredresources_amounts_level_3
  );
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Unit.encode(
    400000000000000000000,
    80000000000000000000,
    150,
    160000000000000000000,
    150,
    100000000000000000000,
    0
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 4 ----------------------------- */
function createHammerDroneLevel4(IStore store) {
  bytes32[] memory levelKeys = HammerDroneLevelKeys(4);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredUpgradeResourcesTableId;
  tableIds[1] = P_RequiredBaseLevelTableId;
  tableIds[2] = P_RequiredResourcesTableId;
  tableIds[3] = P_UnitTableId;

  uint8[] memory p_requiredupgraderesources_resources_level_4 = new uint8[](1);
  p_requiredupgraderesources_resources_level_4[0] = 7;
  uint256[] memory p_requiredupgraderesources_amounts_level_4 = new uint256[](1);
  p_requiredupgraderesources_amounts_level_4[0] = 1600000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredUpgradeResources.encode(
    p_requiredupgraderesources_resources_level_4,
    p_requiredupgraderesources_amounts_level_4
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredBaseLevel.encode(3);
  uint8[] memory p_requiredresources_resources_level_4 = new uint8[](3);
  p_requiredresources_resources_level_4[0] = 13;
  p_requiredresources_resources_level_4[1] = 8;
  p_requiredresources_resources_level_4[2] = 10;
  uint256[] memory p_requiredresources_amounts_level_4 = new uint256[](3);
  p_requiredresources_amounts_level_4[0] = 2;
  p_requiredresources_amounts_level_4[1] = 200000000000000000000;
  p_requiredresources_amounts_level_4[2] = 50000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_4,
    p_requiredresources_amounts_level_4
  );
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Unit.encode(
    450000000000000000000,
    90000000000000000000,
    200,
    200000000000000000000,
    200,
    100000000000000000000,
    0
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 5 ----------------------------- */
function createHammerDroneLevel5(IStore store) {
  bytes32[] memory levelKeys = HammerDroneLevelKeys(5);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredUpgradeResourcesTableId;
  tableIds[1] = P_RequiredBaseLevelTableId;
  tableIds[2] = P_RequiredResourcesTableId;
  tableIds[3] = P_UnitTableId;

  uint8[] memory p_requiredupgraderesources_resources_level_5 = new uint8[](1);
  p_requiredupgraderesources_resources_level_5[0] = 7;
  uint256[] memory p_requiredupgraderesources_amounts_level_5 = new uint256[](1);
  p_requiredupgraderesources_amounts_level_5[0] = 2200000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredUpgradeResources.encode(
    p_requiredupgraderesources_resources_level_5,
    p_requiredupgraderesources_amounts_level_5
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredBaseLevel.encode(8);
  uint8[] memory p_requiredresources_resources_level_5 = new uint8[](3);
  p_requiredresources_resources_level_5[0] = 13;
  p_requiredresources_resources_level_5[1] = 8;
  p_requiredresources_resources_level_5[2] = 10;
  uint256[] memory p_requiredresources_amounts_level_5 = new uint256[](3);
  p_requiredresources_amounts_level_5[0] = 2;
  p_requiredresources_amounts_level_5[1] = 200000000000000000000;
  p_requiredresources_amounts_level_5[2] = 50000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_5,
    p_requiredresources_amounts_level_5
  );
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Unit.encode(
    500000000000000000000,
    100000000000000000000,
    250,
    250000000000000000000,
    250,
    100000000000000000000,
    0
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant StingerDronePrototypeId = "StingerDrone";

function StingerDroneKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = StingerDronePrototypeId;
  return _keyTuple;
}

function StingerDroneLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = StingerDronePrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function StingerDronePrototype(IStore store) {
  bytes32[] memory keys = StingerDroneKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_MaxLevelTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_MaxLevel.encode(5);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createStingerDroneLevel0(store);
  createStingerDroneLevel1(store);
  createStingerDroneLevel2(store);
  createStingerDroneLevel3(store);
  createStingerDroneLevel4(store);
  createStingerDroneLevel5(store);
}

/* ----------------------------- LEVEL 0 ----------------------------- */
function createStingerDroneLevel0(IStore store) {
  bytes32[] memory levelKeys = StingerDroneLevelKeys(0);
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_RequiredResourcesTableId;
  tableIds[1] = P_UnitTableId;

  uint8[] memory p_requiredresources_resources_level_0 = new uint8[](2);
  p_requiredresources_resources_level_0[0] = 8;
  p_requiredresources_resources_level_0[1] = 13;
  uint256[] memory p_requiredresources_amounts_level_0 = new uint256[](2);
  p_requiredresources_amounts_level_0[0] = 1500000000000000000000;
  p_requiredresources_amounts_level_0[1] = 3;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_0,
    p_requiredresources_amounts_level_0
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_Unit.encode(
    600000000000000000000,
    250000000000000000000,
    100,
    300000000000000000000,
    100,
    100000000000000000000,
    0
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createStingerDroneLevel1(IStore store) {
  bytes32[] memory levelKeys = StingerDroneLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredUpgradeResourcesTableId;
  tableIds[1] = P_RequiredBaseLevelTableId;
  tableIds[2] = P_RequiredResourcesTableId;
  tableIds[3] = P_UnitTableId;

  uint8[] memory p_requiredupgraderesources_resources_level_1 = new uint8[](1);
  p_requiredupgraderesources_resources_level_1[0] = 5;
  uint256[] memory p_requiredupgraderesources_amounts_level_1 = new uint256[](1);
  p_requiredupgraderesources_amounts_level_1[0] = 500000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredUpgradeResources.encode(
    p_requiredupgraderesources_resources_level_1,
    p_requiredupgraderesources_amounts_level_1
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredBaseLevel.encode(4);
  uint8[] memory p_requiredresources_resources_level_1 = new uint8[](2);
  p_requiredresources_resources_level_1[0] = 8;
  p_requiredresources_resources_level_1[1] = 13;
  uint256[] memory p_requiredresources_amounts_level_1 = new uint256[](2);
  p_requiredresources_amounts_level_1[0] = 1500000000000000000000;
  p_requiredresources_amounts_level_1[1] = 3;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_1,
    p_requiredresources_amounts_level_1
  );
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Unit.encode(
    900000000000000000000,
    300000000000000000000,
    150,
    400000000000000000000,
    150,
    100000000000000000000,
    0
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 2 ----------------------------- */
function createStingerDroneLevel2(IStore store) {
  bytes32[] memory levelKeys = StingerDroneLevelKeys(2);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredUpgradeResourcesTableId;
  tableIds[1] = P_RequiredBaseLevelTableId;
  tableIds[2] = P_RequiredResourcesTableId;
  tableIds[3] = P_UnitTableId;

  uint8[] memory p_requiredupgraderesources_resources_level_2 = new uint8[](1);
  p_requiredupgraderesources_resources_level_2[0] = 5;
  uint256[] memory p_requiredupgraderesources_amounts_level_2 = new uint256[](1);
  p_requiredupgraderesources_amounts_level_2[0] = 1500000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredUpgradeResources.encode(
    p_requiredupgraderesources_resources_level_2,
    p_requiredupgraderesources_amounts_level_2
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredBaseLevel.encode(5);
  uint8[] memory p_requiredresources_resources_level_2 = new uint8[](2);
  p_requiredresources_resources_level_2[0] = 8;
  p_requiredresources_resources_level_2[1] = 13;
  uint256[] memory p_requiredresources_amounts_level_2 = new uint256[](2);
  p_requiredresources_amounts_level_2[0] = 1500000000000000000000;
  p_requiredresources_amounts_level_2[1] = 3;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_2,
    p_requiredresources_amounts_level_2
  );
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Unit.encode(
    1200000000000000000000,
    350000000000000000000,
    200,
    500000000000000000000,
    200,
    100000000000000000000,
    0
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 3 ----------------------------- */
function createStingerDroneLevel3(IStore store) {
  bytes32[] memory levelKeys = StingerDroneLevelKeys(3);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredUpgradeResourcesTableId;
  tableIds[1] = P_RequiredBaseLevelTableId;
  tableIds[2] = P_RequiredResourcesTableId;
  tableIds[3] = P_UnitTableId;

  uint8[] memory p_requiredupgraderesources_resources_level_3 = new uint8[](1);
  p_requiredupgraderesources_resources_level_3[0] = 5;
  uint256[] memory p_requiredupgraderesources_amounts_level_3 = new uint256[](1);
  p_requiredupgraderesources_amounts_level_3[0] = 5000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredUpgradeResources.encode(
    p_requiredupgraderesources_resources_level_3,
    p_requiredupgraderesources_amounts_level_3
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredBaseLevel.encode(6);
  uint8[] memory p_requiredresources_resources_level_3 = new uint8[](2);
  p_requiredresources_resources_level_3[0] = 8;
  p_requiredresources_resources_level_3[1] = 13;
  uint256[] memory p_requiredresources_amounts_level_3 = new uint256[](2);
  p_requiredresources_amounts_level_3[0] = 1500000000000000000000;
  p_requiredresources_amounts_level_3[1] = 3;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_3,
    p_requiredresources_amounts_level_3
  );
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Unit.encode(
    1500000000000000000000,
    400000000000000000000,
    250,
    600000000000000000000,
    250,
    100000000000000000000,
    0
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 4 ----------------------------- */
function createStingerDroneLevel4(IStore store) {
  bytes32[] memory levelKeys = StingerDroneLevelKeys(4);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredUpgradeResourcesTableId;
  tableIds[1] = P_RequiredBaseLevelTableId;
  tableIds[2] = P_RequiredResourcesTableId;
  tableIds[3] = P_UnitTableId;

  uint8[] memory p_requiredupgraderesources_resources_level_4 = new uint8[](1);
  p_requiredupgraderesources_resources_level_4[0] = 5;
  uint256[] memory p_requiredupgraderesources_amounts_level_4 = new uint256[](1);
  p_requiredupgraderesources_amounts_level_4[0] = 10000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredUpgradeResources.encode(
    p_requiredupgraderesources_resources_level_4,
    p_requiredupgraderesources_amounts_level_4
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredBaseLevel.encode(7);
  uint8[] memory p_requiredresources_resources_level_4 = new uint8[](2);
  p_requiredresources_resources_level_4[0] = 8;
  p_requiredresources_resources_level_4[1] = 13;
  uint256[] memory p_requiredresources_amounts_level_4 = new uint256[](2);
  p_requiredresources_amounts_level_4[0] = 1500000000000000000000;
  p_requiredresources_amounts_level_4[1] = 3;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_4,
    p_requiredresources_amounts_level_4
  );
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Unit.encode(
    1800000000000000000000,
    450000000000000000000,
    300,
    700000000000000000000,
    300,
    100000000000000000000,
    0
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 5 ----------------------------- */
function createStingerDroneLevel5(IStore store) {
  bytes32[] memory levelKeys = StingerDroneLevelKeys(5);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredUpgradeResourcesTableId;
  tableIds[1] = P_RequiredBaseLevelTableId;
  tableIds[2] = P_RequiredResourcesTableId;
  tableIds[3] = P_UnitTableId;

  uint8[] memory p_requiredupgraderesources_resources_level_5 = new uint8[](1);
  p_requiredupgraderesources_resources_level_5[0] = 5;
  uint256[] memory p_requiredupgraderesources_amounts_level_5 = new uint256[](1);
  p_requiredupgraderesources_amounts_level_5[0] = 15000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredUpgradeResources.encode(
    p_requiredupgraderesources_resources_level_5,
    p_requiredupgraderesources_amounts_level_5
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredBaseLevel.encode(8);
  uint8[] memory p_requiredresources_resources_level_5 = new uint8[](2);
  p_requiredresources_resources_level_5[0] = 8;
  p_requiredresources_resources_level_5[1] = 13;
  uint256[] memory p_requiredresources_amounts_level_5 = new uint256[](2);
  p_requiredresources_amounts_level_5[0] = 1500000000000000000000;
  p_requiredresources_amounts_level_5[1] = 3;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_5,
    p_requiredresources_amounts_level_5
  );
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Unit.encode(
    2500000000000000000000,
    500000000000000000000,
    400,
    800000000000000000000,
    400,
    100000000000000000000,
    0
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant CapitalShipPrototypeId = "CapitalShip";

function CapitalShipKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = CapitalShipPrototypeId;
  return _keyTuple;
}

function CapitalShipLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = CapitalShipPrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function CapitalShipPrototype(IStore store) {
  bytes32[] memory keys = CapitalShipKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_MaxLevelTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_MaxLevel.encode(5);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createCapitalShipLevel0(store);
  createCapitalShipLevel1(store);
  createCapitalShipLevel2(store);
  createCapitalShipLevel3(store);
  createCapitalShipLevel4(store);
  createCapitalShipLevel5(store);
}

/* ----------------------------- LEVEL 0 ----------------------------- */
function createCapitalShipLevel0(IStore store) {
  bytes32[] memory levelKeys = CapitalShipLevelKeys(0);
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredResourcesTableId;
  tableIds[1] = P_RequiredBaseLevelTableId;
  tableIds[2] = P_UnitTableId;

  uint8[] memory p_requiredresources_resources_level_0 = new uint8[](1);
  p_requiredresources_resources_level_0[0] = 14;
  uint256[] memory p_requiredresources_amounts_level_0 = new uint256[](1);
  p_requiredresources_amounts_level_0[0] = 1;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_0,
    p_requiredresources_amounts_level_0
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredBaseLevel.encode(3);
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_Unit.encode(
    20000000000000000000,
    5000000000000000000000,
    100,
    1000000000000000000000,
    100,
    100000000000000000000,
    10000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createCapitalShipLevel1(IStore store) {
  bytes32[] memory levelKeys = CapitalShipLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredUpgradeResourcesTableId;
  tableIds[1] = P_RequiredBaseLevelTableId;
  tableIds[2] = P_RequiredResourcesTableId;
  tableIds[3] = P_UnitTableId;

  uint8[] memory p_requiredupgraderesources_resources_level_1 = new uint8[](1);
  p_requiredupgraderesources_resources_level_1[0] = 6;
  uint256[] memory p_requiredupgraderesources_amounts_level_1 = new uint256[](1);
  p_requiredupgraderesources_amounts_level_1[0] = 500000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredUpgradeResources.encode(
    p_requiredupgraderesources_resources_level_1,
    p_requiredupgraderesources_amounts_level_1
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredBaseLevel.encode(3);
  uint8[] memory p_requiredresources_resources_level_1 = new uint8[](1);
  p_requiredresources_resources_level_1[0] = 14;
  uint256[] memory p_requiredresources_amounts_level_1 = new uint256[](1);
  p_requiredresources_amounts_level_1[0] = 1;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_1,
    p_requiredresources_amounts_level_1
  );
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Unit.encode(
    50000000000000000000,
    5500000000000000000000,
    200,
    1000000000000000000000,
    200,
    100000000000000000000,
    12000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 2 ----------------------------- */
function createCapitalShipLevel2(IStore store) {
  bytes32[] memory levelKeys = CapitalShipLevelKeys(2);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredUpgradeResourcesTableId;
  tableIds[1] = P_RequiredBaseLevelTableId;
  tableIds[2] = P_RequiredResourcesTableId;
  tableIds[3] = P_UnitTableId;

  uint8[] memory p_requiredupgraderesources_resources_level_2 = new uint8[](1);
  p_requiredupgraderesources_resources_level_2[0] = 6;
  uint256[] memory p_requiredupgraderesources_amounts_level_2 = new uint256[](1);
  p_requiredupgraderesources_amounts_level_2[0] = 1500000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredUpgradeResources.encode(
    p_requiredupgraderesources_resources_level_2,
    p_requiredupgraderesources_amounts_level_2
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredBaseLevel.encode(4);
  uint8[] memory p_requiredresources_resources_level_2 = new uint8[](1);
  p_requiredresources_resources_level_2[0] = 14;
  uint256[] memory p_requiredresources_amounts_level_2 = new uint256[](1);
  p_requiredresources_amounts_level_2[0] = 1;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_2,
    p_requiredresources_amounts_level_2
  );
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Unit.encode(
    100000000000000000000,
    6000000000000000000000,
    300,
    1000000000000000000000,
    300,
    100000000000000000000,
    15000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 3 ----------------------------- */
function createCapitalShipLevel3(IStore store) {
  bytes32[] memory levelKeys = CapitalShipLevelKeys(3);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredUpgradeResourcesTableId;
  tableIds[1] = P_RequiredBaseLevelTableId;
  tableIds[2] = P_RequiredResourcesTableId;
  tableIds[3] = P_UnitTableId;

  uint8[] memory p_requiredupgraderesources_resources_level_3 = new uint8[](1);
  p_requiredupgraderesources_resources_level_3[0] = 6;
  uint256[] memory p_requiredupgraderesources_amounts_level_3 = new uint256[](1);
  p_requiredupgraderesources_amounts_level_3[0] = 5000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredUpgradeResources.encode(
    p_requiredupgraderesources_resources_level_3,
    p_requiredupgraderesources_amounts_level_3
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredBaseLevel.encode(6);
  uint8[] memory p_requiredresources_resources_level_3 = new uint8[](1);
  p_requiredresources_resources_level_3[0] = 14;
  uint256[] memory p_requiredresources_amounts_level_3 = new uint256[](1);
  p_requiredresources_amounts_level_3[0] = 1;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_3,
    p_requiredresources_amounts_level_3
  );
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Unit.encode(
    250000000000000000000,
    6500000000000000000000,
    400,
    1000000000000000000000,
    400,
    100000000000000000000,
    17000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 4 ----------------------------- */
function createCapitalShipLevel4(IStore store) {
  bytes32[] memory levelKeys = CapitalShipLevelKeys(4);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredUpgradeResourcesTableId;
  tableIds[1] = P_RequiredBaseLevelTableId;
  tableIds[2] = P_RequiredResourcesTableId;
  tableIds[3] = P_UnitTableId;

  uint8[] memory p_requiredupgraderesources_resources_level_4 = new uint8[](1);
  p_requiredupgraderesources_resources_level_4[0] = 6;
  uint256[] memory p_requiredupgraderesources_amounts_level_4 = new uint256[](1);
  p_requiredupgraderesources_amounts_level_4[0] = 10000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredUpgradeResources.encode(
    p_requiredupgraderesources_resources_level_4,
    p_requiredupgraderesources_amounts_level_4
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredBaseLevel.encode(7);
  uint8[] memory p_requiredresources_resources_level_4 = new uint8[](1);
  p_requiredresources_resources_level_4[0] = 14;
  uint256[] memory p_requiredresources_amounts_level_4 = new uint256[](1);
  p_requiredresources_amounts_level_4[0] = 1;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_4,
    p_requiredresources_amounts_level_4
  );
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Unit.encode(
    500000000000000000000,
    7000000000000000000000,
    500,
    1000000000000000000000,
    500,
    100000000000000000000,
    20000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 5 ----------------------------- */
function createCapitalShipLevel5(IStore store) {
  bytes32[] memory levelKeys = CapitalShipLevelKeys(5);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredUpgradeResourcesTableId;
  tableIds[1] = P_RequiredBaseLevelTableId;
  tableIds[2] = P_RequiredResourcesTableId;
  tableIds[3] = P_UnitTableId;

  uint8[] memory p_requiredupgraderesources_resources_level_5 = new uint8[](1);
  p_requiredupgraderesources_resources_level_5[0] = 6;
  uint256[] memory p_requiredupgraderesources_amounts_level_5 = new uint256[](1);
  p_requiredupgraderesources_amounts_level_5[0] = 15000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredUpgradeResources.encode(
    p_requiredupgraderesources_resources_level_5,
    p_requiredupgraderesources_amounts_level_5
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredBaseLevel.encode(8);
  uint8[] memory p_requiredresources_resources_level_5 = new uint8[](1);
  p_requiredresources_resources_level_5[0] = 14;
  uint256[] memory p_requiredresources_amounts_level_5 = new uint256[](1);
  p_requiredresources_amounts_level_5[0] = 1;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_5,
    p_requiredresources_amounts_level_5
  );
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Unit.encode(
    1000000000000000000000,
    7500000000000000000000,
    600,
    1000000000000000000000,
    600,
    100000000000000000000,
    22000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant DroidPrototypeId = "Droid";

function DroidKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = DroidPrototypeId;
  return _keyTuple;
}

function DroidLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = DroidPrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function DroidPrototype(IStore store) {
  bytes32[] memory keys = DroidKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_MaxLevelTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_MaxLevel.encode(0);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createDroidLevel0(store);
}

/* ----------------------------- LEVEL 0 ----------------------------- */
function createDroidLevel0(IStore store) {
  bytes32[] memory levelKeys = DroidLevelKeys(0);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_UnitTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_Unit.encode(
    0,
    100000000000000000000,
    1,
    0,
    1,
    100000000000000000000,
    0
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MinutemanMarinePrototypeId = "MinutemanMarine";

function MinutemanMarineKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = MinutemanMarinePrototypeId;
  return _keyTuple;
}

function MinutemanMarineLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = MinutemanMarinePrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function MinutemanMarinePrototype(IStore store) {
  bytes32[] memory keys = MinutemanMarineKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_MaxLevelTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_MaxLevel.encode(5);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createMinutemanMarineLevel0(store);
  createMinutemanMarineLevel1(store);
  createMinutemanMarineLevel2(store);
  createMinutemanMarineLevel3(store);
  createMinutemanMarineLevel4(store);
  createMinutemanMarineLevel5(store);
}

/* ----------------------------- LEVEL 0 ----------------------------- */
function createMinutemanMarineLevel0(IStore store) {
  bytes32[] memory levelKeys = MinutemanMarineLevelKeys(0);
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_RequiredResourcesTableId;
  tableIds[1] = P_UnitTableId;

  uint8[] memory p_requiredresources_resources_level_0 = new uint8[](2);
  p_requiredresources_resources_level_0[0] = 13;
  p_requiredresources_resources_level_0[1] = 1;
  uint256[] memory p_requiredresources_amounts_level_0 = new uint256[](2);
  p_requiredresources_amounts_level_0[0] = 1;
  p_requiredresources_amounts_level_0[1] = 100000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_0,
    p_requiredresources_amounts_level_0
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_Unit.encode(
    40000000000000000000,
    20000000000000000000,
    20,
    20000000000000000000,
    20,
    100000000000000000000,
    0
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createMinutemanMarineLevel1(IStore store) {
  bytes32[] memory levelKeys = MinutemanMarineLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredUpgradeResourcesTableId;
  tableIds[1] = P_RequiredBaseLevelTableId;
  tableIds[2] = P_RequiredResourcesTableId;
  tableIds[3] = P_UnitTableId;

  uint8[] memory p_requiredupgraderesources_resources_level_1 = new uint8[](1);
  p_requiredupgraderesources_resources_level_1[0] = 4;
  uint256[] memory p_requiredupgraderesources_amounts_level_1 = new uint256[](1);
  p_requiredupgraderesources_amounts_level_1[0] = 500000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredUpgradeResources.encode(
    p_requiredupgraderesources_resources_level_1,
    p_requiredupgraderesources_amounts_level_1
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredBaseLevel.encode(3);
  uint8[] memory p_requiredresources_resources_level_1 = new uint8[](2);
  p_requiredresources_resources_level_1[0] = 13;
  p_requiredresources_resources_level_1[1] = 1;
  uint256[] memory p_requiredresources_amounts_level_1 = new uint256[](2);
  p_requiredresources_amounts_level_1[0] = 1;
  p_requiredresources_amounts_level_1[1] = 100000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_1,
    p_requiredresources_amounts_level_1
  );
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Unit.encode(
    60000000000000000000,
    30000000000000000000,
    50,
    30000000000000000000,
    50,
    100000000000000000000,
    0
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 2 ----------------------------- */
function createMinutemanMarineLevel2(IStore store) {
  bytes32[] memory levelKeys = MinutemanMarineLevelKeys(2);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredUpgradeResourcesTableId;
  tableIds[1] = P_RequiredBaseLevelTableId;
  tableIds[2] = P_RequiredResourcesTableId;
  tableIds[3] = P_UnitTableId;

  uint8[] memory p_requiredupgraderesources_resources_level_2 = new uint8[](1);
  p_requiredupgraderesources_resources_level_2[0] = 4;
  uint256[] memory p_requiredupgraderesources_amounts_level_2 = new uint256[](1);
  p_requiredupgraderesources_amounts_level_2[0] = 1500000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredUpgradeResources.encode(
    p_requiredupgraderesources_resources_level_2,
    p_requiredupgraderesources_amounts_level_2
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredBaseLevel.encode(4);
  uint8[] memory p_requiredresources_resources_level_2 = new uint8[](2);
  p_requiredresources_resources_level_2[0] = 13;
  p_requiredresources_resources_level_2[1] = 1;
  uint256[] memory p_requiredresources_amounts_level_2 = new uint256[](2);
  p_requiredresources_amounts_level_2[0] = 1;
  p_requiredresources_amounts_level_2[1] = 100000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_2,
    p_requiredresources_amounts_level_2
  );
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Unit.encode(
    80000000000000000000,
    40000000000000000000,
    150,
    40000000000000000000,
    150,
    100000000000000000000,
    0
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 3 ----------------------------- */
function createMinutemanMarineLevel3(IStore store) {
  bytes32[] memory levelKeys = MinutemanMarineLevelKeys(3);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredUpgradeResourcesTableId;
  tableIds[1] = P_RequiredBaseLevelTableId;
  tableIds[2] = P_RequiredResourcesTableId;
  tableIds[3] = P_UnitTableId;

  uint8[] memory p_requiredupgraderesources_resources_level_3 = new uint8[](1);
  p_requiredupgraderesources_resources_level_3[0] = 4;
  uint256[] memory p_requiredupgraderesources_amounts_level_3 = new uint256[](1);
  p_requiredupgraderesources_amounts_level_3[0] = 5000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredUpgradeResources.encode(
    p_requiredupgraderesources_resources_level_3,
    p_requiredupgraderesources_amounts_level_3
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredBaseLevel.encode(6);
  uint8[] memory p_requiredresources_resources_level_3 = new uint8[](2);
  p_requiredresources_resources_level_3[0] = 13;
  p_requiredresources_resources_level_3[1] = 1;
  uint256[] memory p_requiredresources_amounts_level_3 = new uint256[](2);
  p_requiredresources_amounts_level_3[0] = 1;
  p_requiredresources_amounts_level_3[1] = 100000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_3,
    p_requiredresources_amounts_level_3
  );
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Unit.encode(
    100000000000000000000,
    50000000000000000000,
    200,
    50000000000000000000,
    200,
    100000000000000000000,
    0
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 4 ----------------------------- */
function createMinutemanMarineLevel4(IStore store) {
  bytes32[] memory levelKeys = MinutemanMarineLevelKeys(4);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredUpgradeResourcesTableId;
  tableIds[1] = P_RequiredBaseLevelTableId;
  tableIds[2] = P_RequiredResourcesTableId;
  tableIds[3] = P_UnitTableId;

  uint8[] memory p_requiredupgraderesources_resources_level_4 = new uint8[](1);
  p_requiredupgraderesources_resources_level_4[0] = 4;
  uint256[] memory p_requiredupgraderesources_amounts_level_4 = new uint256[](1);
  p_requiredupgraderesources_amounts_level_4[0] = 10000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredUpgradeResources.encode(
    p_requiredupgraderesources_resources_level_4,
    p_requiredupgraderesources_amounts_level_4
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredBaseLevel.encode(7);
  uint8[] memory p_requiredresources_resources_level_4 = new uint8[](2);
  p_requiredresources_resources_level_4[0] = 13;
  p_requiredresources_resources_level_4[1] = 1;
  uint256[] memory p_requiredresources_amounts_level_4 = new uint256[](2);
  p_requiredresources_amounts_level_4[0] = 1;
  p_requiredresources_amounts_level_4[1] = 100000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_4,
    p_requiredresources_amounts_level_4
  );
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Unit.encode(
    120000000000000000000,
    60000000000000000000,
    250,
    60000000000000000000,
    250,
    100000000000000000000,
    0
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 5 ----------------------------- */
function createMinutemanMarineLevel5(IStore store) {
  bytes32[] memory levelKeys = MinutemanMarineLevelKeys(5);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredUpgradeResourcesTableId;
  tableIds[1] = P_RequiredBaseLevelTableId;
  tableIds[2] = P_RequiredResourcesTableId;
  tableIds[3] = P_UnitTableId;

  uint8[] memory p_requiredupgraderesources_resources_level_5 = new uint8[](1);
  p_requiredupgraderesources_resources_level_5[0] = 4;
  uint256[] memory p_requiredupgraderesources_amounts_level_5 = new uint256[](1);
  p_requiredupgraderesources_amounts_level_5[0] = 15000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredUpgradeResources.encode(
    p_requiredupgraderesources_resources_level_5,
    p_requiredupgraderesources_amounts_level_5
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredBaseLevel.encode(8);
  uint8[] memory p_requiredresources_resources_level_5 = new uint8[](2);
  p_requiredresources_resources_level_5[0] = 13;
  p_requiredresources_resources_level_5[1] = 1;
  uint256[] memory p_requiredresources_amounts_level_5 = new uint256[](2);
  p_requiredresources_amounts_level_5[0] = 1;
  p_requiredresources_amounts_level_5[1] = 100000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_5,
    p_requiredresources_amounts_level_5
  );
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Unit.encode(
    150000000000000000000,
    70000000000000000000,
    300,
    70000000000000000000,
    300,
    100000000000000000000,
    0
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant TridentMarinePrototypeId = "TridentMarine";

function TridentMarineKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = TridentMarinePrototypeId;
  return _keyTuple;
}

function TridentMarineLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = TridentMarinePrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function TridentMarinePrototype(IStore store) {
  bytes32[] memory keys = TridentMarineKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_MaxLevelTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_MaxLevel.encode(5);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createTridentMarineLevel0(store);
  createTridentMarineLevel1(store);
  createTridentMarineLevel2(store);
  createTridentMarineLevel3(store);
  createTridentMarineLevel4(store);
  createTridentMarineLevel5(store);
}

/* ----------------------------- LEVEL 0 ----------------------------- */
function createTridentMarineLevel0(IStore store) {
  bytes32[] memory levelKeys = TridentMarineLevelKeys(0);
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_RequiredResourcesTableId;
  tableIds[1] = P_UnitTableId;

  uint8[] memory p_requiredresources_resources_level_0 = new uint8[](2);
  p_requiredresources_resources_level_0[0] = 13;
  p_requiredresources_resources_level_0[1] = 8;
  uint256[] memory p_requiredresources_amounts_level_0 = new uint256[](2);
  p_requiredresources_amounts_level_0[0] = 1;
  p_requiredresources_amounts_level_0[1] = 50000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_0,
    p_requiredresources_amounts_level_0
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_Unit.encode(
    80000000000000000000,
    100000000000000000000,
    50,
    30000000000000000000,
    50,
    100000000000000000000,
    0
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createTridentMarineLevel1(IStore store) {
  bytes32[] memory levelKeys = TridentMarineLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredUpgradeResourcesTableId;
  tableIds[1] = P_RequiredBaseLevelTableId;
  tableIds[2] = P_RequiredResourcesTableId;
  tableIds[3] = P_UnitTableId;

  uint8[] memory p_requiredupgraderesources_resources_level_1 = new uint8[](1);
  p_requiredupgraderesources_resources_level_1[0] = 4;
  uint256[] memory p_requiredupgraderesources_amounts_level_1 = new uint256[](1);
  p_requiredupgraderesources_amounts_level_1[0] = 1500000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredUpgradeResources.encode(
    p_requiredupgraderesources_resources_level_1,
    p_requiredupgraderesources_amounts_level_1
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredBaseLevel.encode(3);
  uint8[] memory p_requiredresources_resources_level_1 = new uint8[](2);
  p_requiredresources_resources_level_1[0] = 13;
  p_requiredresources_resources_level_1[1] = 8;
  uint256[] memory p_requiredresources_amounts_level_1 = new uint256[](2);
  p_requiredresources_amounts_level_1[0] = 1;
  p_requiredresources_amounts_level_1[1] = 50000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_1,
    p_requiredresources_amounts_level_1
  );
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Unit.encode(
    100000000000000000000,
    105000000000000000000,
    100,
    40000000000000000000,
    100,
    100000000000000000000,
    0
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 2 ----------------------------- */
function createTridentMarineLevel2(IStore store) {
  bytes32[] memory levelKeys = TridentMarineLevelKeys(2);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredUpgradeResourcesTableId;
  tableIds[1] = P_RequiredBaseLevelTableId;
  tableIds[2] = P_RequiredResourcesTableId;
  tableIds[3] = P_UnitTableId;

  uint8[] memory p_requiredupgraderesources_resources_level_2 = new uint8[](1);
  p_requiredupgraderesources_resources_level_2[0] = 4;
  uint256[] memory p_requiredupgraderesources_amounts_level_2 = new uint256[](1);
  p_requiredupgraderesources_amounts_level_2[0] = 5000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredUpgradeResources.encode(
    p_requiredupgraderesources_resources_level_2,
    p_requiredupgraderesources_amounts_level_2
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredBaseLevel.encode(4);
  uint8[] memory p_requiredresources_resources_level_2 = new uint8[](2);
  p_requiredresources_resources_level_2[0] = 13;
  p_requiredresources_resources_level_2[1] = 8;
  uint256[] memory p_requiredresources_amounts_level_2 = new uint256[](2);
  p_requiredresources_amounts_level_2[0] = 1;
  p_requiredresources_amounts_level_2[1] = 50000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_2,
    p_requiredresources_amounts_level_2
  );
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Unit.encode(
    120000000000000000000,
    110000000000000000000,
    150,
    50000000000000000000,
    150,
    100000000000000000000,
    0
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 3 ----------------------------- */
function createTridentMarineLevel3(IStore store) {
  bytes32[] memory levelKeys = TridentMarineLevelKeys(3);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredUpgradeResourcesTableId;
  tableIds[1] = P_RequiredResourcesTableId;
  tableIds[2] = P_RequiredBaseLevelTableId;
  tableIds[3] = P_UnitTableId;

  uint8[] memory p_requiredupgraderesources_resources_level_3 = new uint8[](1);
  p_requiredupgraderesources_resources_level_3[0] = 4;
  uint256[] memory p_requiredupgraderesources_amounts_level_3 = new uint256[](1);
  p_requiredupgraderesources_amounts_level_3[0] = 10000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredUpgradeResources.encode(
    p_requiredupgraderesources_resources_level_3,
    p_requiredupgraderesources_amounts_level_3
  );
  uint8[] memory p_requiredresources_resources_level_3 = new uint8[](2);
  p_requiredresources_resources_level_3[0] = 13;
  p_requiredresources_resources_level_3[1] = 8;
  uint256[] memory p_requiredresources_amounts_level_3 = new uint256[](2);
  p_requiredresources_amounts_level_3[0] = 1;
  p_requiredresources_amounts_level_3[1] = 50000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_3,
    p_requiredresources_amounts_level_3
  );
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredBaseLevel.encode(6);
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Unit.encode(
    140000000000000000000,
    115000000000000000000,
    200,
    60000000000000000000,
    200,
    100000000000000000000,
    0
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 4 ----------------------------- */
function createTridentMarineLevel4(IStore store) {
  bytes32[] memory levelKeys = TridentMarineLevelKeys(4);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredUpgradeResourcesTableId;
  tableIds[1] = P_RequiredBaseLevelTableId;
  tableIds[2] = P_RequiredResourcesTableId;
  tableIds[3] = P_UnitTableId;

  uint8[] memory p_requiredupgraderesources_resources_level_4 = new uint8[](1);
  p_requiredupgraderesources_resources_level_4[0] = 4;
  uint256[] memory p_requiredupgraderesources_amounts_level_4 = new uint256[](1);
  p_requiredupgraderesources_amounts_level_4[0] = 24999999999999997902848;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredUpgradeResources.encode(
    p_requiredupgraderesources_resources_level_4,
    p_requiredupgraderesources_amounts_level_4
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredBaseLevel.encode(7);
  uint8[] memory p_requiredresources_resources_level_4 = new uint8[](2);
  p_requiredresources_resources_level_4[0] = 13;
  p_requiredresources_resources_level_4[1] = 8;
  uint256[] memory p_requiredresources_amounts_level_4 = new uint256[](2);
  p_requiredresources_amounts_level_4[0] = 1;
  p_requiredresources_amounts_level_4[1] = 50000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_4,
    p_requiredresources_amounts_level_4
  );
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Unit.encode(
    160000000000000000000,
    120000000000000000000,
    250,
    70000000000000000000,
    250,
    100000000000000000000,
    0
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 5 ----------------------------- */
function createTridentMarineLevel5(IStore store) {
  bytes32[] memory levelKeys = TridentMarineLevelKeys(5);
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredUpgradeResourcesTableId;
  tableIds[1] = P_RequiredBaseLevelTableId;
  tableIds[2] = P_RequiredResourcesTableId;
  tableIds[3] = P_UnitTableId;

  uint8[] memory p_requiredupgraderesources_resources_level_5 = new uint8[](1);
  p_requiredupgraderesources_resources_level_5[0] = 4;
  uint256[] memory p_requiredupgraderesources_amounts_level_5 = new uint256[](1);
  p_requiredupgraderesources_amounts_level_5[0] = 49999999999999995805696;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredUpgradeResources.encode(
    p_requiredupgraderesources_resources_level_5,
    p_requiredupgraderesources_amounts_level_5
  );
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredBaseLevel.encode(8);
  uint8[] memory p_requiredresources_resources_level_5 = new uint8[](2);
  p_requiredresources_resources_level_5[0] = 13;
  p_requiredresources_resources_level_5[1] = 8;
  uint256[] memory p_requiredresources_amounts_level_5 = new uint256[](2);
  p_requiredresources_amounts_level_5[0] = 1;
  p_requiredresources_amounts_level_5[1] = 50000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_RequiredResources.encode(
    p_requiredresources_resources_level_5,
    p_requiredresources_amounts_level_5
  );
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_Unit.encode(
    200000000000000000000,
    125000000000000000000,
    300,
    80000000000000000000,
    300,
    100000000000000000000,
    0
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant IronPrototypeId = "Iron";

function IronKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = bytes32(uint256(1));
  return _keyTuple;
}

function IronPrototype(IStore store) {
  bytes32[] memory keys = IronKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ScoreMultiplierTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ScoreMultiplier.encode(10);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant CopperPrototypeId = "Copper";

function CopperKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = bytes32(uint256(2));
  return _keyTuple;
}

function CopperPrototype(IStore store) {
  bytes32[] memory keys = CopperKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ScoreMultiplierTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ScoreMultiplier.encode(10);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant LithiumPrototypeId = "Lithium";

function LithiumKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = bytes32(uint256(3));
  return _keyTuple;
}

function LithiumPrototype(IStore store) {
  bytes32[] memory keys = LithiumKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ScoreMultiplierTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ScoreMultiplier.encode(10);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant TitaniumPrototypeId = "Titanium";

function TitaniumKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = bytes32(uint256(4));
  return _keyTuple;
}

function TitaniumPrototype(IStore store) {
  bytes32[] memory keys = TitaniumKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ScoreMultiplierTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ScoreMultiplier.encode(750);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant IridiumPrototypeId = "Iridium";

function IridiumKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = bytes32(uint256(5));
  return _keyTuple;
}

function IridiumPrototype(IStore store) {
  bytes32[] memory keys = IridiumKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ScoreMultiplierTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ScoreMultiplier.encode(3000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant KimberlitePrototypeId = "Kimberlite";

function KimberliteKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = bytes32(uint256(6));
  return _keyTuple;
}

function KimberlitePrototype(IStore store) {
  bytes32[] memory keys = KimberliteKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ScoreMultiplierTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ScoreMultiplier.encode(8000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant PlatinumPrototypeId = "Platinum";

function PlatinumKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = bytes32(uint256(7));
  return _keyTuple;
}

function PlatinumPrototype(IStore store) {
  bytes32[] memory keys = PlatinumKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ScoreMultiplierTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ScoreMultiplier.encode(1500);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant IronPlatePrototypeId = "IronPlate";

function IronPlateKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = bytes32(uint256(8));
  return _keyTuple;
}

function IronPlatePrototype(IStore store) {
  bytes32[] memory keys = IronPlateKeys();
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_ScoreMultiplierTableId;
  tableIds[1] = P_ConsumesResourceTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ScoreMultiplier.encode(50);
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_ConsumesResource.encode(1);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant PVCellPrototypeId = "PVCell";

function PVCellKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = bytes32(uint256(10));
  return _keyTuple;
}

function PVCellPrototype(IStore store) {
  bytes32[] memory keys = PVCellKeys();
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_ScoreMultiplierTableId;
  tableIds[1] = P_ConsumesResourceTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ScoreMultiplier.encode(50);
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_ConsumesResource.encode(3);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant AlloyPrototypeId = "Alloy";

function AlloyKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = bytes32(uint256(9));
  return _keyTuple;
}

function AlloyPrototype(IStore store) {
  bytes32[] memory keys = AlloyKeys();
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_ScoreMultiplierTableId;
  tableIds[1] = P_ConsumesResourceTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ScoreMultiplier.encode(50);
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_ConsumesResource.encode(2);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant RocketFuelPrototypeId = "RocketFuel";

function RocketFuelKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = bytes32(uint256(11));
  return _keyTuple;
}

function RocketFuelPrototype(IStore store) {
  bytes32[] memory keys = RocketFuelKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ScoreMultiplierTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ScoreMultiplier.encode(200);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant SmallPrototypeId = "Small";

function SmallKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = bytes32(uint256(1));
  return _keyTuple;
}

function SmallPrototype(IStore store) {
  bytes32[] memory keys = SmallKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_SizeToAmountTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_SizeToAmount.encode(100000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MediumPrototypeId = "Medium";

function MediumKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = bytes32(uint256(2));
  return _keyTuple;
}

function MediumPrototype(IStore store) {
  bytes32[] memory keys = MediumKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_SizeToAmountTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_SizeToAmount.encode(250000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant LargePrototypeId = "Large";

function LargeKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = bytes32(uint256(3));
  return _keyTuple;
}

function LargePrototype(IStore store) {
  bytes32[] memory keys = LargeKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_SizeToAmountTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_SizeToAmount.encode(500000);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant ObjectivesPrototypeId = "Objectives";

function ObjectivesKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = ObjectivesPrototypeId;
  return _keyTuple;
}

function ObjectivesLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = ObjectivesPrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function ObjectivesPrototype(IStore store) {
  bytes32[] memory keys = ObjectivesKeys();
  ResourceId[] memory tableIds = new ResourceId[](0);
  bytes[] memory staticData = new bytes[](0);
  PackedCounter[] memory encodedLengths = new PackedCounter[](0);
  bytes[] memory dynamicData = new bytes[](0);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createObjectivesLevel0(store);
  createObjectivesLevel1(store);
  createObjectivesLevel2(store);
  createObjectivesLevel3(store);
  createObjectivesLevel4(store);
  createObjectivesLevel5(store);
  createObjectivesLevel6(store);
  createObjectivesLevel7(store);
  createObjectivesLevel8(store);
  createObjectivesLevel9(store);
  createObjectivesLevel10(store);
  createObjectivesLevel11(store);
  createObjectivesLevel12(store);
  createObjectivesLevel13(store);
  createObjectivesLevel14(store);
  createObjectivesLevel15(store);
  createObjectivesLevel16(store);
  createObjectivesLevel17(store);
  createObjectivesLevel18(store);
  createObjectivesLevel19(store);
  createObjectivesLevel20(store);
  createObjectivesLevel21(store);
  createObjectivesLevel22(store);
  createObjectivesLevel23(store);
  createObjectivesLevel24(store);
  createObjectivesLevel25(store);
  createObjectivesLevel26(store);
  createObjectivesLevel27(store);
  createObjectivesLevel28(store);
  createObjectivesLevel29(store);
  createObjectivesLevel30(store);
  createObjectivesLevel31(store);
  createObjectivesLevel32(store);
  createObjectivesLevel33(store);
  createObjectivesLevel34(store);
  createObjectivesLevel35(store);
  createObjectivesLevel36(store);
  createObjectivesLevel37(store);
  createObjectivesLevel38(store);
  createObjectivesLevel39(store);
  createObjectivesLevel40(store);
  createObjectivesLevel41(store);
  createObjectivesLevel42(store);
  createObjectivesLevel43(store);
  createObjectivesLevel44(store);
  createObjectivesLevel45(store);
  createObjectivesLevel46(store);
  createObjectivesLevel47(store);
  createObjectivesLevel48(store);
  createObjectivesLevel49(store);
  createObjectivesLevel50(store);
  createObjectivesLevel51(store);
  createObjectivesLevel52(store);
  createObjectivesLevel53(store);
  createObjectivesLevel54(store);
  createObjectivesLevel55(store);
  createObjectivesLevel56(store);
  createObjectivesLevel57(store);
  createObjectivesLevel58(store);
  createObjectivesLevel59(store);
  createObjectivesLevel60(store);
  createObjectivesLevel61(store);
  createObjectivesLevel62(store);
  createObjectivesLevel63(store);
  createObjectivesLevel64(store);
  createObjectivesLevel65(store);
  createObjectivesLevel66(store);
  createObjectivesLevel67(store);
  createObjectivesLevel68(store);
}

/* ----------------------------- LEVEL 0 ----------------------------- */
function createObjectivesLevel0(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(0);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4e554c4c00000000000000000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createObjectivesLevel1(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4275696c6449726f6e4d696e6500000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 2 ----------------------------- */
function createObjectivesLevel2(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(2);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4275696c64436f707065724d696e650000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 3 ----------------------------- */
function createObjectivesLevel3(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(3);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4275696c64476172616765000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 4 ----------------------------- */
function createObjectivesLevel4(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(4);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4465666561745069726174654261736531000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 5 ----------------------------- */
function createObjectivesLevel5(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(5);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4275696c64576f726b73686f7000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 6 ----------------------------- */
function createObjectivesLevel6(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(6);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x557067726164654d61696e426173650000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 7 ----------------------------- */
function createObjectivesLevel7(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(7);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4465666561745069726174654261736532000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 8 ----------------------------- */
function createObjectivesLevel8(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(8);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4465666561745069726174654261736533000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 9 ----------------------------- */
function createObjectivesLevel9(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(9);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4465666561745069726174654261736534000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 10 ----------------------------- */
function createObjectivesLevel10(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(10);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4465666561745069726174654261736535000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 11 ----------------------------- */
function createObjectivesLevel11(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(11);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4465666561745069726174654261736536000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 12 ----------------------------- */
function createObjectivesLevel12(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(12);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4465666561745069726174654261736537000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 13 ----------------------------- */
function createObjectivesLevel13(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(13);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4465666561745069726174654261736538000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 14 ----------------------------- */
function createObjectivesLevel14(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(14);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4465666561745069726174654261736539000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 15 ----------------------------- */
function createObjectivesLevel15(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(15);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4465666561745069726174654261736531300000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 16 ----------------------------- */
function createObjectivesLevel16(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(16);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4465666561745069726174654261736531310000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 17 ----------------------------- */
function createObjectivesLevel17(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(17);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4465666561745069726174654261736531320000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 18 ----------------------------- */
function createObjectivesLevel18(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(18);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4465666561745069726174654261736531330000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 19 ----------------------------- */
function createObjectivesLevel19(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(19);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4465666561745069726174654261736531340000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 20 ----------------------------- */
function createObjectivesLevel20(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(20);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4465666561745069726174654261736531350000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 21 ----------------------------- */
function createObjectivesLevel21(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(21);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4465666561745069726174654261736531360000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 22 ----------------------------- */
function createObjectivesLevel22(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(22);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4465666561745069726174654261736531370000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 23 ----------------------------- */
function createObjectivesLevel23(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(23);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4275696c644c69746869756d4d696e6500000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 24 ----------------------------- */
function createObjectivesLevel24(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(24);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4275696c6449726f6e506c617465466163746f72790000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 25 ----------------------------- */
function createObjectivesLevel25(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(25);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4275696c6448616e676172000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 26 ----------------------------- */
function createObjectivesLevel26(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(26);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4275696c64505643656c6c466163746f72790000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 27 ----------------------------- */
function createObjectivesLevel27(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(27);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4275696c64536f6c617250616e656c0000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 28 ----------------------------- */
function createObjectivesLevel28(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(28);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4275696c6444726f6e65466163746f7279000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 29 ----------------------------- */
function createObjectivesLevel29(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(29);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4275696c64537461726d61707065720000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 30 ----------------------------- */
function createObjectivesLevel30(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(30);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4275696c6453414d4c61756e6368657200000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 31 ----------------------------- */
function createObjectivesLevel31(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(31);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4275696c645661756c7400000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 32 ----------------------------- */
function createObjectivesLevel32(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(32);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4275696c64536869656c6447656e657261746f72000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 33 ----------------------------- */
function createObjectivesLevel33(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(33);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x547261696e4d696e7574656d616e4d6172696e65310000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 34 ----------------------------- */
function createObjectivesLevel34(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(34);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x547261696e4d696e7574656d616e4d6172696e65320000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 35 ----------------------------- */
function createObjectivesLevel35(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(35);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x547261696e4d696e7574656d616e4d6172696e65330000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 36 ----------------------------- */
function createObjectivesLevel36(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(36);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x547261696e54726964656e744d6172696e653100000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 37 ----------------------------- */
function createObjectivesLevel37(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(37);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x547261696e54726964656e744d6172696e653200000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 38 ----------------------------- */
function createObjectivesLevel38(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(38);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x547261696e54726964656e744d6172696e653300000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 39 ----------------------------- */
function createObjectivesLevel39(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(39);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x547261696e416e76696c44726f6e653100000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 40 ----------------------------- */
function createObjectivesLevel40(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(40);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x547261696e416e76696c44726f6e653200000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 41 ----------------------------- */
function createObjectivesLevel41(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(41);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x547261696e416e76696c44726f6e653300000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 42 ----------------------------- */
function createObjectivesLevel42(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(42);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x547261696e48616d6d657244726f6e6531000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 43 ----------------------------- */
function createObjectivesLevel43(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(43);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x547261696e48616d6d657244726f6e6532000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 44 ----------------------------- */
function createObjectivesLevel44(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(44);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x547261696e48616d6d657244726f6e6533000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 45 ----------------------------- */
function createObjectivesLevel45(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(45);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x547261696e416567697344726f6e653100000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 46 ----------------------------- */
function createObjectivesLevel46(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(46);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x547261696e416567697344726f6e653200000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 47 ----------------------------- */
function createObjectivesLevel47(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(47);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x547261696e416567697344726f6e653300000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 48 ----------------------------- */
function createObjectivesLevel48(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(48);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x547261696e5374696e67657244726f6e65310000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 49 ----------------------------- */
function createObjectivesLevel49(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(49);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x547261696e5374696e67657244726f6e65320000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 50 ----------------------------- */
function createObjectivesLevel50(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(50);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x547261696e5374696e67657244726f6e65330000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 51 ----------------------------- */
function createObjectivesLevel51(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(51);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x526169645261775265736f757263657331000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 52 ----------------------------- */
function createObjectivesLevel52(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(52);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x526169645261775265736f757263657332000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 53 ----------------------------- */
function createObjectivesLevel53(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(53);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x526169645261775265736f757263657333000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 54 ----------------------------- */
function createObjectivesLevel54(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(54);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x52616964466163746f72795265736f7572636573310000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 55 ----------------------------- */
function createObjectivesLevel55(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(55);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x52616964466163746f72795265736f7572636573320000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 56 ----------------------------- */
function createObjectivesLevel56(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(56);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x52616964466163746f72795265736f7572636573330000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 57 ----------------------------- */
function createObjectivesLevel57(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(57);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x44657374726f79456e656d79556e697473310000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 58 ----------------------------- */
function createObjectivesLevel58(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(58);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x44657374726f79456e656d79556e697473320000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 59 ----------------------------- */
function createObjectivesLevel59(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(59);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x44657374726f79456e656d79556e697473330000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 60 ----------------------------- */
function createObjectivesLevel60(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(60);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x44657374726f79456e656d79556e697473340000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 61 ----------------------------- */
function createObjectivesLevel61(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(61);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x44657374726f79456e656d79556e697473350000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 62 ----------------------------- */
function createObjectivesLevel62(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(62);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x457870616e644261736531000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 63 ----------------------------- */
function createObjectivesLevel63(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(63);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x457870616e644261736532000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 64 ----------------------------- */
function createObjectivesLevel64(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(64);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x457870616e644261736533000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 65 ----------------------------- */
function createObjectivesLevel65(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(65);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x457870616e644261736534000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 66 ----------------------------- */
function createObjectivesLevel66(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(66);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x457870616e644261736535000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 67 ----------------------------- */
function createObjectivesLevel67(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(67);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x457870616e644261736536000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

/* ----------------------------- LEVEL 68 ----------------------------- */
function createObjectivesLevel68(IStore store) {
  bytes32[] memory levelKeys = ObjectivesLevelKeys(68);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_EnumToPrototypeTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_EnumToPrototype.encode(
    0x4c454e4754480000000000000000000000000000000000000000000000000000
  );

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant UpgradeMainBasePrototypeId = "UpgradeMainBase";

function UpgradeMainBaseKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = UpgradeMainBasePrototypeId;
  return _keyTuple;
}

function UpgradeMainBaseLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = UpgradeMainBasePrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function UpgradeMainBasePrototype(IStore store) {
  bytes32[] memory keys = UpgradeMainBaseKeys();
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_ResourceRewardTableId;

  uint8[] memory p_resourcereward_resources = new uint8[](1);
  p_resourcereward_resources[0] = 1;
  uint256[] memory p_resourcereward_amounts = new uint256[](1);
  p_resourcereward_amounts[0] = 3000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createUpgradeMainBaseLevel1(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createUpgradeMainBaseLevel1(IStore store) {
  bytes32[] memory levelKeys = UpgradeMainBaseLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_RequiredBaseLevelTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(2);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant DefeatPirateBase1PrototypeId = "DefeatPirateBase1";

function DefeatPirateBase1Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = DefeatPirateBase1PrototypeId;
  return _keyTuple;
}

function DefeatPirateBase1Prototype(IStore store) {
  bytes32[] memory keys = DefeatPirateBase1Keys();
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_DefeatedPiratesTableId;
  tableIds[2] = P_SpawnPirateAsteroidTableId;
  tableIds[3] = P_UnitRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x4275696c64476172616765000000000000000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_defeatedpirates_value = new bytes32[](1);
  p_defeatedpirates_value[0] = 0x4275696c64476172616765000000000000000000000000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_DefeatedPirates.encode(p_defeatedpirates_value);
  uint8[] memory p_spawnpirateasteroid_resources = new uint8[](3);
  p_spawnpirateasteroid_resources[0] = 1;
  p_spawnpirateasteroid_resources[1] = 2;
  p_spawnpirateasteroid_resources[2] = 8;
  uint256[] memory p_spawnpirateasteroid_resourceAmounts = new uint256[](3);
  p_spawnpirateasteroid_resourceAmounts[0] = 300000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[1] = 300000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[2] = 250000000000000000000;
  bytes32[] memory p_spawnpirateasteroid_units = new bytes32[](1);
  p_spawnpirateasteroid_units[0] = 0x4c696768746e696e674372616674000000000000000000000000000000000000;
  uint256[] memory p_spawnpirateasteroid_unitAmounts = new uint256[](1);
  p_spawnpirateasteroid_unitAmounts[0] = 20;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_SpawnPirateAsteroid.encode(
    -10,
    22,
    p_spawnpirateasteroid_resources,
    p_spawnpirateasteroid_resourceAmounts,
    p_spawnpirateasteroid_units,
    p_spawnpirateasteroid_unitAmounts
  );
  bytes32[] memory p_unitreward_units = new bytes32[](1);
  p_unitreward_units[0] = 0x4c696768746e696e674372616674000000000000000000000000000000000000;
  uint256[] memory p_unitreward_amounts = new uint256[](1);
  p_unitreward_amounts[0] = 20;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_UnitReward.encode(p_unitreward_units, p_unitreward_amounts);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant DefeatPirateBase2PrototypeId = "DefeatPirateBase2";

function DefeatPirateBase2Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = DefeatPirateBase2PrototypeId;
  return _keyTuple;
}

function DefeatPirateBase2Prototype(IStore store) {
  bytes32[] memory keys = DefeatPirateBase2Keys();
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_DefeatedPiratesTableId;
  tableIds[2] = P_SpawnPirateAsteroidTableId;
  tableIds[3] = P_UnitRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x4465666561745069726174654261736531000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_defeatedpirates_value = new bytes32[](1);
  p_defeatedpirates_value[0] = 0x4465666561745069726174654261736531000000000000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_DefeatedPirates.encode(p_defeatedpirates_value);
  uint8[] memory p_spawnpirateasteroid_resources = new uint8[](4);
  p_spawnpirateasteroid_resources[0] = 2;
  p_spawnpirateasteroid_resources[1] = 1;
  p_spawnpirateasteroid_resources[2] = 8;
  p_spawnpirateasteroid_resources[3] = 3;
  uint256[] memory p_spawnpirateasteroid_resourceAmounts = new uint256[](4);
  p_spawnpirateasteroid_resourceAmounts[0] = 500000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[1] = 500000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[2] = 500000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[3] = 500000000000000000000;
  bytes32[] memory p_spawnpirateasteroid_units = new bytes32[](2);
  p_spawnpirateasteroid_units[0] = 0x4c696768746e696e674372616674000000000000000000000000000000000000;
  p_spawnpirateasteroid_units[1] = 0x4d696e7574656d616e4d6172696e650000000000000000000000000000000000;
  uint256[] memory p_spawnpirateasteroid_unitAmounts = new uint256[](2);
  p_spawnpirateasteroid_unitAmounts[0] = 40;
  p_spawnpirateasteroid_unitAmounts[1] = 20;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_SpawnPirateAsteroid.encode(
    -20,
    10,
    p_spawnpirateasteroid_resources,
    p_spawnpirateasteroid_resourceAmounts,
    p_spawnpirateasteroid_units,
    p_spawnpirateasteroid_unitAmounts
  );
  bytes32[] memory p_unitreward_units = new bytes32[](1);
  p_unitreward_units[0] = 0x4d696e7574656d616e4d6172696e650000000000000000000000000000000000;
  uint256[] memory p_unitreward_amounts = new uint256[](1);
  p_unitreward_amounts[0] = 10;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_UnitReward.encode(p_unitreward_units, p_unitreward_amounts);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant DefeatPirateBase3PrototypeId = "DefeatPirateBase3";

function DefeatPirateBase3Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = DefeatPirateBase3PrototypeId;
  return _keyTuple;
}

function DefeatPirateBase3Prototype(IStore store) {
  bytes32[] memory keys = DefeatPirateBase3Keys();
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_DefeatedPiratesTableId;
  tableIds[2] = P_SpawnPirateAsteroidTableId;
  tableIds[3] = P_UnitRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x4465666561745069726174654261736532000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_defeatedpirates_value = new bytes32[](1);
  p_defeatedpirates_value[0] = 0x4465666561745069726174654261736532000000000000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_DefeatedPirates.encode(p_defeatedpirates_value);
  uint8[] memory p_spawnpirateasteroid_resources = new uint8[](4);
  p_spawnpirateasteroid_resources[0] = 2;
  p_spawnpirateasteroid_resources[1] = 1;
  p_spawnpirateasteroid_resources[2] = 8;
  p_spawnpirateasteroid_resources[3] = 3;
  uint256[] memory p_spawnpirateasteroid_resourceAmounts = new uint256[](4);
  p_spawnpirateasteroid_resourceAmounts[0] = 1000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[1] = 1000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[2] = 1000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[3] = 1000000000000000000000;
  bytes32[] memory p_spawnpirateasteroid_units = new bytes32[](1);
  p_spawnpirateasteroid_units[0] = 0x4d696e7574656d616e4d6172696e650000000000000000000000000000000000;
  uint256[] memory p_spawnpirateasteroid_unitAmounts = new uint256[](1);
  p_spawnpirateasteroid_unitAmounts[0] = 50;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_SpawnPirateAsteroid.encode(
    -10,
    -10,
    p_spawnpirateasteroid_resources,
    p_spawnpirateasteroid_resourceAmounts,
    p_spawnpirateasteroid_units,
    p_spawnpirateasteroid_unitAmounts
  );
  bytes32[] memory p_unitreward_units = new bytes32[](1);
  p_unitreward_units[0] = 0x4d696e7574656d616e4d6172696e650000000000000000000000000000000000;
  uint256[] memory p_unitreward_amounts = new uint256[](1);
  p_unitreward_amounts[0] = 50;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_UnitReward.encode(p_unitreward_units, p_unitreward_amounts);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant DefeatPirateBase4PrototypeId = "DefeatPirateBase4";

function DefeatPirateBase4Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = DefeatPirateBase4PrototypeId;
  return _keyTuple;
}

function DefeatPirateBase4Prototype(IStore store) {
  bytes32[] memory keys = DefeatPirateBase4Keys();
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_DefeatedPiratesTableId;
  tableIds[2] = P_SpawnPirateAsteroidTableId;
  tableIds[3] = P_UnitRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x4465666561745069726174654261736533000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_defeatedpirates_value = new bytes32[](1);
  p_defeatedpirates_value[0] = 0x4465666561745069726174654261736533000000000000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_DefeatedPirates.encode(p_defeatedpirates_value);
  uint8[] memory p_spawnpirateasteroid_resources = new uint8[](4);
  p_spawnpirateasteroid_resources[0] = 2;
  p_spawnpirateasteroid_resources[1] = 1;
  p_spawnpirateasteroid_resources[2] = 8;
  p_spawnpirateasteroid_resources[3] = 3;
  uint256[] memory p_spawnpirateasteroid_resourceAmounts = new uint256[](4);
  p_spawnpirateasteroid_resourceAmounts[0] = 1500000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[1] = 1500000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[2] = 1500000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[3] = 1500000000000000000000;
  bytes32[] memory p_spawnpirateasteroid_units = new bytes32[](1);
  p_spawnpirateasteroid_units[0] = 0x4d696e7574656d616e4d6172696e650000000000000000000000000000000000;
  uint256[] memory p_spawnpirateasteroid_unitAmounts = new uint256[](1);
  p_spawnpirateasteroid_unitAmounts[0] = 60;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_SpawnPirateAsteroid.encode(
    -12,
    -15,
    p_spawnpirateasteroid_resources,
    p_spawnpirateasteroid_resourceAmounts,
    p_spawnpirateasteroid_units,
    p_spawnpirateasteroid_unitAmounts
  );
  bytes32[] memory p_unitreward_units = new bytes32[](1);
  p_unitreward_units[0] = 0x4d696e7574656d616e4d6172696e650000000000000000000000000000000000;
  uint256[] memory p_unitreward_amounts = new uint256[](1);
  p_unitreward_amounts[0] = 50;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_UnitReward.encode(p_unitreward_units, p_unitreward_amounts);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant DefeatPirateBase5PrototypeId = "DefeatPirateBase5";

function DefeatPirateBase5Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = DefeatPirateBase5PrototypeId;
  return _keyTuple;
}

function DefeatPirateBase5Prototype(IStore store) {
  bytes32[] memory keys = DefeatPirateBase5Keys();
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_DefeatedPiratesTableId;
  tableIds[2] = P_SpawnPirateAsteroidTableId;
  tableIds[3] = P_UnitRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x4465666561745069726174654261736534000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_defeatedpirates_value = new bytes32[](1);
  p_defeatedpirates_value[0] = 0x4465666561745069726174654261736534000000000000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_DefeatedPirates.encode(p_defeatedpirates_value);
  uint8[] memory p_spawnpirateasteroid_resources = new uint8[](6);
  p_spawnpirateasteroid_resources[0] = 2;
  p_spawnpirateasteroid_resources[1] = 1;
  p_spawnpirateasteroid_resources[2] = 3;
  p_spawnpirateasteroid_resources[3] = 8;
  p_spawnpirateasteroid_resources[4] = 10;
  p_spawnpirateasteroid_resources[5] = 9;
  uint256[] memory p_spawnpirateasteroid_resourceAmounts = new uint256[](6);
  p_spawnpirateasteroid_resourceAmounts[0] = 1500000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[1] = 1500000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[2] = 1500000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[3] = 1000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[4] = 1000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[5] = 1000000000000000000000;
  bytes32[] memory p_spawnpirateasteroid_units = new bytes32[](1);
  p_spawnpirateasteroid_units[0] = 0x4d696e7574656d616e4d6172696e650000000000000000000000000000000000;
  uint256[] memory p_spawnpirateasteroid_unitAmounts = new uint256[](1);
  p_spawnpirateasteroid_unitAmounts[0] = 100;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_SpawnPirateAsteroid.encode(
    12,
    -10,
    p_spawnpirateasteroid_resources,
    p_spawnpirateasteroid_resourceAmounts,
    p_spawnpirateasteroid_units,
    p_spawnpirateasteroid_unitAmounts
  );
  bytes32[] memory p_unitreward_units = new bytes32[](1);
  p_unitreward_units[0] = 0x4d696e7574656d616e4d6172696e650000000000000000000000000000000000;
  uint256[] memory p_unitreward_amounts = new uint256[](1);
  p_unitreward_amounts[0] = 50;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_UnitReward.encode(p_unitreward_units, p_unitreward_amounts);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant DefeatPirateBase6PrototypeId = "DefeatPirateBase6";

function DefeatPirateBase6Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = DefeatPirateBase6PrototypeId;
  return _keyTuple;
}

function DefeatPirateBase6Prototype(IStore store) {
  bytes32[] memory keys = DefeatPirateBase6Keys();
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_DefeatedPiratesTableId;
  tableIds[2] = P_SpawnPirateAsteroidTableId;
  tableIds[3] = P_UnitRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x4465666561745069726174654261736535000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_defeatedpirates_value = new bytes32[](1);
  p_defeatedpirates_value[0] = 0x4465666561745069726174654261736535000000000000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_DefeatedPirates.encode(p_defeatedpirates_value);
  uint8[] memory p_spawnpirateasteroid_resources = new uint8[](6);
  p_spawnpirateasteroid_resources[0] = 2;
  p_spawnpirateasteroid_resources[1] = 1;
  p_spawnpirateasteroid_resources[2] = 3;
  p_spawnpirateasteroid_resources[3] = 8;
  p_spawnpirateasteroid_resources[4] = 10;
  p_spawnpirateasteroid_resources[5] = 9;
  uint256[] memory p_spawnpirateasteroid_resourceAmounts = new uint256[](6);
  p_spawnpirateasteroid_resourceAmounts[0] = 1500000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[1] = 1500000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[2] = 1500000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[3] = 1000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[4] = 1000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[5] = 1000000000000000000000;
  bytes32[] memory p_spawnpirateasteroid_units = new bytes32[](1);
  p_spawnpirateasteroid_units[0] = 0x4d696e7574656d616e4d6172696e650000000000000000000000000000000000;
  uint256[] memory p_spawnpirateasteroid_unitAmounts = new uint256[](1);
  p_spawnpirateasteroid_unitAmounts[0] = 150;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_SpawnPirateAsteroid.encode(
    16,
    10,
    p_spawnpirateasteroid_resources,
    p_spawnpirateasteroid_resourceAmounts,
    p_spawnpirateasteroid_units,
    p_spawnpirateasteroid_unitAmounts
  );
  bytes32[] memory p_unitreward_units = new bytes32[](1);
  p_unitreward_units[0] = 0x4d696e7574656d616e4d6172696e650000000000000000000000000000000000;
  uint256[] memory p_unitreward_amounts = new uint256[](1);
  p_unitreward_amounts[0] = 50;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_UnitReward.encode(p_unitreward_units, p_unitreward_amounts);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant DefeatPirateBase7PrototypeId = "DefeatPirateBase7";

function DefeatPirateBase7Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = DefeatPirateBase7PrototypeId;
  return _keyTuple;
}

function DefeatPirateBase7Prototype(IStore store) {
  bytes32[] memory keys = DefeatPirateBase7Keys();
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_DefeatedPiratesTableId;
  tableIds[2] = P_SpawnPirateAsteroidTableId;
  tableIds[3] = P_UnitRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x4465666561745069726174654261736536000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_defeatedpirates_value = new bytes32[](1);
  p_defeatedpirates_value[0] = 0x4465666561745069726174654261736536000000000000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_DefeatedPirates.encode(p_defeatedpirates_value);
  uint8[] memory p_spawnpirateasteroid_resources = new uint8[](6);
  p_spawnpirateasteroid_resources[0] = 2;
  p_spawnpirateasteroid_resources[1] = 1;
  p_spawnpirateasteroid_resources[2] = 3;
  p_spawnpirateasteroid_resources[3] = 8;
  p_spawnpirateasteroid_resources[4] = 10;
  p_spawnpirateasteroid_resources[5] = 9;
  uint256[] memory p_spawnpirateasteroid_resourceAmounts = new uint256[](6);
  p_spawnpirateasteroid_resourceAmounts[0] = 2500000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[1] = 2500000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[2] = 2500000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[3] = 1500000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[4] = 1500000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[5] = 1500000000000000000000;
  bytes32[] memory p_spawnpirateasteroid_units = new bytes32[](1);
  p_spawnpirateasteroid_units[0] = 0x4d696e7574656d616e4d6172696e650000000000000000000000000000000000;
  uint256[] memory p_spawnpirateasteroid_unitAmounts = new uint256[](1);
  p_spawnpirateasteroid_unitAmounts[0] = 250;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_SpawnPirateAsteroid.encode(
    16,
    10,
    p_spawnpirateasteroid_resources,
    p_spawnpirateasteroid_resourceAmounts,
    p_spawnpirateasteroid_units,
    p_spawnpirateasteroid_unitAmounts
  );
  bytes32[] memory p_unitreward_units = new bytes32[](1);
  p_unitreward_units[0] = 0x54726964656e744d6172696e6500000000000000000000000000000000000000;
  uint256[] memory p_unitreward_amounts = new uint256[](1);
  p_unitreward_amounts[0] = 50;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_UnitReward.encode(p_unitreward_units, p_unitreward_amounts);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant DefeatPirateBase8PrototypeId = "DefeatPirateBase8";

function DefeatPirateBase8Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = DefeatPirateBase8PrototypeId;
  return _keyTuple;
}

function DefeatPirateBase8Prototype(IStore store) {
  bytes32[] memory keys = DefeatPirateBase8Keys();
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_DefeatedPiratesTableId;
  tableIds[2] = P_SpawnPirateAsteroidTableId;
  tableIds[3] = P_UnitRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x4465666561745069726174654261736537000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_defeatedpirates_value = new bytes32[](1);
  p_defeatedpirates_value[0] = 0x4465666561745069726174654261736537000000000000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_DefeatedPirates.encode(p_defeatedpirates_value);
  uint8[] memory p_spawnpirateasteroid_resources = new uint8[](6);
  p_spawnpirateasteroid_resources[0] = 2;
  p_spawnpirateasteroid_resources[1] = 1;
  p_spawnpirateasteroid_resources[2] = 3;
  p_spawnpirateasteroid_resources[3] = 8;
  p_spawnpirateasteroid_resources[4] = 10;
  p_spawnpirateasteroid_resources[5] = 9;
  uint256[] memory p_spawnpirateasteroid_resourceAmounts = new uint256[](6);
  p_spawnpirateasteroid_resourceAmounts[0] = 5000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[1] = 5000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[2] = 5000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[3] = 3000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[4] = 3000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[5] = 3000000000000000000000;
  bytes32[] memory p_spawnpirateasteroid_units = new bytes32[](2);
  p_spawnpirateasteroid_units[0] = 0x416e76696c44726f6e6500000000000000000000000000000000000000000000;
  p_spawnpirateasteroid_units[1] = 0x4d696e7574656d616e4d6172696e650000000000000000000000000000000000;
  uint256[] memory p_spawnpirateasteroid_unitAmounts = new uint256[](2);
  p_spawnpirateasteroid_unitAmounts[0] = 40;
  p_spawnpirateasteroid_unitAmounts[1] = 250;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_SpawnPirateAsteroid.encode(
    16,
    10,
    p_spawnpirateasteroid_resources,
    p_spawnpirateasteroid_resourceAmounts,
    p_spawnpirateasteroid_units,
    p_spawnpirateasteroid_unitAmounts
  );
  bytes32[] memory p_unitreward_units = new bytes32[](1);
  p_unitreward_units[0] = 0x54726964656e744d6172696e6500000000000000000000000000000000000000;
  uint256[] memory p_unitreward_amounts = new uint256[](1);
  p_unitreward_amounts[0] = 100;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_UnitReward.encode(p_unitreward_units, p_unitreward_amounts);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant DefeatPirateBase9PrototypeId = "DefeatPirateBase9";

function DefeatPirateBase9Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = DefeatPirateBase9PrototypeId;
  return _keyTuple;
}

function DefeatPirateBase9Prototype(IStore store) {
  bytes32[] memory keys = DefeatPirateBase9Keys();
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_DefeatedPiratesTableId;
  tableIds[2] = P_SpawnPirateAsteroidTableId;
  tableIds[3] = P_UnitRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x4465666561745069726174654261736538000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_defeatedpirates_value = new bytes32[](1);
  p_defeatedpirates_value[0] = 0x4465666561745069726174654261736538000000000000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_DefeatedPirates.encode(p_defeatedpirates_value);
  uint8[] memory p_spawnpirateasteroid_resources = new uint8[](6);
  p_spawnpirateasteroid_resources[0] = 2;
  p_spawnpirateasteroid_resources[1] = 1;
  p_spawnpirateasteroid_resources[2] = 3;
  p_spawnpirateasteroid_resources[3] = 8;
  p_spawnpirateasteroid_resources[4] = 10;
  p_spawnpirateasteroid_resources[5] = 9;
  uint256[] memory p_spawnpirateasteroid_resourceAmounts = new uint256[](6);
  p_spawnpirateasteroid_resourceAmounts[0] = 5000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[1] = 5000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[2] = 5000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[3] = 3000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[4] = 3000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[5] = 3000000000000000000000;
  bytes32[] memory p_spawnpirateasteroid_units = new bytes32[](2);
  p_spawnpirateasteroid_units[0] = 0x416e76696c44726f6e6500000000000000000000000000000000000000000000;
  p_spawnpirateasteroid_units[1] = 0x4d696e7574656d616e4d6172696e650000000000000000000000000000000000;
  uint256[] memory p_spawnpirateasteroid_unitAmounts = new uint256[](2);
  p_spawnpirateasteroid_unitAmounts[0] = 50;
  p_spawnpirateasteroid_unitAmounts[1] = 300;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_SpawnPirateAsteroid.encode(
    -3,
    -15,
    p_spawnpirateasteroid_resources,
    p_spawnpirateasteroid_resourceAmounts,
    p_spawnpirateasteroid_units,
    p_spawnpirateasteroid_unitAmounts
  );
  bytes32[] memory p_unitreward_units = new bytes32[](1);
  p_unitreward_units[0] = 0x416e76696c44726f6e6500000000000000000000000000000000000000000000;
  uint256[] memory p_unitreward_amounts = new uint256[](1);
  p_unitreward_amounts[0] = 30;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_UnitReward.encode(p_unitreward_units, p_unitreward_amounts);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant DefeatPirateBase10PrototypeId = "DefeatPirateBase10";

function DefeatPirateBase10Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = DefeatPirateBase10PrototypeId;
  return _keyTuple;
}

function DefeatPirateBase10Prototype(IStore store) {
  bytes32[] memory keys = DefeatPirateBase10Keys();
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_DefeatedPiratesTableId;
  tableIds[2] = P_SpawnPirateAsteroidTableId;
  tableIds[3] = P_UnitRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x4465666561745069726174654261736539000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_defeatedpirates_value = new bytes32[](1);
  p_defeatedpirates_value[0] = 0x4465666561745069726174654261736539000000000000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_DefeatedPirates.encode(p_defeatedpirates_value);
  uint8[] memory p_spawnpirateasteroid_resources = new uint8[](6);
  p_spawnpirateasteroid_resources[0] = 2;
  p_spawnpirateasteroid_resources[1] = 1;
  p_spawnpirateasteroid_resources[2] = 3;
  p_spawnpirateasteroid_resources[3] = 8;
  p_spawnpirateasteroid_resources[4] = 10;
  p_spawnpirateasteroid_resources[5] = 9;
  uint256[] memory p_spawnpirateasteroid_resourceAmounts = new uint256[](6);
  p_spawnpirateasteroid_resourceAmounts[0] = 5000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[1] = 5000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[2] = 5000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[3] = 3000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[4] = 3000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[5] = 3000000000000000000000;
  bytes32[] memory p_spawnpirateasteroid_units = new bytes32[](2);
  p_spawnpirateasteroid_units[0] = 0x416567697344726f6e6500000000000000000000000000000000000000000000;
  p_spawnpirateasteroid_units[1] = 0x54726964656e744d6172696e6500000000000000000000000000000000000000;
  uint256[] memory p_spawnpirateasteroid_unitAmounts = new uint256[](2);
  p_spawnpirateasteroid_unitAmounts[0] = 30;
  p_spawnpirateasteroid_unitAmounts[1] = 350;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_SpawnPirateAsteroid.encode(
    -12,
    17,
    p_spawnpirateasteroid_resources,
    p_spawnpirateasteroid_resourceAmounts,
    p_spawnpirateasteroid_units,
    p_spawnpirateasteroid_unitAmounts
  );
  bytes32[] memory p_unitreward_units = new bytes32[](1);
  p_unitreward_units[0] = 0x48616d6d657244726f6e65000000000000000000000000000000000000000000;
  uint256[] memory p_unitreward_amounts = new uint256[](1);
  p_unitreward_amounts[0] = 30;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_UnitReward.encode(p_unitreward_units, p_unitreward_amounts);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant DefeatPirateBase11PrototypeId = "DefeatPirateBase11";

function DefeatPirateBase11Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = DefeatPirateBase11PrototypeId;
  return _keyTuple;
}

function DefeatPirateBase11Prototype(IStore store) {
  bytes32[] memory keys = DefeatPirateBase11Keys();
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_DefeatedPiratesTableId;
  tableIds[2] = P_SpawnPirateAsteroidTableId;
  tableIds[3] = P_UnitRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x4465666561745069726174654261736531300000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_defeatedpirates_value = new bytes32[](1);
  p_defeatedpirates_value[0] = 0x4465666561745069726174654261736531300000000000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_DefeatedPirates.encode(p_defeatedpirates_value);
  uint8[] memory p_spawnpirateasteroid_resources = new uint8[](6);
  p_spawnpirateasteroid_resources[0] = 2;
  p_spawnpirateasteroid_resources[1] = 1;
  p_spawnpirateasteroid_resources[2] = 3;
  p_spawnpirateasteroid_resources[3] = 8;
  p_spawnpirateasteroid_resources[4] = 10;
  p_spawnpirateasteroid_resources[5] = 9;
  uint256[] memory p_spawnpirateasteroid_resourceAmounts = new uint256[](6);
  p_spawnpirateasteroid_resourceAmounts[0] = 10000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[1] = 10000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[2] = 10000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[3] = 3000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[4] = 3000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[5] = 3000000000000000000000;
  bytes32[] memory p_spawnpirateasteroid_units = new bytes32[](2);
  p_spawnpirateasteroid_units[0] = 0x416567697344726f6e6500000000000000000000000000000000000000000000;
  p_spawnpirateasteroid_units[1] = 0x54726964656e744d6172696e6500000000000000000000000000000000000000;
  uint256[] memory p_spawnpirateasteroid_unitAmounts = new uint256[](2);
  p_spawnpirateasteroid_unitAmounts[0] = 60;
  p_spawnpirateasteroid_unitAmounts[1] = 150;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_SpawnPirateAsteroid.encode(
    8,
    12,
    p_spawnpirateasteroid_resources,
    p_spawnpirateasteroid_resourceAmounts,
    p_spawnpirateasteroid_units,
    p_spawnpirateasteroid_unitAmounts
  );
  bytes32[] memory p_unitreward_units = new bytes32[](2);
  p_unitreward_units[0] = 0x416e76696c44726f6e6500000000000000000000000000000000000000000000;
  p_unitreward_units[1] = 0x48616d6d657244726f6e65000000000000000000000000000000000000000000;
  uint256[] memory p_unitreward_amounts = new uint256[](2);
  p_unitreward_amounts[0] = 30;
  p_unitreward_amounts[1] = 30;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_UnitReward.encode(p_unitreward_units, p_unitreward_amounts);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant DefeatPirateBase12PrototypeId = "DefeatPirateBase12";

function DefeatPirateBase12Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = DefeatPirateBase12PrototypeId;
  return _keyTuple;
}

function DefeatPirateBase12Prototype(IStore store) {
  bytes32[] memory keys = DefeatPirateBase12Keys();
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_DefeatedPiratesTableId;
  tableIds[2] = P_SpawnPirateAsteroidTableId;
  tableIds[3] = P_ResourceRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x4465666561745069726174654261736531310000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_defeatedpirates_value = new bytes32[](1);
  p_defeatedpirates_value[0] = 0x4465666561745069726174654261736531310000000000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_DefeatedPirates.encode(p_defeatedpirates_value);
  uint8[] memory p_spawnpirateasteroid_resources = new uint8[](6);
  p_spawnpirateasteroid_resources[0] = 2;
  p_spawnpirateasteroid_resources[1] = 1;
  p_spawnpirateasteroid_resources[2] = 3;
  p_spawnpirateasteroid_resources[3] = 8;
  p_spawnpirateasteroid_resources[4] = 10;
  p_spawnpirateasteroid_resources[5] = 9;
  uint256[] memory p_spawnpirateasteroid_resourceAmounts = new uint256[](6);
  p_spawnpirateasteroid_resourceAmounts[0] = 10000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[1] = 10000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[2] = 10000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[3] = 5000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[4] = 5000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[5] = 5000000000000000000000;
  bytes32[] memory p_spawnpirateasteroid_units = new bytes32[](1);
  p_spawnpirateasteroid_units[0] = 0x416567697344726f6e6500000000000000000000000000000000000000000000;
  uint256[] memory p_spawnpirateasteroid_unitAmounts = new uint256[](1);
  p_spawnpirateasteroid_unitAmounts[0] = 100;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_SpawnPirateAsteroid.encode(
    -18,
    -22,
    p_spawnpirateasteroid_resources,
    p_spawnpirateasteroid_resourceAmounts,
    p_spawnpirateasteroid_units,
    p_spawnpirateasteroid_unitAmounts
  );
  uint8[] memory p_resourcereward_resources = new uint8[](1);
  p_resourcereward_resources[0] = 4;
  uint256[] memory p_resourcereward_amounts = new uint256[](1);
  p_resourcereward_amounts[0] = 500000000000000000000;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant DefeatPirateBase13PrototypeId = "DefeatPirateBase13";

function DefeatPirateBase13Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = DefeatPirateBase13PrototypeId;
  return _keyTuple;
}

function DefeatPirateBase13Prototype(IStore store) {
  bytes32[] memory keys = DefeatPirateBase13Keys();
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_DefeatedPiratesTableId;
  tableIds[2] = P_SpawnPirateAsteroidTableId;
  tableIds[3] = P_ResourceRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x4465666561745069726174654261736531320000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_defeatedpirates_value = new bytes32[](1);
  p_defeatedpirates_value[0] = 0x4465666561745069726174654261736531320000000000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_DefeatedPirates.encode(p_defeatedpirates_value);
  uint8[] memory p_spawnpirateasteroid_resources = new uint8[](6);
  p_spawnpirateasteroid_resources[0] = 1;
  p_spawnpirateasteroid_resources[1] = 2;
  p_spawnpirateasteroid_resources[2] = 3;
  p_spawnpirateasteroid_resources[3] = 8;
  p_spawnpirateasteroid_resources[4] = 10;
  p_spawnpirateasteroid_resources[5] = 9;
  uint256[] memory p_spawnpirateasteroid_resourceAmounts = new uint256[](6);
  p_spawnpirateasteroid_resourceAmounts[0] = 15000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[1] = 15000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[2] = 15000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[3] = 10000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[4] = 10000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[5] = 10000000000000000000000;
  bytes32[] memory p_spawnpirateasteroid_units = new bytes32[](1);
  p_spawnpirateasteroid_units[0] = 0x416567697344726f6e6500000000000000000000000000000000000000000000;
  uint256[] memory p_spawnpirateasteroid_unitAmounts = new uint256[](1);
  p_spawnpirateasteroid_unitAmounts[0] = 150;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_SpawnPirateAsteroid.encode(
    8,
    12,
    p_spawnpirateasteroid_resources,
    p_spawnpirateasteroid_resourceAmounts,
    p_spawnpirateasteroid_units,
    p_spawnpirateasteroid_unitAmounts
  );
  uint8[] memory p_resourcereward_resources = new uint8[](1);
  p_resourcereward_resources[0] = 4;
  uint256[] memory p_resourcereward_amounts = new uint256[](1);
  p_resourcereward_amounts[0] = 500000000000000000000;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant DefeatPirateBase14PrototypeId = "DefeatPirateBase14";

function DefeatPirateBase14Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = DefeatPirateBase14PrototypeId;
  return _keyTuple;
}

function DefeatPirateBase14Prototype(IStore store) {
  bytes32[] memory keys = DefeatPirateBase14Keys();
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_DefeatedPiratesTableId;
  tableIds[2] = P_SpawnPirateAsteroidTableId;
  tableIds[3] = P_ResourceRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x4465666561745069726174654261736531330000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_defeatedpirates_value = new bytes32[](1);
  p_defeatedpirates_value[0] = 0x4465666561745069726174654261736531330000000000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_DefeatedPirates.encode(p_defeatedpirates_value);
  uint8[] memory p_spawnpirateasteroid_resources = new uint8[](6);
  p_spawnpirateasteroid_resources[0] = 1;
  p_spawnpirateasteroid_resources[1] = 2;
  p_spawnpirateasteroid_resources[2] = 3;
  p_spawnpirateasteroid_resources[3] = 8;
  p_spawnpirateasteroid_resources[4] = 10;
  p_spawnpirateasteroid_resources[5] = 9;
  uint256[] memory p_spawnpirateasteroid_resourceAmounts = new uint256[](6);
  p_spawnpirateasteroid_resourceAmounts[0] = 15000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[1] = 15000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[2] = 15000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[3] = 10000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[4] = 10000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[5] = 10000000000000000000000;
  bytes32[] memory p_spawnpirateasteroid_units = new bytes32[](1);
  p_spawnpirateasteroid_units[0] = 0x416567697344726f6e6500000000000000000000000000000000000000000000;
  uint256[] memory p_spawnpirateasteroid_unitAmounts = new uint256[](1);
  p_spawnpirateasteroid_unitAmounts[0] = 200;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_SpawnPirateAsteroid.encode(
    17,
    12,
    p_spawnpirateasteroid_resources,
    p_spawnpirateasteroid_resourceAmounts,
    p_spawnpirateasteroid_units,
    p_spawnpirateasteroid_unitAmounts
  );
  uint8[] memory p_resourcereward_resources = new uint8[](2);
  p_resourcereward_resources[0] = 4;
  p_resourcereward_resources[1] = 7;
  uint256[] memory p_resourcereward_amounts = new uint256[](2);
  p_resourcereward_amounts[0] = 500000000000000000000;
  p_resourcereward_amounts[1] = 500000000000000000000;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant DefeatPirateBase15PrototypeId = "DefeatPirateBase15";

function DefeatPirateBase15Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = DefeatPirateBase15PrototypeId;
  return _keyTuple;
}

function DefeatPirateBase15Prototype(IStore store) {
  bytes32[] memory keys = DefeatPirateBase15Keys();
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_DefeatedPiratesTableId;
  tableIds[2] = P_SpawnPirateAsteroidTableId;
  tableIds[3] = P_ResourceRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x4465666561745069726174654261736531340000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_defeatedpirates_value = new bytes32[](1);
  p_defeatedpirates_value[0] = 0x4465666561745069726174654261736531340000000000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_DefeatedPirates.encode(p_defeatedpirates_value);
  uint8[] memory p_spawnpirateasteroid_resources = new uint8[](6);
  p_spawnpirateasteroid_resources[0] = 1;
  p_spawnpirateasteroid_resources[1] = 2;
  p_spawnpirateasteroid_resources[2] = 3;
  p_spawnpirateasteroid_resources[3] = 8;
  p_spawnpirateasteroid_resources[4] = 10;
  p_spawnpirateasteroid_resources[5] = 9;
  uint256[] memory p_spawnpirateasteroid_resourceAmounts = new uint256[](6);
  p_spawnpirateasteroid_resourceAmounts[0] = 15000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[1] = 15000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[2] = 15000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[3] = 10000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[4] = 10000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[5] = 10000000000000000000000;
  bytes32[] memory p_spawnpirateasteroid_units = new bytes32[](1);
  p_spawnpirateasteroid_units[0] = 0x416567697344726f6e6500000000000000000000000000000000000000000000;
  uint256[] memory p_spawnpirateasteroid_unitAmounts = new uint256[](1);
  p_spawnpirateasteroid_unitAmounts[0] = 250;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_SpawnPirateAsteroid.encode(
    -17,
    12,
    p_spawnpirateasteroid_resources,
    p_spawnpirateasteroid_resourceAmounts,
    p_spawnpirateasteroid_units,
    p_spawnpirateasteroid_unitAmounts
  );
  uint8[] memory p_resourcereward_resources = new uint8[](2);
  p_resourcereward_resources[0] = 4;
  p_resourcereward_resources[1] = 7;
  uint256[] memory p_resourcereward_amounts = new uint256[](2);
  p_resourcereward_amounts[0] = 500000000000000000000;
  p_resourcereward_amounts[1] = 500000000000000000000;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant DefeatPirateBase16PrototypeId = "DefeatPirateBase16";

function DefeatPirateBase16Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = DefeatPirateBase16PrototypeId;
  return _keyTuple;
}

function DefeatPirateBase16Prototype(IStore store) {
  bytes32[] memory keys = DefeatPirateBase16Keys();
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_DefeatedPiratesTableId;
  tableIds[2] = P_SpawnPirateAsteroidTableId;
  tableIds[3] = P_ResourceRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x4465666561745069726174654261736531350000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_defeatedpirates_value = new bytes32[](1);
  p_defeatedpirates_value[0] = 0x4465666561745069726174654261736531350000000000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_DefeatedPirates.encode(p_defeatedpirates_value);
  uint8[] memory p_spawnpirateasteroid_resources = new uint8[](6);
  p_spawnpirateasteroid_resources[0] = 1;
  p_spawnpirateasteroid_resources[1] = 2;
  p_spawnpirateasteroid_resources[2] = 3;
  p_spawnpirateasteroid_resources[3] = 8;
  p_spawnpirateasteroid_resources[4] = 10;
  p_spawnpirateasteroid_resources[5] = 9;
  uint256[] memory p_spawnpirateasteroid_resourceAmounts = new uint256[](6);
  p_spawnpirateasteroid_resourceAmounts[0] = 15000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[1] = 15000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[2] = 15000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[3] = 10000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[4] = 10000000000000000000000;
  p_spawnpirateasteroid_resourceAmounts[5] = 10000000000000000000000;
  bytes32[] memory p_spawnpirateasteroid_units = new bytes32[](1);
  p_spawnpirateasteroid_units[0] = 0x416567697344726f6e6500000000000000000000000000000000000000000000;
  uint256[] memory p_spawnpirateasteroid_unitAmounts = new uint256[](1);
  p_spawnpirateasteroid_unitAmounts[0] = 300;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_SpawnPirateAsteroid.encode(
    -7,
    -9,
    p_spawnpirateasteroid_resources,
    p_spawnpirateasteroid_resourceAmounts,
    p_spawnpirateasteroid_units,
    p_spawnpirateasteroid_unitAmounts
  );
  uint8[] memory p_resourcereward_resources = new uint8[](2);
  p_resourcereward_resources[0] = 4;
  p_resourcereward_resources[1] = 7;
  uint256[] memory p_resourcereward_amounts = new uint256[](2);
  p_resourcereward_amounts[0] = 500000000000000000000;
  p_resourcereward_amounts[1] = 500000000000000000000;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant DefeatPirateBase17PrototypeId = "DefeatPirateBase17";

function DefeatPirateBase17Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = DefeatPirateBase17PrototypeId;
  return _keyTuple;
}

function DefeatPirateBase17Prototype(IStore store) {
  bytes32[] memory keys = DefeatPirateBase17Keys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_DefeatedPiratesTableId;
  tableIds[2] = P_ResourceRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x4465666561745069726174654261736531360000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_defeatedpirates_value = new bytes32[](1);
  p_defeatedpirates_value[0] = 0x4465666561745069726174654261736531360000000000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_DefeatedPirates.encode(p_defeatedpirates_value);
  uint8[] memory p_resourcereward_resources = new uint8[](2);
  p_resourcereward_resources[0] = 4;
  p_resourcereward_resources[1] = 7;
  uint256[] memory p_resourcereward_amounts = new uint256[](2);
  p_resourcereward_amounts[0] = 500000000000000000000;
  p_resourcereward_amounts[1] = 500000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant BuildIronMinePrototypeId = "BuildIronMine";

function BuildIronMineKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = BuildIronMinePrototypeId;
  return _keyTuple;
}

function BuildIronMinePrototype(IStore store) {
  bytes32[] memory keys = BuildIronMineKeys();
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_HasBuiltBuildingsTableId;
  tableIds[1] = P_ResourceRewardTableId;

  bytes32[] memory p_hasbuiltbuildings_value = new bytes32[](1);
  p_hasbuiltbuildings_value[0] = 0x49726f6e4d696e65000000000000000000000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_HasBuiltBuildings.encode(p_hasbuiltbuildings_value);
  uint8[] memory p_resourcereward_resources = new uint8[](1);
  p_resourcereward_resources[0] = 1;
  uint256[] memory p_resourcereward_amounts = new uint256[](1);
  p_resourcereward_amounts[0] = 100000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant BuildCopperMinePrototypeId = "BuildCopperMine";

function BuildCopperMineKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = BuildCopperMinePrototypeId;
  return _keyTuple;
}

function BuildCopperMinePrototype(IStore store) {
  bytes32[] memory keys = BuildCopperMineKeys();
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_HasBuiltBuildingsTableId;
  tableIds[1] = P_ResourceRewardTableId;

  bytes32[] memory p_hasbuiltbuildings_value = new bytes32[](1);
  p_hasbuiltbuildings_value[0] = 0x436f707065724d696e6500000000000000000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_HasBuiltBuildings.encode(p_hasbuiltbuildings_value);
  uint8[] memory p_resourcereward_resources = new uint8[](2);
  p_resourcereward_resources[0] = 2;
  p_resourcereward_resources[1] = 1;
  uint256[] memory p_resourcereward_amounts = new uint256[](2);
  p_resourcereward_amounts[0] = 100000000000000000000;
  p_resourcereward_amounts[1] = 100000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant BuildLithiumMinePrototypeId = "BuildLithiumMine";

function BuildLithiumMineKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = BuildLithiumMinePrototypeId;
  return _keyTuple;
}

function BuildLithiumMineLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = BuildLithiumMinePrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function BuildLithiumMinePrototype(IStore store) {
  bytes32[] memory keys = BuildLithiumMineKeys();
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_HasBuiltBuildingsTableId;
  tableIds[1] = P_ResourceRewardTableId;

  bytes32[] memory p_hasbuiltbuildings_value = new bytes32[](1);
  p_hasbuiltbuildings_value[0] = 0x4c69746869756d4d696e65000000000000000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_HasBuiltBuildings.encode(p_hasbuiltbuildings_value);
  uint8[] memory p_resourcereward_resources = new uint8[](1);
  p_resourcereward_resources[0] = 3;
  uint256[] memory p_resourcereward_amounts = new uint256[](1);
  p_resourcereward_amounts[0] = 500000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createBuildLithiumMineLevel1(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createBuildLithiumMineLevel1(IStore store) {
  bytes32[] memory levelKeys = BuildLithiumMineLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_RequiredBaseLevelTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(2);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant BuildIronPlateFactoryPrototypeId = "BuildIronPlateFactory";

function BuildIronPlateFactoryKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = BuildIronPlateFactoryPrototypeId;
  return _keyTuple;
}

function BuildIronPlateFactoryPrototype(IStore store) {
  bytes32[] memory keys = BuildIronPlateFactoryKeys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_HasBuiltBuildingsTableId;
  tableIds[2] = P_ResourceRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x4275696c6449726f6e4d696e6500000000000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_hasbuiltbuildings_value = new bytes32[](1);
  p_hasbuiltbuildings_value[0] = 0x49726f6e506c617465466163746f727900000000000000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_HasBuiltBuildings.encode(p_hasbuiltbuildings_value);
  uint8[] memory p_resourcereward_resources = new uint8[](1);
  p_resourcereward_resources[0] = 8;
  uint256[] memory p_resourcereward_amounts = new uint256[](1);
  p_resourcereward_amounts[0] = 100000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant BuildAlloyFactoryPrototypeId = "BuildAlloyFactory";

function BuildAlloyFactoryKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = BuildAlloyFactoryPrototypeId;
  return _keyTuple;
}

function BuildAlloyFactoryLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = BuildAlloyFactoryPrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function BuildAlloyFactoryPrototype(IStore store) {
  bytes32[] memory keys = BuildAlloyFactoryKeys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_HasBuiltBuildingsTableId;
  tableIds[2] = P_ResourceRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x4275696c64436f707065724d696e650000000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_hasbuiltbuildings_value = new bytes32[](1);
  p_hasbuiltbuildings_value[0] = 0x416c6c6f79466163746f72790000000000000000000000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_HasBuiltBuildings.encode(p_hasbuiltbuildings_value);
  uint8[] memory p_resourcereward_resources = new uint8[](1);
  p_resourcereward_resources[0] = 9;
  uint256[] memory p_resourcereward_amounts = new uint256[](1);
  p_resourcereward_amounts[0] = 200000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createBuildAlloyFactoryLevel1(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createBuildAlloyFactoryLevel1(IStore store) {
  bytes32[] memory levelKeys = BuildAlloyFactoryLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_RequiredBaseLevelTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(2);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant BuildGaragePrototypeId = "BuildGarage";

function BuildGarageKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = BuildGaragePrototypeId;
  return _keyTuple;
}

function BuildGaragePrototype(IStore store) {
  bytes32[] memory keys = BuildGarageKeys();
  ResourceId[] memory tableIds = new ResourceId[](4);
  bytes[] memory staticData = new bytes[](4);
  PackedCounter[] memory encodedLengths = new PackedCounter[](4);
  bytes[] memory dynamicData = new bytes[](4);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_HasBuiltBuildingsTableId;
  tableIds[2] = P_SpawnPirateAsteroidTableId;
  tableIds[3] = P_UnitRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x4275696c6449726f6e4d696e6500000000000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_hasbuiltbuildings_value = new bytes32[](1);
  p_hasbuiltbuildings_value[0] = 0x4761726167650000000000000000000000000000000000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_HasBuiltBuildings.encode(p_hasbuiltbuildings_value);
  uint8[] memory p_spawnpirateasteroid_resources = new uint8[](2);
  p_spawnpirateasteroid_resources[0] = 2;
  p_spawnpirateasteroid_resources[1] = 1;
  uint256[] memory p_spawnpirateasteroid_resourceAmounts = new uint256[](2);
  p_spawnpirateasteroid_resourceAmounts[0] = 20000;
  p_spawnpirateasteroid_resourceAmounts[1] = 20000;
  bytes32[] memory p_spawnpirateasteroid_units = new bytes32[](0);
  uint256[] memory p_spawnpirateasteroid_unitAmounts = new uint256[](0);
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_SpawnPirateAsteroid.encode(
    -10,
    -12,
    p_spawnpirateasteroid_resources,
    p_spawnpirateasteroid_resourceAmounts,
    p_spawnpirateasteroid_units,
    p_spawnpirateasteroid_unitAmounts
  );
  bytes32[] memory p_unitreward_units = new bytes32[](1);
  p_unitreward_units[0] = 0x4c696768746e696e674372616674000000000000000000000000000000000000;
  uint256[] memory p_unitreward_amounts = new uint256[](1);
  p_unitreward_amounts[0] = 35;
  (staticData[3], encodedLengths[3], dynamicData[3]) = P_UnitReward.encode(p_unitreward_units, p_unitreward_amounts);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant BuildWorkshopPrototypeId = "BuildWorkshop";

function BuildWorkshopKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = BuildWorkshopPrototypeId;
  return _keyTuple;
}

function BuildWorkshopPrototype(IStore store) {
  bytes32[] memory keys = BuildWorkshopKeys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_HasBuiltBuildingsTableId;
  tableIds[2] = P_ResourceRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x4275696c64476172616765000000000000000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_hasbuiltbuildings_value = new bytes32[](1);
  p_hasbuiltbuildings_value[0] = 0x576f726b73686f70000000000000000000000000000000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_HasBuiltBuildings.encode(p_hasbuiltbuildings_value);
  uint8[] memory p_resourcereward_resources = new uint8[](1);
  p_resourcereward_resources[0] = 8;
  uint256[] memory p_resourcereward_amounts = new uint256[](1);
  p_resourcereward_amounts[0] = 500000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant BuildPVCellFactoryPrototypeId = "BuildPVCellFactory";

function BuildPVCellFactoryKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = BuildPVCellFactoryPrototypeId;
  return _keyTuple;
}

function BuildPVCellFactoryLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = BuildPVCellFactoryPrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function BuildPVCellFactoryPrototype(IStore store) {
  bytes32[] memory keys = BuildPVCellFactoryKeys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_HasBuiltBuildingsTableId;
  tableIds[2] = P_ResourceRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x4275696c644c69746869756d4d696e6500000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_hasbuiltbuildings_value = new bytes32[](1);
  p_hasbuiltbuildings_value[0] = 0x505643656c6c466163746f727900000000000000000000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_HasBuiltBuildings.encode(p_hasbuiltbuildings_value);
  uint8[] memory p_resourcereward_resources = new uint8[](1);
  p_resourcereward_resources[0] = 10;
  uint256[] memory p_resourcereward_amounts = new uint256[](1);
  p_resourcereward_amounts[0] = 200000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createBuildPVCellFactoryLevel1(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createBuildPVCellFactoryLevel1(IStore store) {
  bytes32[] memory levelKeys = BuildPVCellFactoryLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_RequiredBaseLevelTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(2);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant BuildSolarPanelPrototypeId = "BuildSolarPanel";

function BuildSolarPanelKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = BuildSolarPanelPrototypeId;
  return _keyTuple;
}

function BuildSolarPanelLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = BuildSolarPanelPrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function BuildSolarPanelPrototype(IStore store) {
  bytes32[] memory keys = BuildSolarPanelKeys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_HasBuiltBuildingsTableId;
  tableIds[2] = P_ResourceRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x4275696c64505643656c6c466163746f72790000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_hasbuiltbuildings_value = new bytes32[](1);
  p_hasbuiltbuildings_value[0] = 0x536f6c617250616e656c00000000000000000000000000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_HasBuiltBuildings.encode(p_hasbuiltbuildings_value);
  uint8[] memory p_resourcereward_resources = new uint8[](2);
  p_resourcereward_resources[0] = 1;
  p_resourcereward_resources[1] = 2;
  uint256[] memory p_resourcereward_amounts = new uint256[](2);
  p_resourcereward_amounts[0] = 1000000000000000000000;
  p_resourcereward_amounts[1] = 1000000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createBuildSolarPanelLevel1(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createBuildSolarPanelLevel1(IStore store) {
  bytes32[] memory levelKeys = BuildSolarPanelLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_RequiredBaseLevelTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(2);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant BuildDroneFactoryPrototypeId = "BuildDroneFactory";

function BuildDroneFactoryKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = BuildDroneFactoryPrototypeId;
  return _keyTuple;
}

function BuildDroneFactoryLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = BuildDroneFactoryPrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function BuildDroneFactoryPrototype(IStore store) {
  bytes32[] memory keys = BuildDroneFactoryKeys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_HasBuiltBuildingsTableId;
  tableIds[2] = P_UnitRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x4275696c64536f6c617250616e656c0000000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_hasbuiltbuildings_value = new bytes32[](1);
  p_hasbuiltbuildings_value[0] = 0x44726f6e65466163746f72790000000000000000000000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_HasBuiltBuildings.encode(p_hasbuiltbuildings_value);
  bytes32[] memory p_unitreward_units = new bytes32[](1);
  p_unitreward_units[0] = 0x48616d6d657244726f6e65000000000000000000000000000000000000000000;
  uint256[] memory p_unitreward_amounts = new uint256[](1);
  p_unitreward_amounts[0] = 30;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_UnitReward.encode(p_unitreward_units, p_unitreward_amounts);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createBuildDroneFactoryLevel1(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createBuildDroneFactoryLevel1(IStore store) {
  bytes32[] memory levelKeys = BuildDroneFactoryLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_RequiredBaseLevelTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(2);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant BuildHangarPrototypeId = "BuildHangar";

function BuildHangarKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = BuildHangarPrototypeId;
  return _keyTuple;
}

function BuildHangarLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = BuildHangarPrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function BuildHangarPrototype(IStore store) {
  bytes32[] memory keys = BuildHangarKeys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_HasBuiltBuildingsTableId;
  tableIds[2] = P_UnitRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x4275696c64536f6c617250616e656c0000000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_hasbuiltbuildings_value = new bytes32[](1);
  p_hasbuiltbuildings_value[0] = 0x48616e6761720000000000000000000000000000000000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_HasBuiltBuildings.encode(p_hasbuiltbuildings_value);
  bytes32[] memory p_unitreward_units = new bytes32[](1);
  p_unitreward_units[0] = 0x54726964656e744d6172696e6500000000000000000000000000000000000000;
  uint256[] memory p_unitreward_amounts = new uint256[](1);
  p_unitreward_amounts[0] = 100;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_UnitReward.encode(p_unitreward_units, p_unitreward_amounts);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createBuildHangarLevel1(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createBuildHangarLevel1(IStore store) {
  bytes32[] memory levelKeys = BuildHangarLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_RequiredBaseLevelTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(3);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant BuildStarmapperPrototypeId = "BuildStarmapper";

function BuildStarmapperKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = BuildStarmapperPrototypeId;
  return _keyTuple;
}

function BuildStarmapperLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = BuildStarmapperPrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function BuildStarmapperPrototype(IStore store) {
  bytes32[] memory keys = BuildStarmapperKeys();
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_HasBuiltBuildingsTableId;
  tableIds[1] = P_UnitRewardTableId;

  bytes32[] memory p_hasbuiltbuildings_value = new bytes32[](1);
  p_hasbuiltbuildings_value[0] = 0x537461726d617070657200000000000000000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_HasBuiltBuildings.encode(p_hasbuiltbuildings_value);
  bytes32[] memory p_unitreward_units = new bytes32[](2);
  p_unitreward_units[0] = 0x48616d6d657244726f6e65000000000000000000000000000000000000000000;
  p_unitreward_units[1] = 0x416e76696c44726f6e6500000000000000000000000000000000000000000000;
  uint256[] memory p_unitreward_amounts = new uint256[](2);
  p_unitreward_amounts[0] = 10;
  p_unitreward_amounts[1] = 10;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_UnitReward.encode(p_unitreward_units, p_unitreward_amounts);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createBuildStarmapperLevel1(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createBuildStarmapperLevel1(IStore store) {
  bytes32[] memory levelKeys = BuildStarmapperLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_RequiredBaseLevelTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(3);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant BuildSAMLauncherPrototypeId = "BuildSAMLauncher";

function BuildSAMLauncherKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = BuildSAMLauncherPrototypeId;
  return _keyTuple;
}

function BuildSAMLauncherLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = BuildSAMLauncherPrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function BuildSAMLauncherPrototype(IStore store) {
  bytes32[] memory keys = BuildSAMLauncherKeys();
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_HasBuiltBuildingsTableId;
  tableIds[1] = P_UnitRewardTableId;

  bytes32[] memory p_hasbuiltbuildings_value = new bytes32[](1);
  p_hasbuiltbuildings_value[0] = 0x53414d0000000000000000000000000000000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_HasBuiltBuildings.encode(p_hasbuiltbuildings_value);
  bytes32[] memory p_unitreward_units = new bytes32[](1);
  p_unitreward_units[0] = 0x416e76696c44726f6e6500000000000000000000000000000000000000000000;
  uint256[] memory p_unitreward_amounts = new uint256[](1);
  p_unitreward_amounts[0] = 50;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_UnitReward.encode(p_unitreward_units, p_unitreward_amounts);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createBuildSAMLauncherLevel1(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createBuildSAMLauncherLevel1(IStore store) {
  bytes32[] memory levelKeys = BuildSAMLauncherLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_RequiredBaseLevelTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(2);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant BuildVaultPrototypeId = "BuildVault";

function BuildVaultKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = BuildVaultPrototypeId;
  return _keyTuple;
}

function BuildVaultLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = BuildVaultPrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function BuildVaultPrototype(IStore store) {
  bytes32[] memory keys = BuildVaultKeys();
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_HasBuiltBuildingsTableId;
  tableIds[1] = P_UnitRewardTableId;

  bytes32[] memory p_hasbuiltbuildings_value = new bytes32[](1);
  p_hasbuiltbuildings_value[0] = 0x5661756c74000000000000000000000000000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_HasBuiltBuildings.encode(p_hasbuiltbuildings_value);
  bytes32[] memory p_unitreward_units = new bytes32[](1);
  p_unitreward_units[0] = 0x416e76696c44726f6e6500000000000000000000000000000000000000000000;
  uint256[] memory p_unitreward_amounts = new uint256[](1);
  p_unitreward_amounts[0] = 50;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_UnitReward.encode(p_unitreward_units, p_unitreward_amounts);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createBuildVaultLevel1(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createBuildVaultLevel1(IStore store) {
  bytes32[] memory levelKeys = BuildVaultLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_RequiredBaseLevelTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(2);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant BuildShieldGeneratorPrototypeId = "BuildShieldGenerator";

function BuildShieldGeneratorKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = BuildShieldGeneratorPrototypeId;
  return _keyTuple;
}

function BuildShieldGeneratorLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = BuildShieldGeneratorPrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function BuildShieldGeneratorPrototype(IStore store) {
  bytes32[] memory keys = BuildShieldGeneratorKeys();
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_HasBuiltBuildingsTableId;
  tableIds[1] = P_UnitRewardTableId;

  bytes32[] memory p_hasbuiltbuildings_value = new bytes32[](1);
  p_hasbuiltbuildings_value[0] = 0x536869656c6447656e657261746f720000000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_HasBuiltBuildings.encode(p_hasbuiltbuildings_value);
  bytes32[] memory p_unitreward_units = new bytes32[](1);
  p_unitreward_units[0] = 0x416567697344726f6e6500000000000000000000000000000000000000000000;
  uint256[] memory p_unitreward_amounts = new uint256[](1);
  p_unitreward_amounts[0] = 150;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_UnitReward.encode(p_unitreward_units, p_unitreward_amounts);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createBuildShieldGeneratorLevel1(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createBuildShieldGeneratorLevel1(IStore store) {
  bytes32[] memory levelKeys = BuildShieldGeneratorLevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_RequiredBaseLevelTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(3);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant TrainMinutemanMarine1PrototypeId = "TrainMinutemanMarine1";

function TrainMinutemanMarine1Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = TrainMinutemanMarine1PrototypeId;
  return _keyTuple;
}

function TrainMinutemanMarine1Prototype(IStore store) {
  bytes32[] memory keys = TrainMinutemanMarine1Keys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_ProducedUnitsTableId;
  tableIds[2] = P_ResourceRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x4275696c64576f726b73686f7000000000000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_producedunits_units = new bytes32[](1);
  p_producedunits_units[0] = 0x4d696e7574656d616e4d6172696e650000000000000000000000000000000000;
  uint256[] memory p_producedunits_amounts = new uint256[](1);
  p_producedunits_amounts[0] = 50;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_ProducedUnits.encode(
    p_producedunits_units,
    p_producedunits_amounts
  );
  uint8[] memory p_resourcereward_resources = new uint8[](1);
  p_resourcereward_resources[0] = 8;
  uint256[] memory p_resourcereward_amounts = new uint256[](1);
  p_resourcereward_amounts[0] = 500000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant TrainMinutemanMarine2PrototypeId = "TrainMinutemanMarine2";

function TrainMinutemanMarine2Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = TrainMinutemanMarine2PrototypeId;
  return _keyTuple;
}

function TrainMinutemanMarine2LevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = TrainMinutemanMarine2PrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function TrainMinutemanMarine2Prototype(IStore store) {
  bytes32[] memory keys = TrainMinutemanMarine2Keys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_ProducedUnitsTableId;
  tableIds[2] = P_ResourceRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x547261696e4d696e7574656d616e4d6172696e65310000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_producedunits_units = new bytes32[](1);
  p_producedunits_units[0] = 0x4d696e7574656d616e4d6172696e650000000000000000000000000000000000;
  uint256[] memory p_producedunits_amounts = new uint256[](1);
  p_producedunits_amounts[0] = 100;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_ProducedUnits.encode(
    p_producedunits_units,
    p_producedunits_amounts
  );
  uint8[] memory p_resourcereward_resources = new uint8[](1);
  p_resourcereward_resources[0] = 8;
  uint256[] memory p_resourcereward_amounts = new uint256[](1);
  p_resourcereward_amounts[0] = 1000000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createTrainMinutemanMarine2Level1(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createTrainMinutemanMarine2Level1(IStore store) {
  bytes32[] memory levelKeys = TrainMinutemanMarine2LevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_RequiredBaseLevelTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(2);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant TrainMinutemanMarine3PrototypeId = "TrainMinutemanMarine3";

function TrainMinutemanMarine3Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = TrainMinutemanMarine3PrototypeId;
  return _keyTuple;
}

function TrainMinutemanMarine3LevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = TrainMinutemanMarine3PrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function TrainMinutemanMarine3Prototype(IStore store) {
  bytes32[] memory keys = TrainMinutemanMarine3Keys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_ProducedUnitsTableId;
  tableIds[2] = P_ResourceRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x547261696e4d696e7574656d616e4d6172696e65320000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_producedunits_units = new bytes32[](1);
  p_producedunits_units[0] = 0x4d696e7574656d616e4d6172696e650000000000000000000000000000000000;
  uint256[] memory p_producedunits_amounts = new uint256[](1);
  p_producedunits_amounts[0] = 200;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_ProducedUnits.encode(
    p_producedunits_units,
    p_producedunits_amounts
  );
  uint8[] memory p_resourcereward_resources = new uint8[](1);
  p_resourcereward_resources[0] = 8;
  uint256[] memory p_resourcereward_amounts = new uint256[](1);
  p_resourcereward_amounts[0] = 3000000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createTrainMinutemanMarine3Level1(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createTrainMinutemanMarine3Level1(IStore store) {
  bytes32[] memory levelKeys = TrainMinutemanMarine3LevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_RequiredBaseLevelTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(2);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant TrainTridentMarine1PrototypeId = "TrainTridentMarine1";

function TrainTridentMarine1Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = TrainTridentMarine1PrototypeId;
  return _keyTuple;
}

function TrainTridentMarine1Prototype(IStore store) {
  bytes32[] memory keys = TrainTridentMarine1Keys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_ProducedUnitsTableId;
  tableIds[2] = P_ResourceRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x4275696c64576f726b73686f7000000000000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_producedunits_units = new bytes32[](1);
  p_producedunits_units[0] = 0x54726964656e744d6172696e6500000000000000000000000000000000000000;
  uint256[] memory p_producedunits_amounts = new uint256[](1);
  p_producedunits_amounts[0] = 50;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_ProducedUnits.encode(
    p_producedunits_units,
    p_producedunits_amounts
  );
  uint8[] memory p_resourcereward_resources = new uint8[](1);
  p_resourcereward_resources[0] = 3;
  uint256[] memory p_resourcereward_amounts = new uint256[](1);
  p_resourcereward_amounts[0] = 1000000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant TrainTridentMarine2PrototypeId = "TrainTridentMarine2";

function TrainTridentMarine2Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = TrainTridentMarine2PrototypeId;
  return _keyTuple;
}

function TrainTridentMarine2LevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = TrainTridentMarine2PrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function TrainTridentMarine2Prototype(IStore store) {
  bytes32[] memory keys = TrainTridentMarine2Keys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_ProducedUnitsTableId;
  tableIds[2] = P_ResourceRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x547261696e54726964656e744d6172696e653100000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_producedunits_units = new bytes32[](1);
  p_producedunits_units[0] = 0x54726964656e744d6172696e6500000000000000000000000000000000000000;
  uint256[] memory p_producedunits_amounts = new uint256[](1);
  p_producedunits_amounts[0] = 100;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_ProducedUnits.encode(
    p_producedunits_units,
    p_producedunits_amounts
  );
  uint8[] memory p_resourcereward_resources = new uint8[](1);
  p_resourcereward_resources[0] = 3;
  uint256[] memory p_resourcereward_amounts = new uint256[](1);
  p_resourcereward_amounts[0] = 5000000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createTrainTridentMarine2Level1(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createTrainTridentMarine2Level1(IStore store) {
  bytes32[] memory levelKeys = TrainTridentMarine2LevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_RequiredBaseLevelTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(2);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant TrainTridentMarine3PrototypeId = "TrainTridentMarine3";

function TrainTridentMarine3Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = TrainTridentMarine3PrototypeId;
  return _keyTuple;
}

function TrainTridentMarine3LevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = TrainTridentMarine3PrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function TrainTridentMarine3Prototype(IStore store) {
  bytes32[] memory keys = TrainTridentMarine3Keys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_ProducedUnitsTableId;
  tableIds[2] = P_ResourceRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x547261696e54726964656e744d6172696e653200000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_producedunits_units = new bytes32[](1);
  p_producedunits_units[0] = 0x54726964656e744d6172696e6500000000000000000000000000000000000000;
  uint256[] memory p_producedunits_amounts = new uint256[](1);
  p_producedunits_amounts[0] = 200;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_ProducedUnits.encode(
    p_producedunits_units,
    p_producedunits_amounts
  );
  uint8[] memory p_resourcereward_resources = new uint8[](1);
  p_resourcereward_resources[0] = 3;
  uint256[] memory p_resourcereward_amounts = new uint256[](1);
  p_resourcereward_amounts[0] = 10000000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createTrainTridentMarine3Level1(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createTrainTridentMarine3Level1(IStore store) {
  bytes32[] memory levelKeys = TrainTridentMarine3LevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_RequiredBaseLevelTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(2);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant TrainAnvilDrone1PrototypeId = "TrainAnvilDrone1";

function TrainAnvilDrone1Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = TrainAnvilDrone1PrototypeId;
  return _keyTuple;
}

function TrainAnvilDrone1LevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = TrainAnvilDrone1PrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function TrainAnvilDrone1Prototype(IStore store) {
  bytes32[] memory keys = TrainAnvilDrone1Keys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_ProducedUnitsTableId;
  tableIds[2] = P_ResourceRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x4275696c6444726f6e65466163746f7279000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_producedunits_units = new bytes32[](1);
  p_producedunits_units[0] = 0x416e76696c44726f6e6500000000000000000000000000000000000000000000;
  uint256[] memory p_producedunits_amounts = new uint256[](1);
  p_producedunits_amounts[0] = 20;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_ProducedUnits.encode(
    p_producedunits_units,
    p_producedunits_amounts
  );
  uint8[] memory p_resourcereward_resources = new uint8[](1);
  p_resourcereward_resources[0] = 10;
  uint256[] memory p_resourcereward_amounts = new uint256[](1);
  p_resourcereward_amounts[0] = 500000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createTrainAnvilDrone1Level1(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createTrainAnvilDrone1Level1(IStore store) {
  bytes32[] memory levelKeys = TrainAnvilDrone1LevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_RequiredBaseLevelTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(2);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant TrainAnvilDrone2PrototypeId = "TrainAnvilDrone2";

function TrainAnvilDrone2Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = TrainAnvilDrone2PrototypeId;
  return _keyTuple;
}

function TrainAnvilDrone2Prototype(IStore store) {
  bytes32[] memory keys = TrainAnvilDrone2Keys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_ProducedUnitsTableId;
  tableIds[2] = P_ResourceRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x547261696e416e76696c44726f6e653100000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_producedunits_units = new bytes32[](1);
  p_producedunits_units[0] = 0x416e76696c44726f6e6500000000000000000000000000000000000000000000;
  uint256[] memory p_producedunits_amounts = new uint256[](1);
  p_producedunits_amounts[0] = 50;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_ProducedUnits.encode(
    p_producedunits_units,
    p_producedunits_amounts
  );
  uint8[] memory p_resourcereward_resources = new uint8[](1);
  p_resourcereward_resources[0] = 10;
  uint256[] memory p_resourcereward_amounts = new uint256[](1);
  p_resourcereward_amounts[0] = 2000000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant TrainAnvilDrone3PrototypeId = "TrainAnvilDrone3";

function TrainAnvilDrone3Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = TrainAnvilDrone3PrototypeId;
  return _keyTuple;
}

function TrainAnvilDrone3Prototype(IStore store) {
  bytes32[] memory keys = TrainAnvilDrone3Keys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_ProducedUnitsTableId;
  tableIds[2] = P_ResourceRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x547261696e416e76696c44726f6e653200000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_producedunits_units = new bytes32[](1);
  p_producedunits_units[0] = 0x416e76696c44726f6e6500000000000000000000000000000000000000000000;
  uint256[] memory p_producedunits_amounts = new uint256[](1);
  p_producedunits_amounts[0] = 100;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_ProducedUnits.encode(
    p_producedunits_units,
    p_producedunits_amounts
  );
  uint8[] memory p_resourcereward_resources = new uint8[](1);
  p_resourcereward_resources[0] = 10;
  uint256[] memory p_resourcereward_amounts = new uint256[](1);
  p_resourcereward_amounts[0] = 5000000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant TrainHammerDrone1PrototypeId = "TrainHammerDrone1";

function TrainHammerDrone1Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = TrainHammerDrone1PrototypeId;
  return _keyTuple;
}

function TrainHammerDrone1LevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = TrainHammerDrone1PrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function TrainHammerDrone1Prototype(IStore store) {
  bytes32[] memory keys = TrainHammerDrone1Keys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_ProducedUnitsTableId;
  tableIds[2] = P_ResourceRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x4275696c6444726f6e65466163746f7279000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_producedunits_units = new bytes32[](1);
  p_producedunits_units[0] = 0x48616d6d657244726f6e65000000000000000000000000000000000000000000;
  uint256[] memory p_producedunits_amounts = new uint256[](1);
  p_producedunits_amounts[0] = 20;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_ProducedUnits.encode(
    p_producedunits_units,
    p_producedunits_amounts
  );
  uint8[] memory p_resourcereward_resources = new uint8[](1);
  p_resourcereward_resources[0] = 10;
  uint256[] memory p_resourcereward_amounts = new uint256[](1);
  p_resourcereward_amounts[0] = 500000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createTrainHammerDrone1Level1(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createTrainHammerDrone1Level1(IStore store) {
  bytes32[] memory levelKeys = TrainHammerDrone1LevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_RequiredBaseLevelTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(2);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant TrainHammerDrone2PrototypeId = "TrainHammerDrone2";

function TrainHammerDrone2Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = TrainHammerDrone2PrototypeId;
  return _keyTuple;
}

function TrainHammerDrone2Prototype(IStore store) {
  bytes32[] memory keys = TrainHammerDrone2Keys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_ProducedUnitsTableId;
  tableIds[2] = P_ResourceRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x547261696e48616d6d657244726f6e6531000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_producedunits_units = new bytes32[](1);
  p_producedunits_units[0] = 0x48616d6d657244726f6e65000000000000000000000000000000000000000000;
  uint256[] memory p_producedunits_amounts = new uint256[](1);
  p_producedunits_amounts[0] = 50;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_ProducedUnits.encode(
    p_producedunits_units,
    p_producedunits_amounts
  );
  uint8[] memory p_resourcereward_resources = new uint8[](1);
  p_resourcereward_resources[0] = 10;
  uint256[] memory p_resourcereward_amounts = new uint256[](1);
  p_resourcereward_amounts[0] = 5000000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant TrainHammerDrone3PrototypeId = "TrainHammerDrone3";

function TrainHammerDrone3Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = TrainHammerDrone3PrototypeId;
  return _keyTuple;
}

function TrainHammerDrone3Prototype(IStore store) {
  bytes32[] memory keys = TrainHammerDrone3Keys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_ProducedUnitsTableId;
  tableIds[2] = P_ResourceRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x547261696e48616d6d657244726f6e6532000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_producedunits_units = new bytes32[](1);
  p_producedunits_units[0] = 0x48616d6d657244726f6e65000000000000000000000000000000000000000000;
  uint256[] memory p_producedunits_amounts = new uint256[](1);
  p_producedunits_amounts[0] = 100;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_ProducedUnits.encode(
    p_producedunits_units,
    p_producedunits_amounts
  );
  uint8[] memory p_resourcereward_resources = new uint8[](1);
  p_resourcereward_resources[0] = 10;
  uint256[] memory p_resourcereward_amounts = new uint256[](1);
  p_resourcereward_amounts[0] = 10000000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant TrainAegisDrone1PrototypeId = "TrainAegisDrone1";

function TrainAegisDrone1Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = TrainAegisDrone1PrototypeId;
  return _keyTuple;
}

function TrainAegisDrone1LevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = TrainAegisDrone1PrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function TrainAegisDrone1Prototype(IStore store) {
  bytes32[] memory keys = TrainAegisDrone1Keys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_ProducedUnitsTableId;
  tableIds[2] = P_ResourceRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x4275696c6444726f6e65466163746f7279000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_producedunits_units = new bytes32[](1);
  p_producedunits_units[0] = 0x416567697344726f6e6500000000000000000000000000000000000000000000;
  uint256[] memory p_producedunits_amounts = new uint256[](1);
  p_producedunits_amounts[0] = 20;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_ProducedUnits.encode(
    p_producedunits_units,
    p_producedunits_amounts
  );
  uint8[] memory p_resourcereward_resources = new uint8[](1);
  p_resourcereward_resources[0] = 9;
  uint256[] memory p_resourcereward_amounts = new uint256[](1);
  p_resourcereward_amounts[0] = 500000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createTrainAegisDrone1Level1(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createTrainAegisDrone1Level1(IStore store) {
  bytes32[] memory levelKeys = TrainAegisDrone1LevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_RequiredBaseLevelTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(3);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant TrainAegisDrone2PrototypeId = "TrainAegisDrone2";

function TrainAegisDrone2Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = TrainAegisDrone2PrototypeId;
  return _keyTuple;
}

function TrainAegisDrone2Prototype(IStore store) {
  bytes32[] memory keys = TrainAegisDrone2Keys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_ProducedUnitsTableId;
  tableIds[2] = P_ResourceRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x547261696e416567697344726f6e653100000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_producedunits_units = new bytes32[](1);
  p_producedunits_units[0] = 0x416567697344726f6e6500000000000000000000000000000000000000000000;
  uint256[] memory p_producedunits_amounts = new uint256[](1);
  p_producedunits_amounts[0] = 50;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_ProducedUnits.encode(
    p_producedunits_units,
    p_producedunits_amounts
  );
  uint8[] memory p_resourcereward_resources = new uint8[](1);
  p_resourcereward_resources[0] = 9;
  uint256[] memory p_resourcereward_amounts = new uint256[](1);
  p_resourcereward_amounts[0] = 5000000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant TrainAegisDrone3PrototypeId = "TrainAegisDrone3";

function TrainAegisDrone3Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = TrainAegisDrone3PrototypeId;
  return _keyTuple;
}

function TrainAegisDrone3Prototype(IStore store) {
  bytes32[] memory keys = TrainAegisDrone3Keys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_ProducedUnitsTableId;
  tableIds[2] = P_ResourceRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x547261696e416567697344726f6e653200000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_producedunits_units = new bytes32[](1);
  p_producedunits_units[0] = 0x416567697344726f6e6500000000000000000000000000000000000000000000;
  uint256[] memory p_producedunits_amounts = new uint256[](1);
  p_producedunits_amounts[0] = 100;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_ProducedUnits.encode(
    p_producedunits_units,
    p_producedunits_amounts
  );
  uint8[] memory p_resourcereward_resources = new uint8[](1);
  p_resourcereward_resources[0] = 9;
  uint256[] memory p_resourcereward_amounts = new uint256[](1);
  p_resourcereward_amounts[0] = 10000000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant TrainStingerDrone1PrototypeId = "TrainStingerDrone1";

function TrainStingerDrone1Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = TrainStingerDrone1PrototypeId;
  return _keyTuple;
}

function TrainStingerDrone1LevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = TrainStingerDrone1PrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function TrainStingerDrone1Prototype(IStore store) {
  bytes32[] memory keys = TrainStingerDrone1Keys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_ProducedUnitsTableId;
  tableIds[2] = P_ResourceRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x4275696c6444726f6e65466163746f7279000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_producedunits_units = new bytes32[](1);
  p_producedunits_units[0] = 0x5374696e67657244726f6e650000000000000000000000000000000000000000;
  uint256[] memory p_producedunits_amounts = new uint256[](1);
  p_producedunits_amounts[0] = 20;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_ProducedUnits.encode(
    p_producedunits_units,
    p_producedunits_amounts
  );
  uint8[] memory p_resourcereward_resources = new uint8[](3);
  p_resourcereward_resources[0] = 1;
  p_resourcereward_resources[1] = 2;
  p_resourcereward_resources[2] = 3;
  uint256[] memory p_resourcereward_amounts = new uint256[](3);
  p_resourcereward_amounts[0] = 5000000000000000000000;
  p_resourcereward_amounts[1] = 5000000000000000000000;
  p_resourcereward_amounts[2] = 5000000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createTrainStingerDrone1Level1(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createTrainStingerDrone1Level1(IStore store) {
  bytes32[] memory levelKeys = TrainStingerDrone1LevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_RequiredBaseLevelTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(3);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant TrainStingerDrone2PrototypeId = "TrainStingerDrone2";

function TrainStingerDrone2Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = TrainStingerDrone2PrototypeId;
  return _keyTuple;
}

function TrainStingerDrone2Prototype(IStore store) {
  bytes32[] memory keys = TrainStingerDrone2Keys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_ProducedUnitsTableId;
  tableIds[2] = P_ResourceRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x547261696e5374696e67657244726f6e65310000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_producedunits_units = new bytes32[](1);
  p_producedunits_units[0] = 0x5374696e67657244726f6e650000000000000000000000000000000000000000;
  uint256[] memory p_producedunits_amounts = new uint256[](1);
  p_producedunits_amounts[0] = 50;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_ProducedUnits.encode(
    p_producedunits_units,
    p_producedunits_amounts
  );
  uint8[] memory p_resourcereward_resources = new uint8[](3);
  p_resourcereward_resources[0] = 1;
  p_resourcereward_resources[1] = 2;
  p_resourcereward_resources[2] = 3;
  uint256[] memory p_resourcereward_amounts = new uint256[](3);
  p_resourcereward_amounts[0] = 15000000000000000000000;
  p_resourcereward_amounts[1] = 15000000000000000000000;
  p_resourcereward_amounts[2] = 15000000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant TrainStingerDrone3PrototypeId = "TrainStingerDrone3";

function TrainStingerDrone3Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = TrainStingerDrone3PrototypeId;
  return _keyTuple;
}

function TrainStingerDrone3Prototype(IStore store) {
  bytes32[] memory keys = TrainStingerDrone3Keys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_ProducedUnitsTableId;
  tableIds[2] = P_ResourceRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x547261696e5374696e67657244726f6e65320000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_producedunits_units = new bytes32[](1);
  p_producedunits_units[0] = 0x5374696e67657244726f6e650000000000000000000000000000000000000000;
  uint256[] memory p_producedunits_amounts = new uint256[](1);
  p_producedunits_amounts[0] = 100;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_ProducedUnits.encode(
    p_producedunits_units,
    p_producedunits_amounts
  );
  uint8[] memory p_resourcereward_resources = new uint8[](3);
  p_resourcereward_resources[0] = 1;
  p_resourcereward_resources[1] = 2;
  p_resourcereward_resources[2] = 3;
  uint256[] memory p_resourcereward_amounts = new uint256[](3);
  p_resourcereward_amounts[0] = 75000000000000002097152;
  p_resourcereward_amounts[1] = 75000000000000002097152;
  p_resourcereward_amounts[2] = 75000000000000002097152;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MineTitanium1PrototypeId = "MineTitanium1";

function MineTitanium1Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = MineTitanium1PrototypeId;
  return _keyTuple;
}

function MineTitanium1LevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = MineTitanium1PrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function MineTitanium1Prototype(IStore store) {
  bytes32[] memory keys = MineTitanium1Keys();
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_ProducedResourcesTableId;
  tableIds[1] = P_UnitRewardTableId;

  uint8[] memory p_producedresources_resources = new uint8[](1);
  p_producedresources_resources[0] = 4;
  uint256[] memory p_producedresources_amounts = new uint256[](1);
  p_producedresources_amounts[0] = 1000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ProducedResources.encode(
    p_producedresources_resources,
    p_producedresources_amounts
  );
  bytes32[] memory p_unitreward_units = new bytes32[](1);
  p_unitreward_units[0] = 0x416e76696c44726f6e6500000000000000000000000000000000000000000000;
  uint256[] memory p_unitreward_amounts = new uint256[](1);
  p_unitreward_amounts[0] = 30;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_UnitReward.encode(p_unitreward_units, p_unitreward_amounts);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createMineTitanium1Level1(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createMineTitanium1Level1(IStore store) {
  bytes32[] memory levelKeys = MineTitanium1LevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_RequiredBaseLevelTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(4);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MineTitanium2PrototypeId = "MineTitanium2";

function MineTitanium2Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = MineTitanium2PrototypeId;
  return _keyTuple;
}

function MineTitanium2Prototype(IStore store) {
  bytes32[] memory keys = MineTitanium2Keys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_ProducedResourcesTableId;
  tableIds[2] = P_UnitRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x4d696e65546974616e69756d3100000000000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  uint8[] memory p_producedresources_resources = new uint8[](1);
  p_producedresources_resources[0] = 4;
  uint256[] memory p_producedresources_amounts = new uint256[](1);
  p_producedresources_amounts[0] = 3000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_ProducedResources.encode(
    p_producedresources_resources,
    p_producedresources_amounts
  );
  bytes32[] memory p_unitreward_units = new bytes32[](1);
  p_unitreward_units[0] = 0x416e76696c44726f6e6500000000000000000000000000000000000000000000;
  uint256[] memory p_unitreward_amounts = new uint256[](1);
  p_unitreward_amounts[0] = 100;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_UnitReward.encode(p_unitreward_units, p_unitreward_amounts);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MineTitanium3PrototypeId = "MineTitanium3";

function MineTitanium3Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = MineTitanium3PrototypeId;
  return _keyTuple;
}

function MineTitanium3Prototype(IStore store) {
  bytes32[] memory keys = MineTitanium3Keys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_ProducedResourcesTableId;
  tableIds[2] = P_UnitRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x4d696e65546974616e69756d3200000000000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  uint8[] memory p_producedresources_resources = new uint8[](1);
  p_producedresources_resources[0] = 4;
  uint256[] memory p_producedresources_amounts = new uint256[](1);
  p_producedresources_amounts[0] = 10000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_ProducedResources.encode(
    p_producedresources_resources,
    p_producedresources_amounts
  );
  bytes32[] memory p_unitreward_units = new bytes32[](1);
  p_unitreward_units[0] = 0x416e76696c44726f6e6500000000000000000000000000000000000000000000;
  uint256[] memory p_unitreward_amounts = new uint256[](1);
  p_unitreward_amounts[0] = 250;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_UnitReward.encode(p_unitreward_units, p_unitreward_amounts);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MinePlatinum1PrototypeId = "MinePlatinum1";

function MinePlatinum1Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = MinePlatinum1PrototypeId;
  return _keyTuple;
}

function MinePlatinum1LevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = MinePlatinum1PrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function MinePlatinum1Prototype(IStore store) {
  bytes32[] memory keys = MinePlatinum1Keys();
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_ProducedResourcesTableId;
  tableIds[1] = P_UnitRewardTableId;

  uint8[] memory p_producedresources_resources = new uint8[](1);
  p_producedresources_resources[0] = 7;
  uint256[] memory p_producedresources_amounts = new uint256[](1);
  p_producedresources_amounts[0] = 1000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ProducedResources.encode(
    p_producedresources_resources,
    p_producedresources_amounts
  );
  bytes32[] memory p_unitreward_units = new bytes32[](1);
  p_unitreward_units[0] = 0x48616d6d657244726f6e65000000000000000000000000000000000000000000;
  uint256[] memory p_unitreward_amounts = new uint256[](1);
  p_unitreward_amounts[0] = 30;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_UnitReward.encode(p_unitreward_units, p_unitreward_amounts);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createMinePlatinum1Level1(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createMinePlatinum1Level1(IStore store) {
  bytes32[] memory levelKeys = MinePlatinum1LevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_RequiredBaseLevelTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(4);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MinePlatinum2PrototypeId = "MinePlatinum2";

function MinePlatinum2Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = MinePlatinum2PrototypeId;
  return _keyTuple;
}

function MinePlatinum2Prototype(IStore store) {
  bytes32[] memory keys = MinePlatinum2Keys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_ProducedResourcesTableId;
  tableIds[2] = P_UnitRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x4d696e65506c6174696e756d3100000000000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  uint8[] memory p_producedresources_resources = new uint8[](1);
  p_producedresources_resources[0] = 7;
  uint256[] memory p_producedresources_amounts = new uint256[](1);
  p_producedresources_amounts[0] = 3000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_ProducedResources.encode(
    p_producedresources_resources,
    p_producedresources_amounts
  );
  bytes32[] memory p_unitreward_units = new bytes32[](1);
  p_unitreward_units[0] = 0x48616d6d657244726f6e65000000000000000000000000000000000000000000;
  uint256[] memory p_unitreward_amounts = new uint256[](1);
  p_unitreward_amounts[0] = 100;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_UnitReward.encode(p_unitreward_units, p_unitreward_amounts);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MinePlatinum3PrototypeId = "MinePlatinum3";

function MinePlatinum3Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = MinePlatinum3PrototypeId;
  return _keyTuple;
}

function MinePlatinum3Prototype(IStore store) {
  bytes32[] memory keys = MinePlatinum3Keys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_ProducedResourcesTableId;
  tableIds[2] = P_UnitRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x4d696e65506c6174696e756d3200000000000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  uint8[] memory p_producedresources_resources = new uint8[](1);
  p_producedresources_resources[0] = 7;
  uint256[] memory p_producedresources_amounts = new uint256[](1);
  p_producedresources_amounts[0] = 10000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_ProducedResources.encode(
    p_producedresources_resources,
    p_producedresources_amounts
  );
  bytes32[] memory p_unitreward_units = new bytes32[](1);
  p_unitreward_units[0] = 0x48616d6d657244726f6e65000000000000000000000000000000000000000000;
  uint256[] memory p_unitreward_amounts = new uint256[](1);
  p_unitreward_amounts[0] = 100;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_UnitReward.encode(p_unitreward_units, p_unitreward_amounts);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MineIridium1PrototypeId = "MineIridium1";

function MineIridium1Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = MineIridium1PrototypeId;
  return _keyTuple;
}

function MineIridium1LevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = MineIridium1PrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function MineIridium1Prototype(IStore store) {
  bytes32[] memory keys = MineIridium1Keys();
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_ProducedResourcesTableId;
  tableIds[1] = P_UnitRewardTableId;

  uint8[] memory p_producedresources_resources = new uint8[](1);
  p_producedresources_resources[0] = 5;
  uint256[] memory p_producedresources_amounts = new uint256[](1);
  p_producedresources_amounts[0] = 1000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ProducedResources.encode(
    p_producedresources_resources,
    p_producedresources_amounts
  );
  bytes32[] memory p_unitreward_units = new bytes32[](1);
  p_unitreward_units[0] = 0x416567697344726f6e6500000000000000000000000000000000000000000000;
  uint256[] memory p_unitreward_amounts = new uint256[](1);
  p_unitreward_amounts[0] = 30;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_UnitReward.encode(p_unitreward_units, p_unitreward_amounts);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createMineIridium1Level1(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createMineIridium1Level1(IStore store) {
  bytes32[] memory levelKeys = MineIridium1LevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_RequiredBaseLevelTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(4);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MineIridium2PrototypeId = "MineIridium2";

function MineIridium2Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = MineIridium2PrototypeId;
  return _keyTuple;
}

function MineIridium2Prototype(IStore store) {
  bytes32[] memory keys = MineIridium2Keys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_ProducedResourcesTableId;
  tableIds[2] = P_UnitRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x4d696e654972696469756d310000000000000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  uint8[] memory p_producedresources_resources = new uint8[](1);
  p_producedresources_resources[0] = 5;
  uint256[] memory p_producedresources_amounts = new uint256[](1);
  p_producedresources_amounts[0] = 3000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_ProducedResources.encode(
    p_producedresources_resources,
    p_producedresources_amounts
  );
  bytes32[] memory p_unitreward_units = new bytes32[](1);
  p_unitreward_units[0] = 0x416567697344726f6e6500000000000000000000000000000000000000000000;
  uint256[] memory p_unitreward_amounts = new uint256[](1);
  p_unitreward_amounts[0] = 100;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_UnitReward.encode(p_unitreward_units, p_unitreward_amounts);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MineIridium3PrototypeId = "MineIridium3";

function MineIridium3Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = MineIridium3PrototypeId;
  return _keyTuple;
}

function MineIridium3Prototype(IStore store) {
  bytes32[] memory keys = MineIridium3Keys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_ProducedResourcesTableId;
  tableIds[2] = P_UnitRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x4d696e654972696469756d320000000000000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  uint8[] memory p_producedresources_resources = new uint8[](1);
  p_producedresources_resources[0] = 5;
  uint256[] memory p_producedresources_amounts = new uint256[](1);
  p_producedresources_amounts[0] = 10000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_ProducedResources.encode(
    p_producedresources_resources,
    p_producedresources_amounts
  );
  bytes32[] memory p_unitreward_units = new bytes32[](1);
  p_unitreward_units[0] = 0x416567697344726f6e6500000000000000000000000000000000000000000000;
  uint256[] memory p_unitreward_amounts = new uint256[](1);
  p_unitreward_amounts[0] = 250;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_UnitReward.encode(p_unitreward_units, p_unitreward_amounts);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MineKimberlite1PrototypeId = "MineKimberlite1";

function MineKimberlite1Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = MineKimberlite1PrototypeId;
  return _keyTuple;
}

function MineKimberlite1LevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = MineKimberlite1PrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function MineKimberlite1Prototype(IStore store) {
  bytes32[] memory keys = MineKimberlite1Keys();
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_ProducedResourcesTableId;
  tableIds[1] = P_UnitRewardTableId;

  uint8[] memory p_producedresources_resources = new uint8[](1);
  p_producedresources_resources[0] = 6;
  uint256[] memory p_producedresources_amounts = new uint256[](1);
  p_producedresources_amounts[0] = 1000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_ProducedResources.encode(
    p_producedresources_resources,
    p_producedresources_amounts
  );
  bytes32[] memory p_unitreward_units = new bytes32[](3);
  p_unitreward_units[0] = 0x416e76696c44726f6e6500000000000000000000000000000000000000000000;
  p_unitreward_units[1] = 0x48616d6d657244726f6e65000000000000000000000000000000000000000000;
  p_unitreward_units[2] = 0x416567697344726f6e6500000000000000000000000000000000000000000000;
  uint256[] memory p_unitreward_amounts = new uint256[](3);
  p_unitreward_amounts[0] = 15;
  p_unitreward_amounts[1] = 15;
  p_unitreward_amounts[2] = 15;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_UnitReward.encode(p_unitreward_units, p_unitreward_amounts);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createMineKimberlite1Level1(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createMineKimberlite1Level1(IStore store) {
  bytes32[] memory levelKeys = MineKimberlite1LevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_RequiredBaseLevelTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(4);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MineKimberlite2PrototypeId = "MineKimberlite2";

function MineKimberlite2Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = MineKimberlite2PrototypeId;
  return _keyTuple;
}

function MineKimberlite2Prototype(IStore store) {
  bytes32[] memory keys = MineKimberlite2Keys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_ProducedResourcesTableId;
  tableIds[2] = P_UnitRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x4d696e654b696d6265726c697465310000000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  uint8[] memory p_producedresources_resources = new uint8[](1);
  p_producedresources_resources[0] = 6;
  uint256[] memory p_producedresources_amounts = new uint256[](1);
  p_producedresources_amounts[0] = 3000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_ProducedResources.encode(
    p_producedresources_resources,
    p_producedresources_amounts
  );
  bytes32[] memory p_unitreward_units = new bytes32[](3);
  p_unitreward_units[0] = 0x416e76696c44726f6e6500000000000000000000000000000000000000000000;
  p_unitreward_units[1] = 0x48616d6d657244726f6e65000000000000000000000000000000000000000000;
  p_unitreward_units[2] = 0x416567697344726f6e6500000000000000000000000000000000000000000000;
  uint256[] memory p_unitreward_amounts = new uint256[](3);
  p_unitreward_amounts[0] = 50;
  p_unitreward_amounts[1] = 50;
  p_unitreward_amounts[2] = 50;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_UnitReward.encode(p_unitreward_units, p_unitreward_amounts);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant MineKimberlite3PrototypeId = "MineKimberlite3";

function MineKimberlite3Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = MineKimberlite3PrototypeId;
  return _keyTuple;
}

function MineKimberlite3Prototype(IStore store) {
  bytes32[] memory keys = MineKimberlite3Keys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_ProducedResourcesTableId;
  tableIds[2] = P_UnitRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x4d696e654b696d6265726c697465320000000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  uint8[] memory p_producedresources_resources = new uint8[](1);
  p_producedresources_resources[0] = 6;
  uint256[] memory p_producedresources_amounts = new uint256[](1);
  p_producedresources_amounts[0] = 10000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_ProducedResources.encode(
    p_producedresources_resources,
    p_producedresources_amounts
  );
  bytes32[] memory p_unitreward_units = new bytes32[](3);
  p_unitreward_units[0] = 0x416e76696c44726f6e6500000000000000000000000000000000000000000000;
  p_unitreward_units[1] = 0x48616d6d657244726f6e65000000000000000000000000000000000000000000;
  p_unitreward_units[2] = 0x416567697344726f6e6500000000000000000000000000000000000000000000;
  uint256[] memory p_unitreward_amounts = new uint256[](3);
  p_unitreward_amounts[0] = 100;
  p_unitreward_amounts[1] = 100;
  p_unitreward_amounts[2] = 100;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_UnitReward.encode(p_unitreward_units, p_unitreward_amounts);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant RaidRawResources1PrototypeId = "RaidRawResources1";

function RaidRawResources1Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = RaidRawResources1PrototypeId;
  return _keyTuple;
}

function RaidRawResources1LevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = RaidRawResources1PrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function RaidRawResources1Prototype(IStore store) {
  bytes32[] memory keys = RaidRawResources1Keys();
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_RaidedResourcesTableId;
  tableIds[1] = P_UnitRewardTableId;

  uint8[] memory p_raidedresources_resources = new uint8[](3);
  p_raidedresources_resources[0] = 1;
  p_raidedresources_resources[1] = 2;
  p_raidedresources_resources[2] = 3;
  uint256[] memory p_raidedresources_amounts = new uint256[](3);
  p_raidedresources_amounts[0] = 2000000000000000000000;
  p_raidedresources_amounts[1] = 2000000000000000000000;
  p_raidedresources_amounts[2] = 2000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RaidedResources.encode(
    p_raidedresources_resources,
    p_raidedresources_amounts
  );
  bytes32[] memory p_unitreward_units = new bytes32[](1);
  p_unitreward_units[0] = 0x48616d6d657244726f6e65000000000000000000000000000000000000000000;
  uint256[] memory p_unitreward_amounts = new uint256[](1);
  p_unitreward_amounts[0] = 30;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_UnitReward.encode(p_unitreward_units, p_unitreward_amounts);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createRaidRawResources1Level1(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createRaidRawResources1Level1(IStore store) {
  bytes32[] memory levelKeys = RaidRawResources1LevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_RequiredBaseLevelTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(2);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant RaidRawResources2PrototypeId = "RaidRawResources2";

function RaidRawResources2Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = RaidRawResources2PrototypeId;
  return _keyTuple;
}

function RaidRawResources2Prototype(IStore store) {
  bytes32[] memory keys = RaidRawResources2Keys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_RaidedResourcesTableId;
  tableIds[2] = P_UnitRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x526169645261775265736f757263657331000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  uint8[] memory p_raidedresources_resources = new uint8[](3);
  p_raidedresources_resources[0] = 1;
  p_raidedresources_resources[1] = 2;
  p_raidedresources_resources[2] = 3;
  uint256[] memory p_raidedresources_amounts = new uint256[](3);
  p_raidedresources_amounts[0] = 5000000000000000000000;
  p_raidedresources_amounts[1] = 5000000000000000000000;
  p_raidedresources_amounts[2] = 5000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RaidedResources.encode(
    p_raidedresources_resources,
    p_raidedresources_amounts
  );
  bytes32[] memory p_unitreward_units = new bytes32[](1);
  p_unitreward_units[0] = 0x48616d6d657244726f6e65000000000000000000000000000000000000000000;
  uint256[] memory p_unitreward_amounts = new uint256[](1);
  p_unitreward_amounts[0] = 100;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_UnitReward.encode(p_unitreward_units, p_unitreward_amounts);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant RaidRawResources3PrototypeId = "RaidRawResources3";

function RaidRawResources3Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = RaidRawResources3PrototypeId;
  return _keyTuple;
}

function RaidRawResources3Prototype(IStore store) {
  bytes32[] memory keys = RaidRawResources3Keys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_RaidedResourcesTableId;
  tableIds[2] = P_UnitRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x526169645261775265736f757263657332000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  uint8[] memory p_raidedresources_resources = new uint8[](3);
  p_raidedresources_resources[0] = 1;
  p_raidedresources_resources[1] = 2;
  p_raidedresources_resources[2] = 3;
  uint256[] memory p_raidedresources_amounts = new uint256[](3);
  p_raidedresources_amounts[0] = 24999999999999997902848;
  p_raidedresources_amounts[1] = 24999999999999997902848;
  p_raidedresources_amounts[2] = 24999999999999997902848;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RaidedResources.encode(
    p_raidedresources_resources,
    p_raidedresources_amounts
  );
  bytes32[] memory p_unitreward_units = new bytes32[](1);
  p_unitreward_units[0] = 0x48616d6d657244726f6e65000000000000000000000000000000000000000000;
  uint256[] memory p_unitreward_amounts = new uint256[](1);
  p_unitreward_amounts[0] = 300;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_UnitReward.encode(p_unitreward_units, p_unitreward_amounts);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant RaidFactoryResources1PrototypeId = "RaidFactoryResources1";

function RaidFactoryResources1Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = RaidFactoryResources1PrototypeId;
  return _keyTuple;
}

function RaidFactoryResources1LevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = RaidFactoryResources1PrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function RaidFactoryResources1Prototype(IStore store) {
  bytes32[] memory keys = RaidFactoryResources1Keys();
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_RaidedResourcesTableId;
  tableIds[1] = P_UnitRewardTableId;

  uint8[] memory p_raidedresources_resources = new uint8[](3);
  p_raidedresources_resources[0] = 8;
  p_raidedresources_resources[1] = 10;
  p_raidedresources_resources[2] = 9;
  uint256[] memory p_raidedresources_amounts = new uint256[](3);
  p_raidedresources_amounts[0] = 2000000000000000000000;
  p_raidedresources_amounts[1] = 2000000000000000000000;
  p_raidedresources_amounts[2] = 2000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RaidedResources.encode(
    p_raidedresources_resources,
    p_raidedresources_amounts
  );
  bytes32[] memory p_unitreward_units = new bytes32[](1);
  p_unitreward_units[0] = 0x416567697344726f6e6500000000000000000000000000000000000000000000;
  uint256[] memory p_unitreward_amounts = new uint256[](1);
  p_unitreward_amounts[0] = 30;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_UnitReward.encode(p_unitreward_units, p_unitreward_amounts);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createRaidFactoryResources1Level1(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createRaidFactoryResources1Level1(IStore store) {
  bytes32[] memory levelKeys = RaidFactoryResources1LevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_RequiredBaseLevelTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(2);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant RaidFactoryResources2PrototypeId = "RaidFactoryResources2";

function RaidFactoryResources2Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = RaidFactoryResources2PrototypeId;
  return _keyTuple;
}

function RaidFactoryResources2Prototype(IStore store) {
  bytes32[] memory keys = RaidFactoryResources2Keys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_RaidedResourcesTableId;
  tableIds[2] = P_UnitRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x52616964466163746f72795265736f7572636573310000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  uint8[] memory p_raidedresources_resources = new uint8[](3);
  p_raidedresources_resources[0] = 8;
  p_raidedresources_resources[1] = 10;
  p_raidedresources_resources[2] = 9;
  uint256[] memory p_raidedresources_amounts = new uint256[](3);
  p_raidedresources_amounts[0] = 5000000000000000000000;
  p_raidedresources_amounts[1] = 5000000000000000000000;
  p_raidedresources_amounts[2] = 5000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RaidedResources.encode(
    p_raidedresources_resources,
    p_raidedresources_amounts
  );
  bytes32[] memory p_unitreward_units = new bytes32[](1);
  p_unitreward_units[0] = 0x416567697344726f6e6500000000000000000000000000000000000000000000;
  uint256[] memory p_unitreward_amounts = new uint256[](1);
  p_unitreward_amounts[0] = 100;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_UnitReward.encode(p_unitreward_units, p_unitreward_amounts);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant RaidFactoryResources3PrototypeId = "RaidFactoryResources3";

function RaidFactoryResources3Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = RaidFactoryResources3PrototypeId;
  return _keyTuple;
}

function RaidFactoryResources3Prototype(IStore store) {
  bytes32[] memory keys = RaidFactoryResources3Keys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_RaidedResourcesTableId;
  tableIds[2] = P_UnitRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x52616964466163746f72795265736f7572636573320000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  uint8[] memory p_raidedresources_resources = new uint8[](3);
  p_raidedresources_resources[0] = 8;
  p_raidedresources_resources[1] = 10;
  p_raidedresources_resources[2] = 9;
  uint256[] memory p_raidedresources_amounts = new uint256[](3);
  p_raidedresources_amounts[0] = 24999999999999997902848;
  p_raidedresources_amounts[1] = 24999999999999997902848;
  p_raidedresources_amounts[2] = 24999999999999997902848;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RaidedResources.encode(
    p_raidedresources_resources,
    p_raidedresources_amounts
  );
  bytes32[] memory p_unitreward_units = new bytes32[](1);
  p_unitreward_units[0] = 0x416567697344726f6e6500000000000000000000000000000000000000000000;
  uint256[] memory p_unitreward_amounts = new uint256[](1);
  p_unitreward_amounts[0] = 300;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_UnitReward.encode(p_unitreward_units, p_unitreward_amounts);

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant DestroyEnemyUnits1PrototypeId = "DestroyEnemyUnits1";

function DestroyEnemyUnits1Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = DestroyEnemyUnits1PrototypeId;
  return _keyTuple;
}

function DestroyEnemyUnits1LevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = DestroyEnemyUnits1PrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function DestroyEnemyUnits1Prototype(IStore store) {
  bytes32[] memory keys = DestroyEnemyUnits1Keys();
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_DestroyedUnitsTableId;
  tableIds[1] = P_ResourceRewardTableId;

  bytes32[] memory p_destroyedunits_units = new bytes32[](1);
  p_destroyedunits_units[0] = 0x4d696e7574656d616e4d6172696e650000000000000000000000000000000000;
  uint256[] memory p_destroyedunits_amounts = new uint256[](1);
  p_destroyedunits_amounts[0] = 500;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_DestroyedUnits.encode(
    p_destroyedunits_units,
    p_destroyedunits_amounts
  );
  uint8[] memory p_resourcereward_resources = new uint8[](2);
  p_resourcereward_resources[0] = 2;
  p_resourcereward_resources[1] = 1;
  uint256[] memory p_resourcereward_amounts = new uint256[](2);
  p_resourcereward_amounts[0] = 3000000000000000000000;
  p_resourcereward_amounts[1] = 3000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createDestroyEnemyUnits1Level1(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createDestroyEnemyUnits1Level1(IStore store) {
  bytes32[] memory levelKeys = DestroyEnemyUnits1LevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_RequiredBaseLevelTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(2);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant DestroyEnemyUnits2PrototypeId = "DestroyEnemyUnits2";

function DestroyEnemyUnits2Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = DestroyEnemyUnits2PrototypeId;
  return _keyTuple;
}

function DestroyEnemyUnits2Prototype(IStore store) {
  bytes32[] memory keys = DestroyEnemyUnits2Keys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_DestroyedUnitsTableId;
  tableIds[2] = P_ResourceRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x44657374726f79456e656d79556e697473310000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_destroyedunits_units = new bytes32[](1);
  p_destroyedunits_units[0] = 0x54726964656e744d6172696e6500000000000000000000000000000000000000;
  uint256[] memory p_destroyedunits_amounts = new uint256[](1);
  p_destroyedunits_amounts[0] = 500;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_DestroyedUnits.encode(
    p_destroyedunits_units,
    p_destroyedunits_amounts
  );
  uint8[] memory p_resourcereward_resources = new uint8[](2);
  p_resourcereward_resources[0] = 2;
  p_resourcereward_resources[1] = 3;
  uint256[] memory p_resourcereward_amounts = new uint256[](2);
  p_resourcereward_amounts[0] = 10000000000000000000000;
  p_resourcereward_amounts[1] = 10000000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant DestroyEnemyUnits3PrototypeId = "DestroyEnemyUnits3";

function DestroyEnemyUnits3Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = DestroyEnemyUnits3PrototypeId;
  return _keyTuple;
}

function DestroyEnemyUnits3Prototype(IStore store) {
  bytes32[] memory keys = DestroyEnemyUnits3Keys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_DestroyedUnitsTableId;
  tableIds[2] = P_ResourceRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x44657374726f79456e656d79556e697473320000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_destroyedunits_units = new bytes32[](1);
  p_destroyedunits_units[0] = 0x416e76696c44726f6e6500000000000000000000000000000000000000000000;
  uint256[] memory p_destroyedunits_amounts = new uint256[](1);
  p_destroyedunits_amounts[0] = 300;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_DestroyedUnits.encode(
    p_destroyedunits_units,
    p_destroyedunits_amounts
  );
  uint8[] memory p_resourcereward_resources = new uint8[](2);
  p_resourcereward_resources[0] = 2;
  p_resourcereward_resources[1] = 8;
  uint256[] memory p_resourcereward_amounts = new uint256[](2);
  p_resourcereward_amounts[0] = 30000000000000000000000;
  p_resourcereward_amounts[1] = 30000000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant DestroyEnemyUnits4PrototypeId = "DestroyEnemyUnits4";

function DestroyEnemyUnits4Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = DestroyEnemyUnits4PrototypeId;
  return _keyTuple;
}

function DestroyEnemyUnits4Prototype(IStore store) {
  bytes32[] memory keys = DestroyEnemyUnits4Keys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_DestroyedUnitsTableId;
  tableIds[2] = P_ResourceRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x44657374726f79456e656d79556e697473330000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_destroyedunits_units = new bytes32[](1);
  p_destroyedunits_units[0] = 0x416567697344726f6e6500000000000000000000000000000000000000000000;
  uint256[] memory p_destroyedunits_amounts = new uint256[](1);
  p_destroyedunits_amounts[0] = 300;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_DestroyedUnits.encode(
    p_destroyedunits_units,
    p_destroyedunits_amounts
  );
  uint8[] memory p_resourcereward_resources = new uint8[](2);
  p_resourcereward_resources[0] = 2;
  p_resourcereward_resources[1] = 10;
  uint256[] memory p_resourcereward_amounts = new uint256[](2);
  p_resourcereward_amounts[0] = 300000000000000008388608;
  p_resourcereward_amounts[1] = 300000000000000008388608;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant DestroyEnemyUnits5PrototypeId = "DestroyEnemyUnits5";

function DestroyEnemyUnits5Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = DestroyEnemyUnits5PrototypeId;
  return _keyTuple;
}

function DestroyEnemyUnits5Prototype(IStore store) {
  bytes32[] memory keys = DestroyEnemyUnits5Keys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_DestroyedUnitsTableId;
  tableIds[2] = P_ResourceRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x44657374726f79456e656d79556e697473340000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  bytes32[] memory p_destroyedunits_units = new bytes32[](1);
  p_destroyedunits_units[0] = 0x5374696e67657244726f6e650000000000000000000000000000000000000000;
  uint256[] memory p_destroyedunits_amounts = new uint256[](1);
  p_destroyedunits_amounts[0] = 300;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_DestroyedUnits.encode(
    p_destroyedunits_units,
    p_destroyedunits_amounts
  );
  uint8[] memory p_resourcereward_resources = new uint8[](3);
  p_resourcereward_resources[0] = 2;
  p_resourcereward_resources[1] = 4;
  p_resourcereward_resources[2] = 7;
  uint256[] memory p_resourcereward_amounts = new uint256[](3);
  p_resourcereward_amounts[0] = 499999999999999991611392;
  p_resourcereward_amounts[1] = 3000000000000000000000;
  p_resourcereward_amounts[2] = 3000000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant ExpandBase1PrototypeId = "ExpandBase1";

function ExpandBase1Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = ExpandBase1PrototypeId;
  return _keyTuple;
}

function ExpandBase1LevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);

  _keyTuple[0] = ExpandBase1PrototypeId;
  _keyTuple[1] = bytes32(uint256(level));
  return _keyTuple;
}

function ExpandBase1Prototype(IStore store) {
  bytes32[] memory keys = ExpandBase1Keys();
  ResourceId[] memory tableIds = new ResourceId[](2);
  bytes[] memory staticData = new bytes[](2);
  PackedCounter[] memory encodedLengths = new PackedCounter[](2);
  bytes[] memory dynamicData = new bytes[](2);

  tableIds[0] = P_RequiredExpansionTableId;
  tableIds[1] = P_ResourceRewardTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredExpansion.encode(2);
  uint8[] memory p_resourcereward_resources = new uint8[](1);
  p_resourcereward_resources[0] = 1;
  uint256[] memory p_resourcereward_amounts = new uint256[](1);
  p_resourcereward_amounts[0] = 2000000000000000000000;
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
  createExpandBase1Level1(store);
}

/* ----------------------------- LEVEL 1 ----------------------------- */
function createExpandBase1Level1(IStore store) {
  bytes32[] memory levelKeys = ExpandBase1LevelKeys(1);
  ResourceId[] memory tableIds = new ResourceId[](1);
  bytes[] memory staticData = new bytes[](1);
  PackedCounter[] memory encodedLengths = new PackedCounter[](1);
  bytes[] memory dynamicData = new bytes[](1);

  tableIds[0] = P_RequiredBaseLevelTableId;

  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredBaseLevel.encode(2);

  createPrototype(store, levelKeys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant ExpandBase2PrototypeId = "ExpandBase2";

function ExpandBase2Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = ExpandBase2PrototypeId;
  return _keyTuple;
}

function ExpandBase2Prototype(IStore store) {
  bytes32[] memory keys = ExpandBase2Keys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_RequiredExpansionTableId;
  tableIds[2] = P_ResourceRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x457870616e644261736531000000000000000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredExpansion.encode(3);
  uint8[] memory p_resourcereward_resources = new uint8[](2);
  p_resourcereward_resources[0] = 1;
  p_resourcereward_resources[1] = 2;
  uint256[] memory p_resourcereward_amounts = new uint256[](2);
  p_resourcereward_amounts[0] = 5000000000000000000000;
  p_resourcereward_amounts[1] = 5000000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant ExpandBase3PrototypeId = "ExpandBase3";

function ExpandBase3Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = ExpandBase3PrototypeId;
  return _keyTuple;
}

function ExpandBase3Prototype(IStore store) {
  bytes32[] memory keys = ExpandBase3Keys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_RequiredExpansionTableId;
  tableIds[2] = P_ResourceRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x457870616e644261736532000000000000000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredExpansion.encode(4);
  uint8[] memory p_resourcereward_resources = new uint8[](2);
  p_resourcereward_resources[0] = 1;
  p_resourcereward_resources[1] = 2;
  uint256[] memory p_resourcereward_amounts = new uint256[](2);
  p_resourcereward_amounts[0] = 10000000000000000000000;
  p_resourcereward_amounts[1] = 10000000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant ExpandBase4PrototypeId = "ExpandBase4";

function ExpandBase4Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = ExpandBase4PrototypeId;
  return _keyTuple;
}

function ExpandBase4Prototype(IStore store) {
  bytes32[] memory keys = ExpandBase4Keys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_RequiredExpansionTableId;
  tableIds[2] = P_ResourceRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x457870616e644261736533000000000000000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredExpansion.encode(5);
  uint8[] memory p_resourcereward_resources = new uint8[](2);
  p_resourcereward_resources[0] = 1;
  p_resourcereward_resources[1] = 2;
  uint256[] memory p_resourcereward_amounts = new uint256[](2);
  p_resourcereward_amounts[0] = 20000000000000000000000;
  p_resourcereward_amounts[1] = 20000000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant ExpandBase5PrototypeId = "ExpandBase5";

function ExpandBase5Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = ExpandBase5PrototypeId;
  return _keyTuple;
}

function ExpandBase5Prototype(IStore store) {
  bytes32[] memory keys = ExpandBase5Keys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_RequiredExpansionTableId;
  tableIds[2] = P_ResourceRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x457870616e644261736534000000000000000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredExpansion.encode(6);
  uint8[] memory p_resourcereward_resources = new uint8[](2);
  p_resourcereward_resources[0] = 1;
  p_resourcereward_resources[1] = 2;
  uint256[] memory p_resourcereward_amounts = new uint256[](2);
  p_resourcereward_amounts[0] = 40000000000000000000000;
  p_resourcereward_amounts[1] = 40000000000000000000000;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}

bytes32 constant ExpandBase6PrototypeId = "ExpandBase6";

function ExpandBase6Keys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = ExpandBase6PrototypeId;
  return _keyTuple;
}

function ExpandBase6Prototype(IStore store) {
  bytes32[] memory keys = ExpandBase6Keys();
  ResourceId[] memory tableIds = new ResourceId[](3);
  bytes[] memory staticData = new bytes[](3);
  PackedCounter[] memory encodedLengths = new PackedCounter[](3);
  bytes[] memory dynamicData = new bytes[](3);

  tableIds[0] = P_RequiredObjectivesTableId;
  tableIds[1] = P_RequiredExpansionTableId;
  tableIds[2] = P_ResourceRewardTableId;

  bytes32[] memory p_requiredobjectives_objectives = new bytes32[](1);
  p_requiredobjectives_objectives[0] = 0x457870616e644261736535000000000000000000000000000000000000000000;
  (staticData[0], encodedLengths[0], dynamicData[0]) = P_RequiredObjectives.encode(p_requiredobjectives_objectives);
  (staticData[1], encodedLengths[1], dynamicData[1]) = P_RequiredExpansion.encode(7);
  uint8[] memory p_resourcereward_resources = new uint8[](2);
  p_resourcereward_resources[0] = 1;
  p_resourcereward_resources[1] = 2;
  uint256[] memory p_resourcereward_amounts = new uint256[](2);
  p_resourcereward_amounts[0] = 99999999999999991611392;
  p_resourcereward_amounts[1] = 99999999999999991611392;
  (staticData[2], encodedLengths[2], dynamicData[2]) = P_ResourceReward.encode(
    p_resourcereward_resources,
    p_resourcereward_amounts
  );

  createPrototype(store, keys, tableIds, staticData, encodedLengths, dynamicData);
}
