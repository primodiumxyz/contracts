// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct P_ConquestConfigData {
  uint256 holdTime;
  uint256 shardAsteroidSpawnOffset;
  uint256 shardAsteroidSpawnFrequency;
  uint256 maxShardAsteroids;
  uint256 shardAsteroidPoints;
  uint256 shardAsteroidLifeSpan;
  uint256 shardAsteroidEncryption;
  uint256 shardAsteroidEncryptionRegen;
}

library P_ConquestConfig {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "Pri_11", name: "P_ConquestConfig", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x74625072695f31310000000000000000505f436f6e7175657374436f6e666967);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0100080020202020202020200000000000000000000000000000000000000000);

  // Hex-encoded key schema of ()
  Schema constant _keySchema = Schema.wrap(0x0000000000000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256)
  Schema constant _valueSchema = Schema.wrap(0x010008001f1f1f1f1f1f1f1f0000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](0);
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](8);
    fieldNames[0] = "holdTime";
    fieldNames[1] = "shardAsteroidSpawnOffset";
    fieldNames[2] = "shardAsteroidSpawnFrequency";
    fieldNames[3] = "maxShardAsteroids";
    fieldNames[4] = "shardAsteroidPoints";
    fieldNames[5] = "shardAsteroidLifeSpan";
    fieldNames[6] = "shardAsteroidEncryption";
    fieldNames[7] = "shardAsteroidEncryptionRegen";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get holdTime.
   */
  function getHoldTime() internal view returns (uint256 holdTime) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get holdTime.
   */
  function _getHoldTime() internal view returns (uint256 holdTime) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set holdTime.
   */
  function setHoldTime(uint256 holdTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((holdTime)), _fieldLayout);
  }

  /**
   * @notice Set holdTime.
   */
  function _setHoldTime(uint256 holdTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((holdTime)), _fieldLayout);
  }

  /**
   * @notice Get shardAsteroidSpawnOffset.
   */
  function getShardAsteroidSpawnOffset() internal view returns (uint256 shardAsteroidSpawnOffset) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get shardAsteroidSpawnOffset.
   */
  function _getShardAsteroidSpawnOffset() internal view returns (uint256 shardAsteroidSpawnOffset) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set shardAsteroidSpawnOffset.
   */
  function setShardAsteroidSpawnOffset(uint256 shardAsteroidSpawnOffset) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((shardAsteroidSpawnOffset)), _fieldLayout);
  }

  /**
   * @notice Set shardAsteroidSpawnOffset.
   */
  function _setShardAsteroidSpawnOffset(uint256 shardAsteroidSpawnOffset) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((shardAsteroidSpawnOffset)), _fieldLayout);
  }

  /**
   * @notice Get shardAsteroidSpawnFrequency.
   */
  function getShardAsteroidSpawnFrequency() internal view returns (uint256 shardAsteroidSpawnFrequency) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get shardAsteroidSpawnFrequency.
   */
  function _getShardAsteroidSpawnFrequency() internal view returns (uint256 shardAsteroidSpawnFrequency) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set shardAsteroidSpawnFrequency.
   */
  function setShardAsteroidSpawnFrequency(uint256 shardAsteroidSpawnFrequency) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((shardAsteroidSpawnFrequency)), _fieldLayout);
  }

  /**
   * @notice Set shardAsteroidSpawnFrequency.
   */
  function _setShardAsteroidSpawnFrequency(uint256 shardAsteroidSpawnFrequency) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((shardAsteroidSpawnFrequency)), _fieldLayout);
  }

  /**
   * @notice Get maxShardAsteroids.
   */
  function getMaxShardAsteroids() internal view returns (uint256 maxShardAsteroids) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get maxShardAsteroids.
   */
  function _getMaxShardAsteroids() internal view returns (uint256 maxShardAsteroids) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set maxShardAsteroids.
   */
  function setMaxShardAsteroids(uint256 maxShardAsteroids) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((maxShardAsteroids)), _fieldLayout);
  }

  /**
   * @notice Set maxShardAsteroids.
   */
  function _setMaxShardAsteroids(uint256 maxShardAsteroids) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((maxShardAsteroids)), _fieldLayout);
  }

  /**
   * @notice Get shardAsteroidPoints.
   */
  function getShardAsteroidPoints() internal view returns (uint256 shardAsteroidPoints) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get shardAsteroidPoints.
   */
  function _getShardAsteroidPoints() internal view returns (uint256 shardAsteroidPoints) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set shardAsteroidPoints.
   */
  function setShardAsteroidPoints(uint256 shardAsteroidPoints) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((shardAsteroidPoints)), _fieldLayout);
  }

  /**
   * @notice Set shardAsteroidPoints.
   */
  function _setShardAsteroidPoints(uint256 shardAsteroidPoints) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((shardAsteroidPoints)), _fieldLayout);
  }

  /**
   * @notice Get shardAsteroidLifeSpan.
   */
  function getShardAsteroidLifeSpan() internal view returns (uint256 shardAsteroidLifeSpan) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get shardAsteroidLifeSpan.
   */
  function _getShardAsteroidLifeSpan() internal view returns (uint256 shardAsteroidLifeSpan) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set shardAsteroidLifeSpan.
   */
  function setShardAsteroidLifeSpan(uint256 shardAsteroidLifeSpan) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((shardAsteroidLifeSpan)), _fieldLayout);
  }

  /**
   * @notice Set shardAsteroidLifeSpan.
   */
  function _setShardAsteroidLifeSpan(uint256 shardAsteroidLifeSpan) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((shardAsteroidLifeSpan)), _fieldLayout);
  }

  /**
   * @notice Get shardAsteroidEncryption.
   */
  function getShardAsteroidEncryption() internal view returns (uint256 shardAsteroidEncryption) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get shardAsteroidEncryption.
   */
  function _getShardAsteroidEncryption() internal view returns (uint256 shardAsteroidEncryption) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set shardAsteroidEncryption.
   */
  function setShardAsteroidEncryption(uint256 shardAsteroidEncryption) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((shardAsteroidEncryption)), _fieldLayout);
  }

  /**
   * @notice Set shardAsteroidEncryption.
   */
  function _setShardAsteroidEncryption(uint256 shardAsteroidEncryption) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((shardAsteroidEncryption)), _fieldLayout);
  }

  /**
   * @notice Get shardAsteroidEncryptionRegen.
   */
  function getShardAsteroidEncryptionRegen() internal view returns (uint256 shardAsteroidEncryptionRegen) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get shardAsteroidEncryptionRegen.
   */
  function _getShardAsteroidEncryptionRegen() internal view returns (uint256 shardAsteroidEncryptionRegen) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set shardAsteroidEncryptionRegen.
   */
  function setShardAsteroidEncryptionRegen(uint256 shardAsteroidEncryptionRegen) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((shardAsteroidEncryptionRegen)), _fieldLayout);
  }

  /**
   * @notice Set shardAsteroidEncryptionRegen.
   */
  function _setShardAsteroidEncryptionRegen(uint256 shardAsteroidEncryptionRegen) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((shardAsteroidEncryptionRegen)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get() internal view returns (P_ConquestConfigData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get() internal view returns (P_ConquestConfigData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    uint256 holdTime,
    uint256 shardAsteroidSpawnOffset,
    uint256 shardAsteroidSpawnFrequency,
    uint256 maxShardAsteroids,
    uint256 shardAsteroidPoints,
    uint256 shardAsteroidLifeSpan,
    uint256 shardAsteroidEncryption,
    uint256 shardAsteroidEncryptionRegen
  ) internal {
    bytes memory _staticData = encodeStatic(
      holdTime,
      shardAsteroidSpawnOffset,
      shardAsteroidSpawnFrequency,
      maxShardAsteroids,
      shardAsteroidPoints,
      shardAsteroidLifeSpan,
      shardAsteroidEncryption,
      shardAsteroidEncryptionRegen
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    uint256 holdTime,
    uint256 shardAsteroidSpawnOffset,
    uint256 shardAsteroidSpawnFrequency,
    uint256 maxShardAsteroids,
    uint256 shardAsteroidPoints,
    uint256 shardAsteroidLifeSpan,
    uint256 shardAsteroidEncryption,
    uint256 shardAsteroidEncryptionRegen
  ) internal {
    bytes memory _staticData = encodeStatic(
      holdTime,
      shardAsteroidSpawnOffset,
      shardAsteroidSpawnFrequency,
      maxShardAsteroids,
      shardAsteroidPoints,
      shardAsteroidLifeSpan,
      shardAsteroidEncryption,
      shardAsteroidEncryptionRegen
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(P_ConquestConfigData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.holdTime,
      _table.shardAsteroidSpawnOffset,
      _table.shardAsteroidSpawnFrequency,
      _table.maxShardAsteroids,
      _table.shardAsteroidPoints,
      _table.shardAsteroidLifeSpan,
      _table.shardAsteroidEncryption,
      _table.shardAsteroidEncryptionRegen
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(P_ConquestConfigData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.holdTime,
      _table.shardAsteroidSpawnOffset,
      _table.shardAsteroidSpawnFrequency,
      _table.maxShardAsteroids,
      _table.shardAsteroidPoints,
      _table.shardAsteroidLifeSpan,
      _table.shardAsteroidEncryption,
      _table.shardAsteroidEncryptionRegen
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      uint256 holdTime,
      uint256 shardAsteroidSpawnOffset,
      uint256 shardAsteroidSpawnFrequency,
      uint256 maxShardAsteroids,
      uint256 shardAsteroidPoints,
      uint256 shardAsteroidLifeSpan,
      uint256 shardAsteroidEncryption,
      uint256 shardAsteroidEncryptionRegen
    )
  {
    holdTime = (uint256(Bytes.getBytes32(_blob, 0)));

    shardAsteroidSpawnOffset = (uint256(Bytes.getBytes32(_blob, 32)));

    shardAsteroidSpawnFrequency = (uint256(Bytes.getBytes32(_blob, 64)));

    maxShardAsteroids = (uint256(Bytes.getBytes32(_blob, 96)));

    shardAsteroidPoints = (uint256(Bytes.getBytes32(_blob, 128)));

    shardAsteroidLifeSpan = (uint256(Bytes.getBytes32(_blob, 160)));

    shardAsteroidEncryption = (uint256(Bytes.getBytes32(_blob, 192)));

    shardAsteroidEncryptionRegen = (uint256(Bytes.getBytes32(_blob, 224)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (P_ConquestConfigData memory _table) {
    (
      _table.holdTime,
      _table.shardAsteroidSpawnOffset,
      _table.shardAsteroidSpawnFrequency,
      _table.maxShardAsteroids,
      _table.shardAsteroidPoints,
      _table.shardAsteroidLifeSpan,
      _table.shardAsteroidEncryption,
      _table.shardAsteroidEncryptionRegen
    ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint256 holdTime,
    uint256 shardAsteroidSpawnOffset,
    uint256 shardAsteroidSpawnFrequency,
    uint256 maxShardAsteroids,
    uint256 shardAsteroidPoints,
    uint256 shardAsteroidLifeSpan,
    uint256 shardAsteroidEncryption,
    uint256 shardAsteroidEncryptionRegen
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(
        holdTime,
        shardAsteroidSpawnOffset,
        shardAsteroidSpawnFrequency,
        maxShardAsteroids,
        shardAsteroidPoints,
        shardAsteroidLifeSpan,
        shardAsteroidEncryption,
        shardAsteroidEncryptionRegen
      );
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256 holdTime,
    uint256 shardAsteroidSpawnOffset,
    uint256 shardAsteroidSpawnFrequency,
    uint256 maxShardAsteroids,
    uint256 shardAsteroidPoints,
    uint256 shardAsteroidLifeSpan,
    uint256 shardAsteroidEncryption,
    uint256 shardAsteroidEncryptionRegen
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(
      holdTime,
      shardAsteroidSpawnOffset,
      shardAsteroidSpawnFrequency,
      maxShardAsteroids,
      shardAsteroidPoints,
      shardAsteroidLifeSpan,
      shardAsteroidEncryption,
      shardAsteroidEncryptionRegen
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple() internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    return _keyTuple;
  }
}
