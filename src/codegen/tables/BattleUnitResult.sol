// SPDX-License-Identifier: MIT
pragma solidity >=0.8.21;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout, FieldLayoutLib } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { RESOURCE_TABLE, RESOURCE_OFFCHAIN_TABLE } from "@latticexyz/store/src/storeResourceTypes.sol";

ResourceId constant _tableId = ResourceId.wrap(
  bytes32(abi.encodePacked(RESOURCE_OFFCHAIN_TABLE, bytes14(""), bytes16("BattleUnitResult")))
);
ResourceId constant BattleUnitResultTableId = _tableId;

FieldLayout constant _fieldLayout = FieldLayout.wrap(
  0x0000000300000000000000000000000000000000000000000000000000000000
);

struct BattleUnitResultData {
  uint256[] unitLevels;
  uint256[] unitsAtStart;
  uint256[] casualties;
}

library BattleUnitResult {
  /**
   * @notice Get the table values' field layout.
   * @return _fieldLayout The field layout for the table.
   */
  function getFieldLayout() internal pure returns (FieldLayout) {
    return _fieldLayout;
  }

  /**
   * @notice Get the table's key schema.
   * @return _keySchema The key schema for the table.
   */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _keySchema = new SchemaType[](2);
    _keySchema[0] = SchemaType.BYTES32;
    _keySchema[1] = SchemaType.BYTES32;

    return SchemaLib.encode(_keySchema);
  }

  /**
   * @notice Get the table's value schema.
   * @return _valueSchema The value schema for the table.
   */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _valueSchema = new SchemaType[](3);
    _valueSchema[0] = SchemaType.UINT256_ARRAY;
    _valueSchema[1] = SchemaType.UINT256_ARRAY;
    _valueSchema[2] = SchemaType.UINT256_ARRAY;

    return SchemaLib.encode(_valueSchema);
  }

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](2);
    keyNames[0] = "battleId";
    keyNames[1] = "participantEntity";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](3);
    fieldNames[0] = "unitLevels";
    fieldNames[1] = "unitsAtStart";
    fieldNames[2] = "casualties";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 battleId,
    bytes32 participantEntity,
    uint256[] memory unitLevels,
    uint256[] memory unitsAtStart,
    uint256[] memory casualties
  ) internal {
    bytes memory _staticData;
    PackedCounter _encodedLengths = encodeLengths(unitLevels, unitsAtStart, casualties);
    bytes memory _dynamicData = encodeDynamic(unitLevels, unitsAtStart, casualties);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = battleId;
    _keyTuple[1] = participantEntity;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 battleId,
    bytes32 participantEntity,
    uint256[] memory unitLevels,
    uint256[] memory unitsAtStart,
    uint256[] memory casualties
  ) internal {
    bytes memory _staticData;
    PackedCounter _encodedLengths = encodeLengths(unitLevels, unitsAtStart, casualties);
    bytes memory _dynamicData = encodeDynamic(unitLevels, unitsAtStart, casualties);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = battleId;
    _keyTuple[1] = participantEntity;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 battleId, bytes32 participantEntity, BattleUnitResultData memory _table) internal {
    bytes memory _staticData;
    PackedCounter _encodedLengths = encodeLengths(_table.unitLevels, _table.unitsAtStart, _table.casualties);
    bytes memory _dynamicData = encodeDynamic(_table.unitLevels, _table.unitsAtStart, _table.casualties);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = battleId;
    _keyTuple[1] = participantEntity;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 battleId, bytes32 participantEntity, BattleUnitResultData memory _table) internal {
    bytes memory _staticData;
    PackedCounter _encodedLengths = encodeLengths(_table.unitLevels, _table.unitsAtStart, _table.casualties);
    bytes memory _dynamicData = encodeDynamic(_table.unitLevels, _table.unitsAtStart, _table.casualties);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = battleId;
    _keyTuple[1] = participantEntity;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    PackedCounter _encodedLengths,
    bytes memory _blob
  ) internal pure returns (uint256[] memory unitLevels, uint256[] memory unitsAtStart, uint256[] memory casualties) {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    unitLevels = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint256());

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(1);
    }
    unitsAtStart = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint256());

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(2);
    }
    casualties = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint256());
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   *
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory,
    PackedCounter _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (BattleUnitResultData memory _table) {
    (_table.unitLevels, _table.unitsAtStart, _table.casualties) = decodeDynamic(_encodedLengths, _dynamicData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 battleId, bytes32 participantEntity) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = battleId;
    _keyTuple[1] = participantEntity;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 battleId, bytes32 participantEntity) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = battleId;
    _keyTuple[1] = participantEntity;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(
    uint256[] memory unitLevels,
    uint256[] memory unitsAtStart,
    uint256[] memory casualties
  ) internal pure returns (PackedCounter _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = PackedCounterLib.pack(unitLevels.length * 32, unitsAtStart.length * 32, casualties.length * 32);
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(
    uint256[] memory unitLevels,
    uint256[] memory unitsAtStart,
    uint256[] memory casualties
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(
        EncodeArray.encode((unitLevels)),
        EncodeArray.encode((unitsAtStart)),
        EncodeArray.encode((casualties))
      );
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dyanmic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256[] memory unitLevels,
    uint256[] memory unitsAtStart,
    uint256[] memory casualties
  ) internal pure returns (bytes memory, PackedCounter, bytes memory) {
    bytes memory _staticData;
    PackedCounter _encodedLengths = encodeLengths(unitLevels, unitsAtStart, casualties);
    bytes memory _dynamicData = encodeDynamic(unitLevels, unitsAtStart, casualties);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 battleId, bytes32 participantEntity) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = battleId;
    _keyTuple[1] = participantEntity;

    return _keyTuple;
  }
}
