// SPDX-License-Identifier: MIT
pragma solidity >=0.8.21;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout, FieldLayoutLib } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { RESOURCE_TABLE, RESOURCE_OFFCHAIN_TABLE } from "@latticexyz/store/src/storeResourceTypes.sol";

ResourceId constant _tableId = ResourceId.wrap(
  bytes32(abi.encodePacked(RESOURCE_TABLE, bytes14(""), bytes16("PirateAsteroid")))
);
ResourceId constant PirateAsteroidTableId = _tableId;

FieldLayout constant _fieldLayout = FieldLayout.wrap(
  0x0042040001012020000000000000000000000000000000000000000000000000
);

struct PirateAsteroidData {
  bool isPirateAsteroid;
  bool isDefeated;
  bytes32 playerEntity;
  bytes32 prototype;
}

library PirateAsteroid {
  /**
   * @notice Get the table values' field layout.
   * @return _fieldLayout The field layout for the table.
   */
  function getFieldLayout() internal pure returns (FieldLayout) {
    return _fieldLayout;
  }

  /**
   * @notice Get the table's key schema.
   * @return _keySchema The key schema for the table.
   */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _keySchema = new SchemaType[](1);
    _keySchema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_keySchema);
  }

  /**
   * @notice Get the table's value schema.
   * @return _valueSchema The value schema for the table.
   */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _valueSchema = new SchemaType[](4);
    _valueSchema[0] = SchemaType.BOOL;
    _valueSchema[1] = SchemaType.BOOL;
    _valueSchema[2] = SchemaType.BYTES32;
    _valueSchema[3] = SchemaType.BYTES32;

    return SchemaLib.encode(_valueSchema);
  }

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "entity";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](4);
    fieldNames[0] = "isPirateAsteroid";
    fieldNames[1] = "isDefeated";
    fieldNames[2] = "playerEntity";
    fieldNames[3] = "prototype";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get isPirateAsteroid.
   */
  function getIsPirateAsteroid(bytes32 entity) internal view returns (bool isPirateAsteroid) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get isPirateAsteroid.
   */
  function _getIsPirateAsteroid(bytes32 entity) internal view returns (bool isPirateAsteroid) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set isPirateAsteroid.
   */
  function setIsPirateAsteroid(bytes32 entity, bool isPirateAsteroid) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((isPirateAsteroid)), _fieldLayout);
  }

  /**
   * @notice Set isPirateAsteroid.
   */
  function _setIsPirateAsteroid(bytes32 entity, bool isPirateAsteroid) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((isPirateAsteroid)), _fieldLayout);
  }

  /**
   * @notice Get isDefeated.
   */
  function getIsDefeated(bytes32 entity) internal view returns (bool isDefeated) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get isDefeated.
   */
  function _getIsDefeated(bytes32 entity) internal view returns (bool isDefeated) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set isDefeated.
   */
  function setIsDefeated(bytes32 entity, bool isDefeated) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((isDefeated)), _fieldLayout);
  }

  /**
   * @notice Set isDefeated.
   */
  function _setIsDefeated(bytes32 entity, bool isDefeated) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((isDefeated)), _fieldLayout);
  }

  /**
   * @notice Get playerEntity.
   */
  function getPlayerEntity(bytes32 entity) internal view returns (bytes32 playerEntity) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Get playerEntity.
   */
  function _getPlayerEntity(bytes32 entity) internal view returns (bytes32 playerEntity) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Set playerEntity.
   */
  function setPlayerEntity(bytes32 entity, bytes32 playerEntity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((playerEntity)), _fieldLayout);
  }

  /**
   * @notice Set playerEntity.
   */
  function _setPlayerEntity(bytes32 entity, bytes32 playerEntity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((playerEntity)), _fieldLayout);
  }

  /**
   * @notice Get prototype.
   */
  function getPrototype(bytes32 entity) internal view returns (bytes32 prototype) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Get prototype.
   */
  function _getPrototype(bytes32 entity) internal view returns (bytes32 prototype) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Set prototype.
   */
  function setPrototype(bytes32 entity, bytes32 prototype) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((prototype)), _fieldLayout);
  }

  /**
   * @notice Set prototype.
   */
  function _setPrototype(bytes32 entity, bytes32 prototype) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((prototype)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 entity) internal view returns (PirateAsteroidData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 entity) internal view returns (PirateAsteroidData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 entity,
    bool isPirateAsteroid,
    bool isDefeated,
    bytes32 playerEntity,
    bytes32 prototype
  ) internal {
    bytes memory _staticData = encodeStatic(isPirateAsteroid, isDefeated, playerEntity, prototype);

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 entity,
    bool isPirateAsteroid,
    bool isDefeated,
    bytes32 playerEntity,
    bytes32 prototype
  ) internal {
    bytes memory _staticData = encodeStatic(isPirateAsteroid, isDefeated, playerEntity, prototype);

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 entity, PirateAsteroidData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.isPirateAsteroid,
      _table.isDefeated,
      _table.playerEntity,
      _table.prototype
    );

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 entity, PirateAsteroidData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.isPirateAsteroid,
      _table.isDefeated,
      _table.playerEntity,
      _table.prototype
    );

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  ) internal pure returns (bool isPirateAsteroid, bool isDefeated, bytes32 playerEntity, bytes32 prototype) {
    isPirateAsteroid = (_toBool(uint8(Bytes.slice1(_blob, 0))));

    isDefeated = (_toBool(uint8(Bytes.slice1(_blob, 1))));

    playerEntity = (Bytes.slice32(_blob, 2));

    prototype = (Bytes.slice32(_blob, 34));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    PackedCounter,
    bytes memory
  ) internal pure returns (PirateAsteroidData memory _table) {
    (_table.isPirateAsteroid, _table.isDefeated, _table.playerEntity, _table.prototype) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 entity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 entity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    bool isPirateAsteroid,
    bool isDefeated,
    bytes32 playerEntity,
    bytes32 prototype
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(isPirateAsteroid, isDefeated, playerEntity, prototype);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dyanmic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    bool isPirateAsteroid,
    bool isDefeated,
    bytes32 playerEntity,
    bytes32 prototype
  ) internal pure returns (bytes memory, PackedCounter, bytes memory) {
    bytes memory _staticData = encodeStatic(isPirateAsteroid, isDefeated, playerEntity, prototype);

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 entity) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    return _keyTuple;
  }
}

/**
 * @notice Cast a value to a bool.
 * @dev Boolean values are encoded as uint8 (1 = true, 0 = false), but Solidity doesn't allow casting between uint8 and bool.
 * @param value The uint8 value to convert.
 * @return result The boolean value.
 */
function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
