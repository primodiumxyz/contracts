// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct P_UnitData {
  uint256 attack;
  uint256 defense;
  uint256 speed;
  uint256 cargo;
  uint256 trainingTime;
  uint256 hp;
}

library P_Unit {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "Primodium", name: "P_Unit", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x74625072696d6f6469756d0000000000505f556e697400000000000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x00c0060020202020202000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32, uint256)
  Schema constant _keySchema = Schema.wrap(0x004002005f1f0000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint256, uint256, uint256, uint256, uint256, uint256)
  Schema constant _valueSchema = Schema.wrap(0x00c006001f1f1f1f1f1f00000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](2);
    keyNames[0] = "entity";
    keyNames[1] = "level";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](6);
    fieldNames[0] = "attack";
    fieldNames[1] = "defense";
    fieldNames[2] = "speed";
    fieldNames[3] = "cargo";
    fieldNames[4] = "trainingTime";
    fieldNames[5] = "hp";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get attack.
   */
  function getAttack(bytes32 entity, uint256 level) internal view returns (uint256 attack) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(level));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get attack.
   */
  function _getAttack(bytes32 entity, uint256 level) internal view returns (uint256 attack) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(level));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set attack.
   */
  function setAttack(bytes32 entity, uint256 level, uint256 attack) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(level));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((attack)), _fieldLayout);
  }

  /**
   * @notice Set attack.
   */
  function _setAttack(bytes32 entity, uint256 level, uint256 attack) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(level));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((attack)), _fieldLayout);
  }

  /**
   * @notice Get defense.
   */
  function getDefense(bytes32 entity, uint256 level) internal view returns (uint256 defense) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(level));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get defense.
   */
  function _getDefense(bytes32 entity, uint256 level) internal view returns (uint256 defense) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(level));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set defense.
   */
  function setDefense(bytes32 entity, uint256 level, uint256 defense) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(level));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((defense)), _fieldLayout);
  }

  /**
   * @notice Set defense.
   */
  function _setDefense(bytes32 entity, uint256 level, uint256 defense) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(level));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((defense)), _fieldLayout);
  }

  /**
   * @notice Get speed.
   */
  function getSpeed(bytes32 entity, uint256 level) internal view returns (uint256 speed) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(level));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get speed.
   */
  function _getSpeed(bytes32 entity, uint256 level) internal view returns (uint256 speed) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(level));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set speed.
   */
  function setSpeed(bytes32 entity, uint256 level, uint256 speed) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(level));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((speed)), _fieldLayout);
  }

  /**
   * @notice Set speed.
   */
  function _setSpeed(bytes32 entity, uint256 level, uint256 speed) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(level));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((speed)), _fieldLayout);
  }

  /**
   * @notice Get cargo.
   */
  function getCargo(bytes32 entity, uint256 level) internal view returns (uint256 cargo) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(level));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get cargo.
   */
  function _getCargo(bytes32 entity, uint256 level) internal view returns (uint256 cargo) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(level));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set cargo.
   */
  function setCargo(bytes32 entity, uint256 level, uint256 cargo) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(level));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((cargo)), _fieldLayout);
  }

  /**
   * @notice Set cargo.
   */
  function _setCargo(bytes32 entity, uint256 level, uint256 cargo) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(level));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((cargo)), _fieldLayout);
  }

  /**
   * @notice Get trainingTime.
   */
  function getTrainingTime(bytes32 entity, uint256 level) internal view returns (uint256 trainingTime) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(level));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get trainingTime.
   */
  function _getTrainingTime(bytes32 entity, uint256 level) internal view returns (uint256 trainingTime) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(level));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set trainingTime.
   */
  function setTrainingTime(bytes32 entity, uint256 level, uint256 trainingTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(level));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((trainingTime)), _fieldLayout);
  }

  /**
   * @notice Set trainingTime.
   */
  function _setTrainingTime(bytes32 entity, uint256 level, uint256 trainingTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(level));

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((trainingTime)), _fieldLayout);
  }

  /**
   * @notice Get hp.
   */
  function getHp(bytes32 entity, uint256 level) internal view returns (uint256 hp) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(level));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get hp.
   */
  function _getHp(bytes32 entity, uint256 level) internal view returns (uint256 hp) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(level));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set hp.
   */
  function setHp(bytes32 entity, uint256 level, uint256 hp) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(level));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((hp)), _fieldLayout);
  }

  /**
   * @notice Set hp.
   */
  function _setHp(bytes32 entity, uint256 level, uint256 hp) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(level));

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((hp)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 entity, uint256 level) internal view returns (P_UnitData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(level));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 entity, uint256 level) internal view returns (P_UnitData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(level));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 entity,
    uint256 level,
    uint256 attack,
    uint256 defense,
    uint256 speed,
    uint256 cargo,
    uint256 trainingTime,
    uint256 hp
  ) internal {
    bytes memory _staticData = encodeStatic(attack, defense, speed, cargo, trainingTime, hp);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(level));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 entity,
    uint256 level,
    uint256 attack,
    uint256 defense,
    uint256 speed,
    uint256 cargo,
    uint256 trainingTime,
    uint256 hp
  ) internal {
    bytes memory _staticData = encodeStatic(attack, defense, speed, cargo, trainingTime, hp);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(level));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 entity, uint256 level, P_UnitData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.attack,
      _table.defense,
      _table.speed,
      _table.cargo,
      _table.trainingTime,
      _table.hp
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(level));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 entity, uint256 level, P_UnitData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.attack,
      _table.defense,
      _table.speed,
      _table.cargo,
      _table.trainingTime,
      _table.hp
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(level));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (uint256 attack, uint256 defense, uint256 speed, uint256 cargo, uint256 trainingTime, uint256 hp)
  {
    attack = (uint256(Bytes.getBytes32(_blob, 0)));

    defense = (uint256(Bytes.getBytes32(_blob, 32)));

    speed = (uint256(Bytes.getBytes32(_blob, 64)));

    cargo = (uint256(Bytes.getBytes32(_blob, 96)));

    trainingTime = (uint256(Bytes.getBytes32(_blob, 128)));

    hp = (uint256(Bytes.getBytes32(_blob, 160)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (P_UnitData memory _table) {
    (_table.attack, _table.defense, _table.speed, _table.cargo, _table.trainingTime, _table.hp) = decodeStatic(
      _staticData
    );
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 entity, uint256 level) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(level));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 entity, uint256 level) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(level));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint256 attack,
    uint256 defense,
    uint256 speed,
    uint256 cargo,
    uint256 trainingTime,
    uint256 hp
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(attack, defense, speed, cargo, trainingTime, hp);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256 attack,
    uint256 defense,
    uint256 speed,
    uint256 cargo,
    uint256 trainingTime,
    uint256 hp
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(attack, defense, speed, cargo, trainingTime, hp);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 entity, uint256 level) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(level));

    return _keyTuple;
  }
}
