// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct P_RequiredDependencyData {
  uint8 resource;
  uint256 amount;
}

library P_RequiredDependency {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "Pri_11", name: "P_RequiredDepend", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x74625072695f31310000000000000000505f5265717569726564446570656e64);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0021020001200000000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32, uint256)
  Schema constant _keySchema = Schema.wrap(0x004002005f1f0000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint8, uint256)
  Schema constant _valueSchema = Schema.wrap(0x00210200001f0000000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](2);
    keyNames[0] = "prototype";
    keyNames[1] = "level";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](2);
    fieldNames[0] = "resource";
    fieldNames[1] = "amount";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get resource.
   */
  function getResource(bytes32 prototype, uint256 level) internal view returns (uint8 resource) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = prototype;
    _keyTuple[1] = bytes32(uint256(level));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get resource.
   */
  function _getResource(bytes32 prototype, uint256 level) internal view returns (uint8 resource) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = prototype;
    _keyTuple[1] = bytes32(uint256(level));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set resource.
   */
  function setResource(bytes32 prototype, uint256 level, uint8 resource) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = prototype;
    _keyTuple[1] = bytes32(uint256(level));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((resource)), _fieldLayout);
  }

  /**
   * @notice Set resource.
   */
  function _setResource(bytes32 prototype, uint256 level, uint8 resource) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = prototype;
    _keyTuple[1] = bytes32(uint256(level));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((resource)), _fieldLayout);
  }

  /**
   * @notice Get amount.
   */
  function getAmount(bytes32 prototype, uint256 level) internal view returns (uint256 amount) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = prototype;
    _keyTuple[1] = bytes32(uint256(level));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get amount.
   */
  function _getAmount(bytes32 prototype, uint256 level) internal view returns (uint256 amount) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = prototype;
    _keyTuple[1] = bytes32(uint256(level));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set amount.
   */
  function setAmount(bytes32 prototype, uint256 level, uint256 amount) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = prototype;
    _keyTuple[1] = bytes32(uint256(level));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((amount)), _fieldLayout);
  }

  /**
   * @notice Set amount.
   */
  function _setAmount(bytes32 prototype, uint256 level, uint256 amount) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = prototype;
    _keyTuple[1] = bytes32(uint256(level));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((amount)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 prototype, uint256 level) internal view returns (P_RequiredDependencyData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = prototype;
    _keyTuple[1] = bytes32(uint256(level));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 prototype, uint256 level) internal view returns (P_RequiredDependencyData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = prototype;
    _keyTuple[1] = bytes32(uint256(level));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(bytes32 prototype, uint256 level, uint8 resource, uint256 amount) internal {
    bytes memory _staticData = encodeStatic(resource, amount);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = prototype;
    _keyTuple[1] = bytes32(uint256(level));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(bytes32 prototype, uint256 level, uint8 resource, uint256 amount) internal {
    bytes memory _staticData = encodeStatic(resource, amount);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = prototype;
    _keyTuple[1] = bytes32(uint256(level));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 prototype, uint256 level, P_RequiredDependencyData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.resource, _table.amount);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = prototype;
    _keyTuple[1] = bytes32(uint256(level));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 prototype, uint256 level, P_RequiredDependencyData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.resource, _table.amount);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = prototype;
    _keyTuple[1] = bytes32(uint256(level));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(bytes memory _blob) internal pure returns (uint8 resource, uint256 amount) {
    resource = (uint8(Bytes.getBytes1(_blob, 0)));

    amount = (uint256(Bytes.getBytes32(_blob, 1)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (P_RequiredDependencyData memory _table) {
    (_table.resource, _table.amount) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 prototype, uint256 level) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = prototype;
    _keyTuple[1] = bytes32(uint256(level));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 prototype, uint256 level) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = prototype;
    _keyTuple[1] = bytes32(uint256(level));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(uint8 resource, uint256 amount) internal pure returns (bytes memory) {
    return abi.encodePacked(resource, amount);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(uint8 resource, uint256 amount) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(resource, amount);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 prototype, uint256 level) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = prototype;
    _keyTuple[1] = bytes32(uint256(level));

    return _keyTuple;
  }
}
