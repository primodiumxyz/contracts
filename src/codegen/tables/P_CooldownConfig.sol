// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct P_CooldownConfigData {
  uint256 linNum;
  uint256 linDen;
  uint256 linSwitch;
  uint256 logDiv;
  uint256 logMult;
  uint256 logAdd;
}

library P_CooldownConfig {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "Pri_11", name: "P_CooldownConfig", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x74625072695f31310000000000000000505f436f6f6c646f776e436f6e666967);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x00c0060020202020202000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of ()
  Schema constant _keySchema = Schema.wrap(0x0000000000000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint256, uint256, uint256, uint256, uint256, uint256)
  Schema constant _valueSchema = Schema.wrap(0x00c006001f1f1f1f1f1f00000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](0);
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](6);
    fieldNames[0] = "linNum";
    fieldNames[1] = "linDen";
    fieldNames[2] = "linSwitch";
    fieldNames[3] = "logDiv";
    fieldNames[4] = "logMult";
    fieldNames[5] = "logAdd";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get linNum.
   */
  function getLinNum() internal view returns (uint256 linNum) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get linNum.
   */
  function _getLinNum() internal view returns (uint256 linNum) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set linNum.
   */
  function setLinNum(uint256 linNum) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((linNum)), _fieldLayout);
  }

  /**
   * @notice Set linNum.
   */
  function _setLinNum(uint256 linNum) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((linNum)), _fieldLayout);
  }

  /**
   * @notice Get linDen.
   */
  function getLinDen() internal view returns (uint256 linDen) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get linDen.
   */
  function _getLinDen() internal view returns (uint256 linDen) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set linDen.
   */
  function setLinDen(uint256 linDen) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((linDen)), _fieldLayout);
  }

  /**
   * @notice Set linDen.
   */
  function _setLinDen(uint256 linDen) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((linDen)), _fieldLayout);
  }

  /**
   * @notice Get linSwitch.
   */
  function getLinSwitch() internal view returns (uint256 linSwitch) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get linSwitch.
   */
  function _getLinSwitch() internal view returns (uint256 linSwitch) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set linSwitch.
   */
  function setLinSwitch(uint256 linSwitch) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((linSwitch)), _fieldLayout);
  }

  /**
   * @notice Set linSwitch.
   */
  function _setLinSwitch(uint256 linSwitch) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((linSwitch)), _fieldLayout);
  }

  /**
   * @notice Get logDiv.
   */
  function getLogDiv() internal view returns (uint256 logDiv) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get logDiv.
   */
  function _getLogDiv() internal view returns (uint256 logDiv) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set logDiv.
   */
  function setLogDiv(uint256 logDiv) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((logDiv)), _fieldLayout);
  }

  /**
   * @notice Set logDiv.
   */
  function _setLogDiv(uint256 logDiv) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((logDiv)), _fieldLayout);
  }

  /**
   * @notice Get logMult.
   */
  function getLogMult() internal view returns (uint256 logMult) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get logMult.
   */
  function _getLogMult() internal view returns (uint256 logMult) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set logMult.
   */
  function setLogMult(uint256 logMult) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((logMult)), _fieldLayout);
  }

  /**
   * @notice Set logMult.
   */
  function _setLogMult(uint256 logMult) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((logMult)), _fieldLayout);
  }

  /**
   * @notice Get logAdd.
   */
  function getLogAdd() internal view returns (uint256 logAdd) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get logAdd.
   */
  function _getLogAdd() internal view returns (uint256 logAdd) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set logAdd.
   */
  function setLogAdd(uint256 logAdd) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((logAdd)), _fieldLayout);
  }

  /**
   * @notice Set logAdd.
   */
  function _setLogAdd(uint256 logAdd) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((logAdd)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get() internal view returns (P_CooldownConfigData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get() internal view returns (P_CooldownConfigData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    uint256 linNum,
    uint256 linDen,
    uint256 linSwitch,
    uint256 logDiv,
    uint256 logMult,
    uint256 logAdd
  ) internal {
    bytes memory _staticData = encodeStatic(linNum, linDen, linSwitch, logDiv, logMult, logAdd);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    uint256 linNum,
    uint256 linDen,
    uint256 linSwitch,
    uint256 logDiv,
    uint256 logMult,
    uint256 logAdd
  ) internal {
    bytes memory _staticData = encodeStatic(linNum, linDen, linSwitch, logDiv, logMult, logAdd);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(P_CooldownConfigData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.linNum,
      _table.linDen,
      _table.linSwitch,
      _table.logDiv,
      _table.logMult,
      _table.logAdd
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(P_CooldownConfigData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.linNum,
      _table.linDen,
      _table.linSwitch,
      _table.logDiv,
      _table.logMult,
      _table.logAdd
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (uint256 linNum, uint256 linDen, uint256 linSwitch, uint256 logDiv, uint256 logMult, uint256 logAdd)
  {
    linNum = (uint256(Bytes.getBytes32(_blob, 0)));

    linDen = (uint256(Bytes.getBytes32(_blob, 32)));

    linSwitch = (uint256(Bytes.getBytes32(_blob, 64)));

    logDiv = (uint256(Bytes.getBytes32(_blob, 96)));

    logMult = (uint256(Bytes.getBytes32(_blob, 128)));

    logAdd = (uint256(Bytes.getBytes32(_blob, 160)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (P_CooldownConfigData memory _table) {
    (_table.linNum, _table.linDen, _table.linSwitch, _table.logDiv, _table.logMult, _table.logAdd) = decodeStatic(
      _staticData
    );
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint256 linNum,
    uint256 linDen,
    uint256 linSwitch,
    uint256 logDiv,
    uint256 logMult,
    uint256 logAdd
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(linNum, linDen, linSwitch, logDiv, logMult, logAdd);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256 linNum,
    uint256 linDen,
    uint256 linSwitch,
    uint256 logDiv,
    uint256 logMult,
    uint256 logAdd
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(linNum, linDen, linSwitch, logDiv, logMult, logAdd);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple() internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    return _keyTuple;
  }
}
