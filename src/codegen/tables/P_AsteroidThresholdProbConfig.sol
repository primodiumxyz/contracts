// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct P_AsteroidThresholdProbConfigData {
  uint256 common1;
  uint256 common2;
  uint256 eliteMicro;
  uint256 eliteSmall;
  uint256 eliteMedium;
  uint256 eliteLarge;
}

library P_AsteroidThresholdProbConfig {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "Pri_11", name: "P_AsteroidThresh", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x74625072695f31310000000000000000505f41737465726f6964546872657368);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x00c0060020202020202000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of ()
  Schema constant _keySchema = Schema.wrap(0x0000000000000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint256, uint256, uint256, uint256, uint256, uint256)
  Schema constant _valueSchema = Schema.wrap(0x00c006001f1f1f1f1f1f00000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](0);
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](6);
    fieldNames[0] = "common1";
    fieldNames[1] = "common2";
    fieldNames[2] = "eliteMicro";
    fieldNames[3] = "eliteSmall";
    fieldNames[4] = "eliteMedium";
    fieldNames[5] = "eliteLarge";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get common1.
   */
  function getCommon1() internal view returns (uint256 common1) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get common1.
   */
  function _getCommon1() internal view returns (uint256 common1) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set common1.
   */
  function setCommon1(uint256 common1) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((common1)), _fieldLayout);
  }

  /**
   * @notice Set common1.
   */
  function _setCommon1(uint256 common1) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((common1)), _fieldLayout);
  }

  /**
   * @notice Get common2.
   */
  function getCommon2() internal view returns (uint256 common2) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get common2.
   */
  function _getCommon2() internal view returns (uint256 common2) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set common2.
   */
  function setCommon2(uint256 common2) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((common2)), _fieldLayout);
  }

  /**
   * @notice Set common2.
   */
  function _setCommon2(uint256 common2) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((common2)), _fieldLayout);
  }

  /**
   * @notice Get eliteMicro.
   */
  function getEliteMicro() internal view returns (uint256 eliteMicro) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get eliteMicro.
   */
  function _getEliteMicro() internal view returns (uint256 eliteMicro) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set eliteMicro.
   */
  function setEliteMicro(uint256 eliteMicro) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((eliteMicro)), _fieldLayout);
  }

  /**
   * @notice Set eliteMicro.
   */
  function _setEliteMicro(uint256 eliteMicro) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((eliteMicro)), _fieldLayout);
  }

  /**
   * @notice Get eliteSmall.
   */
  function getEliteSmall() internal view returns (uint256 eliteSmall) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get eliteSmall.
   */
  function _getEliteSmall() internal view returns (uint256 eliteSmall) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set eliteSmall.
   */
  function setEliteSmall(uint256 eliteSmall) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((eliteSmall)), _fieldLayout);
  }

  /**
   * @notice Set eliteSmall.
   */
  function _setEliteSmall(uint256 eliteSmall) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((eliteSmall)), _fieldLayout);
  }

  /**
   * @notice Get eliteMedium.
   */
  function getEliteMedium() internal view returns (uint256 eliteMedium) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get eliteMedium.
   */
  function _getEliteMedium() internal view returns (uint256 eliteMedium) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set eliteMedium.
   */
  function setEliteMedium(uint256 eliteMedium) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((eliteMedium)), _fieldLayout);
  }

  /**
   * @notice Set eliteMedium.
   */
  function _setEliteMedium(uint256 eliteMedium) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((eliteMedium)), _fieldLayout);
  }

  /**
   * @notice Get eliteLarge.
   */
  function getEliteLarge() internal view returns (uint256 eliteLarge) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get eliteLarge.
   */
  function _getEliteLarge() internal view returns (uint256 eliteLarge) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set eliteLarge.
   */
  function setEliteLarge(uint256 eliteLarge) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((eliteLarge)), _fieldLayout);
  }

  /**
   * @notice Set eliteLarge.
   */
  function _setEliteLarge(uint256 eliteLarge) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((eliteLarge)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get() internal view returns (P_AsteroidThresholdProbConfigData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get() internal view returns (P_AsteroidThresholdProbConfigData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    uint256 common1,
    uint256 common2,
    uint256 eliteMicro,
    uint256 eliteSmall,
    uint256 eliteMedium,
    uint256 eliteLarge
  ) internal {
    bytes memory _staticData = encodeStatic(common1, common2, eliteMicro, eliteSmall, eliteMedium, eliteLarge);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    uint256 common1,
    uint256 common2,
    uint256 eliteMicro,
    uint256 eliteSmall,
    uint256 eliteMedium,
    uint256 eliteLarge
  ) internal {
    bytes memory _staticData = encodeStatic(common1, common2, eliteMicro, eliteSmall, eliteMedium, eliteLarge);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(P_AsteroidThresholdProbConfigData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.common1,
      _table.common2,
      _table.eliteMicro,
      _table.eliteSmall,
      _table.eliteMedium,
      _table.eliteLarge
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(P_AsteroidThresholdProbConfigData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.common1,
      _table.common2,
      _table.eliteMicro,
      _table.eliteSmall,
      _table.eliteMedium,
      _table.eliteLarge
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      uint256 common1,
      uint256 common2,
      uint256 eliteMicro,
      uint256 eliteSmall,
      uint256 eliteMedium,
      uint256 eliteLarge
    )
  {
    common1 = (uint256(Bytes.getBytes32(_blob, 0)));

    common2 = (uint256(Bytes.getBytes32(_blob, 32)));

    eliteMicro = (uint256(Bytes.getBytes32(_blob, 64)));

    eliteSmall = (uint256(Bytes.getBytes32(_blob, 96)));

    eliteMedium = (uint256(Bytes.getBytes32(_blob, 128)));

    eliteLarge = (uint256(Bytes.getBytes32(_blob, 160)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (P_AsteroidThresholdProbConfigData memory _table) {
    (
      _table.common1,
      _table.common2,
      _table.eliteMicro,
      _table.eliteSmall,
      _table.eliteMedium,
      _table.eliteLarge
    ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint256 common1,
    uint256 common2,
    uint256 eliteMicro,
    uint256 eliteSmall,
    uint256 eliteMedium,
    uint256 eliteLarge
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(common1, common2, eliteMicro, eliteSmall, eliteMedium, eliteLarge);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256 common1,
    uint256 common2,
    uint256 eliteMicro,
    uint256 eliteSmall,
    uint256 eliteMedium,
    uint256 eliteLarge
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(common1, common2, eliteMicro, eliteSmall, eliteMedium, eliteLarge);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple() internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    return _keyTuple;
  }
}
